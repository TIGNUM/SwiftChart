fastlane_version "2.36.0"

default_platform :ios

platform :ios do
  before_all do
    cocoapods(repo_update: true)
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
  end

  error do |lane, exception|
    # Do something
  end

  # LANES

  desc "Runs all the tests"
  lane :test do
    scan(scheme: "QOT")
  end


  desc "Deploy to Hockeyapp"
  lane :beta do
    
    # Install certificates and profiles
    sigh(force: false)

    # Increment build number
    set_info_plist_value(path: ENV['INFO_PLIST_PATH'], key: "CFBundleVersion", value: ENV["BITRISE_BUILD_NUMBER"])

    # Build
    gym(
      scheme: "QOT",
      configuration: "Release"
    )

    # Release to hockey app
    hockey(api_token: ENV["HOCKEYAPP_API_TOKEN"])
  end


  desc "Build and deploy to AWS S3 and hockey"
  lane :release do
    
    # Install certificates and profiles
    sigh(force: false)

    # Increment build number
    set_info_plist_value(path: ENV['INFO_PLIST_PATH'], key: "CFBundleVersion", value: ENV["BITRISE_BUILD_NUMBER"])

    # Build
    gym(
      scheme: "QOT",
      configuration: "Release"
    )

    #Release to AWS S3
    aws_s3(
      access_key: ENV['S3_ACCESS_KEY'],
      secret_access_key: ENV['S3_SECRET_ACCESS_KEY'],
      bucket: ENV['S3_BUCKET'],
      region: ENV['S3_REGION'],
      ipa: ENV['S3_IPA_NAME'],
      app_directory: ENV['S3_APP_DIRECTORY'], # DON'T DELETE! This stops us overwriting original QOT app.
      version_template_path: ENV['S3_VERSION_TEMPLATE_PATH'],
      upload_metadata: true # Upload version.json, plist and HTML. Set to false to skip uploading of these files.
    )

    # Release to hockey app
    hockey(api_token: ENV["HOCKEYAPP_API_TOKEN"])
  end


  desc "Build and deploy to hockey for Novartis"
  lane :novartis do
    # Update Urban Airship
    update_urban_airship_configuration(
      plist_path: ENV['URBAN_AIRSHIP_PLIST_PATH'],
      production_app_key: ENV['URBAN_AIRSHIP_NOVARTIS_PRODUCTION_APP_KEY'],
      production_app_secret: ENV['URBAN_AIRSHIP_NOVARTIS_PRODUCTION_APP_SECRET']
    )

    # Install certificates and profiles
    sigh(force: false)

    # Increment build number
    set_info_plist_value(path: ENV['INFO_PLIST_PATH'], key: "CFBundleVersion", value: ENV["BITRISE_BUILD_NUMBER"])

    # Build
    gym(
      scheme: "QOT",
      configuration: "Release"
    )

    # Release to hockey app
    hockey(api_token: ENV["NOVARTIS_BUILD_HOCKEYAPP_API_TOKEN"])
  end


  desc "Build and deploy to App Store"
  lane :app_store do
    # Update Urban Airship
    update_urban_airship_configuration(
      plist_path: ENV['URBAN_AIRSHIP_PLIST_PATH'],
      production_app_key: ENV['URBAN_AIRSHIP_APP_STORE_PRODUCTION_APP_KEY'],
      production_app_secret: ENV['URBAN_AIRSHIP_APP_STORE_PRODUCTION_APP_SECRET']
    )

    # Install certificates and profiles
    sigh(force: false)

    # Increment build number
    set_info_plist_value(path: ENV['INFO_PLIST_PATH'], key: "CFBundleVersion", value: ENV["BITRISE_BUILD_NUMBER"])

    # Build
    gym(
      scheme: "QOT",
      configuration: "AppStore"
    )

    # Upload to testflight
    testflight(skip_submission: true)

    # Release to hockey app
    hockey(api_token: ENV["APP_STORE_HOCKEYAPP_API_TOKEN"])
  end


end
