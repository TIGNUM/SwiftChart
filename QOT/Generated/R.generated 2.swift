//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `AirshipConfig.plist`.
    static let airshipConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "AirshipConfig", pathExtension: "plist")
    /// Resource file `Database`.
    static let database = Rswift.FileResource(bundle: R.hostingBundle, name: "Database", pathExtension: "")
    /// Resource file `QotNotification.aiff`.
    static let qotNotificationAiff = Rswift.FileResource(bundle: R.hostingBundle, name: "QotNotification", pathExtension: "aiff")
    /// Resource file `WebViewContent.html`.
    static let webViewContentHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "WebViewContent", pathExtension: "html")
    /// Resource file `bundled_media.plist`.
    static let bundled_mediaPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "bundled_media", pathExtension: "plist")
    /// Resource file `default.realm`.
    static let defaultRealm = Rswift.FileResource(bundle: R.hostingBundle, name: "default", pathExtension: "realm")
    /// Resource file `styles.css`.
    static let stylesCss = Rswift.FileResource(bundle: R.hostingBundle, name: "styles", pathExtension: "css")
    
    /// `bundle.url(forResource: "AirshipConfig", withExtension: "plist")`
    static func airshipConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.airshipConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Database", withExtension: "")`
    static func database(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.database
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "QotNotification", withExtension: "aiff")`
    static func qotNotificationAiff(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qotNotificationAiff
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "WebViewContent", withExtension: "html")`
    static func webViewContentHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.webViewContentHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "bundled_media", withExtension: "plist")`
    static func bundled_mediaPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bundled_mediaPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "default", withExtension: "realm")`
    static func defaultRealm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.defaultRealm
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "styles", withExtension: "css")`
    static func stylesCss(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stylesCss
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `Apercu-Bold`.
    static let apercuBold = Rswift.FontResource(fontName: "Apercu-Bold")
    /// Font `Apercu-Light`.
    static let apercuLight = Rswift.FontResource(fontName: "Apercu-Light")
    /// Font `Apercu-Medium`.
    static let apercuMedium = Rswift.FontResource(fontName: "Apercu-Medium")
    /// Font `Apercu-Regular`.
    static let apercuRegular = Rswift.FontResource(fontName: "Apercu-Regular")
    /// Font `SFProDisplay-Light`.
    static let sfProDisplayLight = Rswift.FontResource(fontName: "SFProDisplay-Light")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")
    /// Font `SFProDisplay-Thin`.
    static let sfProDisplayThin = Rswift.FontResource(fontName: "SFProDisplay-Thin")
    /// Font `SFProDisplay-Ultralight`.
    static let sfProDisplayUltralight = Rswift.FontResource(fontName: "SFProDisplay-Ultralight")
    /// Font `SFProText-Light`.
    static let sfProTextLight = Rswift.FontResource(fontName: "SFProText-Light")
    /// Font `SFProText-Medium`.
    static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
    /// Font `SFProText-Regular`.
    static let sfProTextRegular = Rswift.FontResource(fontName: "SFProText-Regular")
    /// Font `SFProText-Semibold`.
    static let sfProTextSemibold = Rswift.FontResource(fontName: "SFProText-Semibold")
    
    /// `UIFont(name: "Apercu-Bold", size: ...)`
    static func apercuBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: apercuBold, size: size)
    }
    
    /// `UIFont(name: "Apercu-Light", size: ...)`
    static func apercuLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: apercuLight, size: size)
    }
    
    /// `UIFont(name: "Apercu-Medium", size: ...)`
    static func apercuMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: apercuMedium, size: size)
    }
    
    /// `UIFont(name: "Apercu-Regular", size: ...)`
    static func apercuRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: apercuRegular, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Light", size: ...)`
    static func sfProDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLight, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Thin", size: ...)`
    static func sfProDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayThin, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Ultralight", size: ...)`
    static func sfProDisplayUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayUltralight, size: size)
    }
    
    /// `UIFont(name: "SFProText-Light", size: ...)`
    static func sfProTextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLight, size: size)
    }
    
    /// `UIFont(name: "SFProText-Medium", size: ...)`
    static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMedium, size: size)
    }
    
    /// `UIFont(name: "SFProText-Regular", size: ...)`
    static func sfProTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegular, size: size)
    }
    
    /// `UIFont(name: "SFProText-Semibold", size: ...)`
    static func sfProTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemibold, size: size)
    }
    
    static func validate() throws {
      if R.font.apercuBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Apercu-Bold' could not be loaded, is 'Apercu-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.apercuLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Apercu-Light' could not be loaded, is 'Apercu-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.apercuMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Apercu-Medium' could not be loaded, is 'Apercu-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.apercuRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Apercu-Regular' could not be loaded, is 'Apercu-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Light' could not be loaded, is 'SF-Pro-Display-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SF-Pro-Display-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Thin' could not be loaded, is 'SF-Pro-Display-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Ultralight' could not be loaded, is 'SF-Pro-Display-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Light' could not be loaded, is 'SF-Pro-Text-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'SF-Pro-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Regular' could not be loaded, is 'SF-Pro-Text-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Semibold' could not be loaded, is 'SF-Pro-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 185 images.
  struct image {
    /// Image ` tabBarItemCalendar`.
    static let tabBarItemCalendar = Rswift.ImageResource(bundle: R.hostingBundle, name: " tabBarItemCalendar")
    /// Image `CrossImage`.
    static let crossImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "CrossImage")
    /// Image `DPM_Backlight`.
    static let dpm_Backlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "DPM_Backlight")
    /// Image `DPM_CellIndicator`.
    static let dpm_CellIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "DPM_CellIndicator")
    /// Image `DPM_ScrollAssistant`.
    static let dpm_ScrollAssistant = Rswift.ImageResource(bundle: R.hostingBundle, name: "DPM_ScrollAssistant")
    /// Image `DPM_Separator`.
    static let dpm_Separator = Rswift.ImageResource(bundle: R.hostingBundle, name: "DPM_Separator")
    /// Image `Image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image")
    /// Image `LearnCategory`.
    static let learnCategory = Rswift.ImageResource(bundle: R.hostingBundle, name: "LearnCategory")
    /// Image `LoginLogo`.
    static let loginLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginLogo")
    /// Image `Play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "Play")
    /// Image `Q-Black`.
    static let qBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "Q-Black")
    /// Image `Strategyvisited`.
    static let strategyvisited = Rswift.ImageResource(bundle: R.hostingBundle, name: "Strategyvisited")
    /// Image `Universe_2state`.
    static let universe_2state = Rswift.ImageResource(bundle: R.hostingBundle, name: "Universe_2state")
    /// Image `add_remove`.
    static let add_remove = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_remove")
    /// Image `add_sensor`.
    static let add_sensor = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_sensor")
    /// Image `arrowBack`.
    static let arrowBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowBack")
    /// Image `arrowDown`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowDown")
    /// Image `arrowFront`.
    static let arrowFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowFront")
    /// Image `arrowUp`.
    static let arrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowUp")
    /// Image `audioPlaceholder`.
    static let audioPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "audioPlaceholder")
    /// Image `background_guide_gradient`.
    static let background_guide_gradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_guide_gradient")
    /// Image `bottomNavigatorBG`.
    static let bottomNavigatorBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottomNavigatorBG")
    /// Image `bubblesWithCorner`.
    static let bubblesWithCorner = Rswift.ImageResource(bundle: R.hostingBundle, name: "bubblesWithCorner")
    /// Image `bubblesWithGradient`.
    static let bubblesWithGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "bubblesWithGradient")
    /// Image `byTignum`.
    static let byTignum = Rswift.ImageResource(bundle: R.hostingBundle, name: "byTignum")
    /// Image `check_subscription`.
    static let check_subscription = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_subscription")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `checkbox_checked`.
    static let checkbox_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_checked")
    /// Image `checkbox_unchecked`.
    static let checkbox_unchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_unchecked")
    /// Image `circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle")
    /// Image `circlesWarning`.
    static let circlesWarning = Rswift.ImageResource(bundle: R.hostingBundle, name: "circlesWarning")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `correctEmail`.
    static let correctEmail = Rswift.ImageResource(bundle: R.hostingBundle, name: "correctEmail")
    /// Image `dummy_Profile`.
    static let dummy_Profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummy_Profile")
    /// Image `exclusive_content`.
    static let exclusive_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "exclusive_content")
    /// Image `explainer_ico`.
    static let explainer_ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "explainer_ico")
    /// Image `fitbitLogo`.
    static let fitbitLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitbitLogo")
    /// Image `footerDark`.
    static let footerDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "footerDark")
    /// Image `footer_light`.
    static let footer_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "footer_light")
    /// Image `gradientBase`.
    static let gradientBase = Rswift.ImageResource(bundle: R.hostingBundle, name: "gradientBase")
    /// Image `gradientTop`.
    static let gradientTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "gradientTop")
    /// Image `ic_active`.
    static let ic_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_active")
    /// Image `ic_arrow_left`.
    static let ic_arrow_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_left")
    /// Image `ic_arrow_right`.
    static let ic_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right")
    /// Image `ic_arrow_up`.
    static let ic_arrow_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_up")
    /// Image `ic_audio_grey`.
    static let ic_audio_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_audio_grey")
    /// Image `ic_audio_slider`.
    static let ic_audio_slider = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_audio_slider")
    /// Image `ic_audio`.
    static let ic_audio = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_audio")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_bookmark_fill`.
    static let ic_bookmark_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bookmark_fill")
    /// Image `ic_bookmark`.
    static let ic_bookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bookmark")
    /// Image `ic_calendar`.
    static let ic_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar")
    /// Image `ic_camera_grey`.
    static let ic_camera_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_grey")
    /// Image `ic_camera_sand`.
    static let ic_camera_sand = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_sand")
    /// Image `ic_camera_tools`.
    static let ic_camera_tools = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_tools")
    /// Image `ic_camera`.
    static let ic_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera")
    /// Image `ic_cancel`.
    static let ic_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel")
    /// Image `ic_checkbox_selected`.
    static let ic_checkbox_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox_selected")
    /// Image `ic_checkbox`.
    static let ic_checkbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox")
    /// Image `ic_circles`.
    static let ic_circles = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_circles")
    /// Image `ic_close_accent`.
    static let ic_close_accent = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_accent")
    /// Image `ic_close_rounded`.
    static let ic_close_rounded = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_rounded")
    /// Image `ic_close_white`.
    static let ic_close_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_white")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_coach`.
    static let ic_coach = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_coach")
    /// Image `ic_disclosure`.
    static let ic_disclosure = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_disclosure")
    /// Image `ic_download`.
    static let ic_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_download")
    /// Image `ic_edit`.
    static let ic_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit")
    /// Image `ic_event`.
    static let ic_event = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event")
    /// Image `ic_eyeHide`.
    static let ic_eyeHide = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eyeHide")
    /// Image `ic_eye`.
    static let ic_eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eye")
    /// Image `ic_generator`.
    static let ic_generator = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_generator")
    /// Image `ic_group_grey`.
    static let ic_group_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_group_grey")
    /// Image `ic_group_sand`.
    static let ic_group_sand = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_group_sand")
    /// Image `ic_group`.
    static let ic_group = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_group")
    /// Image `ic_info`.
    static let ic_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_info")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_menu`.
    static let ic_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu")
    /// Image `ic_mic`.
    static let ic_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mic")
    /// Image `ic_minimize_dark`.
    static let ic_minimize_dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_minimize_dark")
    /// Image `ic_minimize_up`.
    static let ic_minimize_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_minimize_up")
    /// Image `ic_minimize`.
    static let ic_minimize = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_minimize")
    /// Image `ic_minus`.
    static let ic_minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_minus")
    /// Image `ic_more_unselected`.
    static let ic_more_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_unselected")
    /// Image `ic_more`.
    static let ic_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more")
    /// Image `ic_navbar_arrow_left`.
    static let ic_navbar_arrow_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_navbar_arrow_left")
    /// Image `ic_navbar_arrow_right`.
    static let ic_navbar_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_navbar_arrow_right")
    /// Image `ic_new_tag`.
    static let ic_new_tag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_new_tag")
    /// Image `ic_night_mode_selected`.
    static let ic_night_mode_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_night_mode_selected")
    /// Image `ic_night_mode_unselected`.
    static let ic_night_mode_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_night_mode_unselected")
    /// Image `ic_off`.
    static let ic_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_off")
    /// Image `ic_pause_sand`.
    static let ic_pause_sand = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pause_sand")
    /// Image `ic_pause`.
    static let ic_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pause")
    /// Image `ic_play_sand_hollow`.
    static let ic_play_sand_hollow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play_sand_hollow")
    /// Image `ic_play_sand`.
    static let ic_play_sand = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play_sand")
    /// Image `ic_play_video`.
    static let ic_play_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play_video")
    /// Image `ic_play`.
    static let ic_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play")
    /// Image `ic_plus`.
    static let ic_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus")
    /// Image `ic_radio_selected`.
    static let ic_radio_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_selected")
    /// Image `ic_radio_unselected`.
    static let ic_radio_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_unselected")
    /// Image `ic_read_grey`.
    static let ic_read_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_read_grey")
    /// Image `ic_save_prep`.
    static let ic_save_prep = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_save_prep")
    /// Image `ic_save`.
    static let ic_save = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_save")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_searchbar`.
    static let ic_searchbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_searchbar")
    /// Image `ic_seen_of`.
    static let ic_seen_of = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_seen_of")
    /// Image `ic_share_blue`.
    static let ic_share_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_blue")
    /// Image `ic_share_fancy`.
    static let ic_share_fancy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_fancy")
    /// Image `ic_share_sand`.
    static let ic_share_sand = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_sand")
    /// Image `ic_share`.
    static let ic_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share")
    /// Image `ic_text_scale`.
    static let ic_text_scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_text_scale")
    /// Image `ic_warning_circle`.
    static let ic_warning_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_warning_circle")
    /// Image `ic_warning_circles`.
    static let ic_warning_circles = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_warning_circles")
    /// Image `ic_warning`.
    static let ic_warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_warning")
    /// Image `lightTopGradient`.
    static let lightTopGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "lightTopGradient")
    /// Image `loginEyes`.
    static let loginEyes = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginEyes")
    /// Image `my-why-image-plus-icon`.
    static let myWhyImagePlusIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "my-why-image-plus-icon")
    /// Image `myWhyChoicesFrame`.
    static let myWhyChoicesFrame = Rswift.ImageResource(bundle: R.hostingBundle, name: "myWhyChoicesFrame")
    /// Image `my_library_bookmark`.
    static let my_library_bookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_bookmark")
    /// Image `my_library_camera`.
    static let my_library_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_camera")
    /// Image `my_library_delete`.
    static let my_library_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_delete")
    /// Image `my_library_download`.
    static let my_library_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_download")
    /// Image `my_library_group`.
    static let my_library_group = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_group")
    /// Image `my_library_link`.
    static let my_library_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_link")
    /// Image `my_library_listen`.
    static let my_library_listen = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_listen")
    /// Image `my_library_note_light`.
    static let my_library_note_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_note_light")
    /// Image `my_library_note`.
    static let my_library_note = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_note")
    /// Image `my_library_read`.
    static let my_library_read = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_read")
    /// Image `my_library_stop`.
    static let my_library_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_stop")
    /// Image `my_library_warning`.
    static let my_library_warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_library_warning")
    /// Image `my_sprints_active`.
    static let my_sprints_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_sprints_active")
    /// Image `my_sprints_completed`.
    static let my_sprints_completed = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_sprints_completed")
    /// Image `my_sprints_edit`.
    static let my_sprints_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_sprints_edit")
    /// Image `my_sprints_pause`.
    static let my_sprints_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_sprints_pause")
    /// Image `my_sprints_pending`.
    static let my_sprints_pending = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_sprints_pending")
    /// Image `my_sprints_play`.
    static let my_sprints_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_sprints_play")
    /// Image `my_sprints_upcoming`.
    static let my_sprints_upcoming = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_sprints_upcoming")
    /// Image `onboarding_prompt_circles`.
    static let onboarding_prompt_circles = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_prompt_circles")
    /// Image `onboarding_prompt_done`.
    static let onboarding_prompt_done = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_prompt_done")
    /// Image `oval`.
    static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "oval")
    /// Image `overlay_travel_01`.
    static let overlay_travel_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "overlay_travel_01")
    /// Image `overlay_travel_02`.
    static let overlay_travel_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "overlay_travel_02")
    /// Image `overlay_travel_03`.
    static let overlay_travel_03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "overlay_travel_03")
    /// Image `overlay_travel_04`.
    static let overlay_travel_04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "overlay_travel_04")
    /// Image `pageControlSelected`.
    static let pageControlSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "pageControlSelected")
    /// Image `pageControlUnSelected`.
    static let pageControlUnSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "pageControlUnSelected")
    /// Image `partner-empty`.
    static let partnerEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "partner-empty")
    /// Image `partner-placeholder`.
    static let partnerPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "partner-placeholder")
    /// Image `photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
    /// Image `placeholder_partner`.
    static let placeholder_partner = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_partner")
    /// Image `placeholder_user`.
    static let placeholder_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_user")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `preloading`.
    static let preloading = Rswift.ImageResource(bundle: R.hostingBundle, name: "preloading")
    /// Image `prepare-content-minus-icon`.
    static let prepareContentMinusIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "prepare-content-minus-icon")
    /// Image `prepare-content-plus-icon`.
    static let prepareContentPlusIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "prepare-content-plus-icon")
    /// Image `qotLogo`.
    static let qotLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "qotLogo")
    /// Image `ray`.
    static let ray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ray")
    /// Image `recoverBig`.
    static let recoverBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "recoverBig")
    /// Image `recoverSmall`.
    static let recoverSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "recoverSmall")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `shortcutItem-my-data`.
    static let shortcutItemMyData = Rswift.ImageResource(bundle: R.hostingBundle, name: "shortcutItem-my-data")
    /// Image `shortcutItem-my-to-be-vision`.
    static let shortcutItemMyToBeVision = Rswift.ImageResource(bundle: R.hostingBundle, name: "shortcutItem-my-to-be-vision")
    /// Image `shortcutItem-prepare`.
    static let shortcutItemPrepare = Rswift.ImageResource(bundle: R.hostingBundle, name: "shortcutItem-prepare")
    /// Image `shortcutItem-tools`.
    static let shortcutItemTools = Rswift.ImageResource(bundle: R.hostingBundle, name: "shortcutItem-tools")
    /// Image `shortcutItem-whats-hot-article`.
    static let shortcutItemWhatsHotArticle = Rswift.ImageResource(bundle: R.hostingBundle, name: "shortcutItem-whats-hot-article")
    /// Image `sleepBig`.
    static let sleepBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "sleepBig")
    /// Image `sleepSmall`.
    static let sleepSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "sleepSmall")
    /// Image `strategyback`.
    static let strategyback = Rswift.ImageResource(bundle: R.hostingBundle, name: "strategyback")
    /// Image `tabBarButtonItemHighlight`.
    static let tabBarButtonItemHighlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarButtonItemHighlight")
    /// Image `tabBarItemCharts`.
    static let tabBarItemCharts = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItemCharts")
    /// Image `tabBarItemCompassRose`.
    static let tabBarItemCompassRose = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItemCompassRose")
    /// Image `tabBarItemLearn`.
    static let tabBarItemLearn = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItemLearn")
    /// Image `tabBarItemTignum`.
    static let tabBarItemTignum = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarItemTignum")
    /// Image `taskBig`.
    static let taskBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "taskBig")
    /// Image `taskSmall`.
    static let taskSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "taskSmall")
    /// Image `tbvPlaceholder`.
    static let tbvPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "tbvPlaceholder")
    /// Image `tbv_fade_overlay`.
    static let tbv_fade_overlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "tbv_fade_overlay")
    /// Image `tbv_gradient_done`.
    static let tbv_gradient_done = Rswift.ImageResource(bundle: R.hostingBundle, name: "tbv_gradient_done")
    /// Image `tbv_gradient_todo`.
    static let tbv_gradient_todo = Rswift.ImageResource(bundle: R.hostingBundle, name: "tbv_gradient_todo")
    /// Image `tbv_placeholder`.
    static let tbv_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "tbv_placeholder")
    /// Image `universe_plus_ico_add_partner`.
    static let universe_plus_ico_add_partner = Rswift.ImageResource(bundle: R.hostingBundle, name: "universe_plus_ico_add_partner")
    /// Image `upcomingEventBig`.
    static let upcomingEventBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "upcomingEventBig")
    /// Image `upcomingEventSmall`.
    static let upcomingEventSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "upcomingEventSmall")
    /// Image `waveBig`.
    static let waveBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "waveBig")
    /// Image `waveSmall`.
    static let waveSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "waveSmall")
    
    /// `UIImage(named: " tabBarItemCalendar", bundle: ..., traitCollection: ...)`
    static func tabBarItemCalendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabBarItemCalendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CrossImage", bundle: ..., traitCollection: ...)`
    static func crossImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.crossImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DPM_Backlight", bundle: ..., traitCollection: ...)`
    static func dpm_Backlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dpm_Backlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DPM_CellIndicator", bundle: ..., traitCollection: ...)`
    static func dpm_CellIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dpm_CellIndicator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DPM_ScrollAssistant", bundle: ..., traitCollection: ...)`
    static func dpm_ScrollAssistant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dpm_ScrollAssistant, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DPM_Separator", bundle: ..., traitCollection: ...)`
    static func dpm_Separator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dpm_Separator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LearnCategory", bundle: ..., traitCollection: ...)`
    static func learnCategory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.learnCategory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LoginLogo", bundle: ..., traitCollection: ...)`
    static func loginLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.loginLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Q-Black", bundle: ..., traitCollection: ...)`
    static func qBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.qBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Strategyvisited", bundle: ..., traitCollection: ...)`
    static func strategyvisited(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.strategyvisited, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Universe_2state", bundle: ..., traitCollection: ...)`
    static func universe_2state(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.universe_2state, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add_remove", bundle: ..., traitCollection: ...)`
    static func add_remove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.add_remove, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add_sensor", bundle: ..., traitCollection: ...)`
    static func add_sensor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.add_sensor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowBack", bundle: ..., traitCollection: ...)`
    static func arrowBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.arrowBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowDown", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowFront", bundle: ..., traitCollection: ...)`
    static func arrowFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.arrowFront, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowUp", bundle: ..., traitCollection: ...)`
    static func arrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.arrowUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "audioPlaceholder", bundle: ..., traitCollection: ...)`
    static func audioPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.audioPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_guide_gradient", bundle: ..., traitCollection: ...)`
    static func background_guide_gradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.background_guide_gradient, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottomNavigatorBG", bundle: ..., traitCollection: ...)`
    static func bottomNavigatorBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bottomNavigatorBG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bubblesWithCorner", bundle: ..., traitCollection: ...)`
    static func bubblesWithCorner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bubblesWithCorner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bubblesWithGradient", bundle: ..., traitCollection: ...)`
    static func bubblesWithGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bubblesWithGradient, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "byTignum", bundle: ..., traitCollection: ...)`
    static func byTignum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.byTignum, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check_subscription", bundle: ..., traitCollection: ...)`
    static func check_subscription(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.check_subscription, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_checked", bundle: ..., traitCollection: ...)`
    static func checkbox_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.checkbox_checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_unchecked", bundle: ..., traitCollection: ...)`
    static func checkbox_unchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.checkbox_unchecked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "circlesWarning", bundle: ..., traitCollection: ...)`
    static func circlesWarning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.circlesWarning, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "correctEmail", bundle: ..., traitCollection: ...)`
    static func correctEmail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.correctEmail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dummy_Profile", bundle: ..., traitCollection: ...)`
    static func dummy_Profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dummy_Profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exclusive_content", bundle: ..., traitCollection: ...)`
    static func exclusive_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.exclusive_content, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "explainer_ico", bundle: ..., traitCollection: ...)`
    static func explainer_ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.explainer_ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fitbitLogo", bundle: ..., traitCollection: ...)`
    static func fitbitLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.fitbitLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "footerDark", bundle: ..., traitCollection: ...)`
    static func footerDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.footerDark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "footer_light", bundle: ..., traitCollection: ...)`
    static func footer_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.footer_light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gradientBase", bundle: ..., traitCollection: ...)`
    static func gradientBase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.gradientBase, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gradientTop", bundle: ..., traitCollection: ...)`
    static func gradientTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.gradientTop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_active", bundle: ..., traitCollection: ...)`
    static func ic_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow_left", bundle: ..., traitCollection: ...)`
    static func ic_arrow_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_arrow_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_arrow_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow_up", bundle: ..., traitCollection: ...)`
    static func ic_arrow_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_arrow_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_audio", bundle: ..., traitCollection: ...)`
    static func ic_audio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_audio, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_audio_grey", bundle: ..., traitCollection: ...)`
    static func ic_audio_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_audio_grey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_audio_slider", bundle: ..., traitCollection: ...)`
    static func ic_audio_slider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_audio_slider, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bookmark", bundle: ..., traitCollection: ...)`
    static func ic_bookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_bookmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bookmark_fill", bundle: ..., traitCollection: ...)`
    static func ic_bookmark_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_bookmark_fill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calendar", bundle: ..., traitCollection: ...)`
    static func ic_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera", bundle: ..., traitCollection: ...)`
    static func ic_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera_grey", bundle: ..., traitCollection: ...)`
    static func ic_camera_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_camera_grey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera_sand", bundle: ..., traitCollection: ...)`
    static func ic_camera_sand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_camera_sand, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera_tools", bundle: ..., traitCollection: ...)`
    static func ic_camera_tools(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_camera_tools, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cancel", bundle: ..., traitCollection: ...)`
    static func ic_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_checkbox", bundle: ..., traitCollection: ...)`
    static func ic_checkbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_checkbox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_checkbox_selected", bundle: ..., traitCollection: ...)`
    static func ic_checkbox_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_checkbox_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_circles", bundle: ..., traitCollection: ...)`
    static func ic_circles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_circles, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_close_accent", bundle: ..., traitCollection: ...)`
    static func ic_close_accent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_close_accent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_close_rounded", bundle: ..., traitCollection: ...)`
    static func ic_close_rounded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_close_rounded, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_close_white", bundle: ..., traitCollection: ...)`
    static func ic_close_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_close_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_coach", bundle: ..., traitCollection: ...)`
    static func ic_coach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_coach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_disclosure", bundle: ..., traitCollection: ...)`
    static func ic_disclosure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_disclosure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_download", bundle: ..., traitCollection: ...)`
    static func ic_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit", bundle: ..., traitCollection: ...)`
    static func ic_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_event", bundle: ..., traitCollection: ...)`
    static func ic_event(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_event, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_eye", bundle: ..., traitCollection: ...)`
    static func ic_eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_eye, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_eyeHide", bundle: ..., traitCollection: ...)`
    static func ic_eyeHide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_eyeHide, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_generator", bundle: ..., traitCollection: ...)`
    static func ic_generator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_generator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_group", bundle: ..., traitCollection: ...)`
    static func ic_group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_group, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_group_grey", bundle: ..., traitCollection: ...)`
    static func ic_group_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_group_grey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_group_sand", bundle: ..., traitCollection: ...)`
    static func ic_group_sand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_group_sand, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_info", bundle: ..., traitCollection: ...)`
    static func ic_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu", bundle: ..., traitCollection: ...)`
    static func ic_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_mic", bundle: ..., traitCollection: ...)`
    static func ic_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_minimize", bundle: ..., traitCollection: ...)`
    static func ic_minimize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_minimize, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_minimize_dark", bundle: ..., traitCollection: ...)`
    static func ic_minimize_dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_minimize_dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_minimize_up", bundle: ..., traitCollection: ...)`
    static func ic_minimize_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_minimize_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_minus", bundle: ..., traitCollection: ...)`
    static func ic_minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_minus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_more", bundle: ..., traitCollection: ...)`
    static func ic_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_more_unselected", bundle: ..., traitCollection: ...)`
    static func ic_more_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_more_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_navbar_arrow_left", bundle: ..., traitCollection: ...)`
    static func ic_navbar_arrow_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_navbar_arrow_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_navbar_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_navbar_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_navbar_arrow_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_new_tag", bundle: ..., traitCollection: ...)`
    static func ic_new_tag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_new_tag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_night_mode_selected", bundle: ..., traitCollection: ...)`
    static func ic_night_mode_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_night_mode_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_night_mode_unselected", bundle: ..., traitCollection: ...)`
    static func ic_night_mode_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_night_mode_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_off", bundle: ..., traitCollection: ...)`
    static func ic_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pause", bundle: ..., traitCollection: ...)`
    static func ic_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_pause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pause_sand", bundle: ..., traitCollection: ...)`
    static func ic_pause_sand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_pause_sand, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_play", bundle: ..., traitCollection: ...)`
    static func ic_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_play_sand", bundle: ..., traitCollection: ...)`
    static func ic_play_sand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_play_sand, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_play_sand_hollow", bundle: ..., traitCollection: ...)`
    static func ic_play_sand_hollow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_play_sand_hollow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_play_video", bundle: ..., traitCollection: ...)`
    static func ic_play_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_play_video, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_plus", bundle: ..., traitCollection: ...)`
    static func ic_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_radio_selected", bundle: ..., traitCollection: ...)`
    static func ic_radio_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_radio_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_radio_unselected", bundle: ..., traitCollection: ...)`
    static func ic_radio_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_radio_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_read_grey", bundle: ..., traitCollection: ...)`
    static func ic_read_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_read_grey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_save", bundle: ..., traitCollection: ...)`
    static func ic_save(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_save, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_save_prep", bundle: ..., traitCollection: ...)`
    static func ic_save_prep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_save_prep, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_searchbar", bundle: ..., traitCollection: ...)`
    static func ic_searchbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_searchbar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_seen_of", bundle: ..., traitCollection: ...)`
    static func ic_seen_of(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_seen_of, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share", bundle: ..., traitCollection: ...)`
    static func ic_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_blue", bundle: ..., traitCollection: ...)`
    static func ic_share_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_share_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_fancy", bundle: ..., traitCollection: ...)`
    static func ic_share_fancy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_share_fancy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_sand", bundle: ..., traitCollection: ...)`
    static func ic_share_sand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_share_sand, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_text_scale", bundle: ..., traitCollection: ...)`
    static func ic_text_scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_text_scale, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_warning", bundle: ..., traitCollection: ...)`
    static func ic_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_warning, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_warning_circle", bundle: ..., traitCollection: ...)`
    static func ic_warning_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_warning_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_warning_circles", bundle: ..., traitCollection: ...)`
    static func ic_warning_circles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_warning_circles, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lightTopGradient", bundle: ..., traitCollection: ...)`
    static func lightTopGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.lightTopGradient, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loginEyes", bundle: ..., traitCollection: ...)`
    static func loginEyes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.loginEyes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my-why-image-plus-icon", bundle: ..., traitCollection: ...)`
    static func myWhyImagePlusIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.myWhyImagePlusIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "myWhyChoicesFrame", bundle: ..., traitCollection: ...)`
    static func myWhyChoicesFrame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.myWhyChoicesFrame, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_bookmark", bundle: ..., traitCollection: ...)`
    static func my_library_bookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_bookmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_camera", bundle: ..., traitCollection: ...)`
    static func my_library_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_delete", bundle: ..., traitCollection: ...)`
    static func my_library_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_download", bundle: ..., traitCollection: ...)`
    static func my_library_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_group", bundle: ..., traitCollection: ...)`
    static func my_library_group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_group, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_link", bundle: ..., traitCollection: ...)`
    static func my_library_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_link, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_listen", bundle: ..., traitCollection: ...)`
    static func my_library_listen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_listen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_note", bundle: ..., traitCollection: ...)`
    static func my_library_note(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_note, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_note_light", bundle: ..., traitCollection: ...)`
    static func my_library_note_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_note_light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_read", bundle: ..., traitCollection: ...)`
    static func my_library_read(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_read, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_stop", bundle: ..., traitCollection: ...)`
    static func my_library_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_stop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_library_warning", bundle: ..., traitCollection: ...)`
    static func my_library_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_library_warning, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_sprints_active", bundle: ..., traitCollection: ...)`
    static func my_sprints_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_sprints_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_sprints_completed", bundle: ..., traitCollection: ...)`
    static func my_sprints_completed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_sprints_completed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_sprints_edit", bundle: ..., traitCollection: ...)`
    static func my_sprints_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_sprints_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_sprints_pause", bundle: ..., traitCollection: ...)`
    static func my_sprints_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_sprints_pause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_sprints_pending", bundle: ..., traitCollection: ...)`
    static func my_sprints_pending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_sprints_pending, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_sprints_play", bundle: ..., traitCollection: ...)`
    static func my_sprints_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_sprints_play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_sprints_upcoming", bundle: ..., traitCollection: ...)`
    static func my_sprints_upcoming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.my_sprints_upcoming, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_prompt_circles", bundle: ..., traitCollection: ...)`
    static func onboarding_prompt_circles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.onboarding_prompt_circles, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_prompt_done", bundle: ..., traitCollection: ...)`
    static func onboarding_prompt_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.onboarding_prompt_done, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "oval", bundle: ..., traitCollection: ...)`
    static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.oval, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "overlay_travel_01", bundle: ..., traitCollection: ...)`
    static func overlay_travel_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlay_travel_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "overlay_travel_02", bundle: ..., traitCollection: ...)`
    static func overlay_travel_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlay_travel_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "overlay_travel_03", bundle: ..., traitCollection: ...)`
    static func overlay_travel_03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlay_travel_03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "overlay_travel_04", bundle: ..., traitCollection: ...)`
    static func overlay_travel_04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlay_travel_04, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pageControlSelected", bundle: ..., traitCollection: ...)`
    static func pageControlSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.pageControlSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pageControlUnSelected", bundle: ..., traitCollection: ...)`
    static func pageControlUnSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.pageControlUnSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "partner-empty", bundle: ..., traitCollection: ...)`
    static func partnerEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.partnerEmpty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "partner-placeholder", bundle: ..., traitCollection: ...)`
    static func partnerPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.partnerPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_partner", bundle: ..., traitCollection: ...)`
    static func placeholder_partner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.placeholder_partner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_user", bundle: ..., traitCollection: ...)`
    static func placeholder_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.placeholder_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "preloading", bundle: ..., traitCollection: ...)`
    static func preloading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.preloading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "prepare-content-minus-icon", bundle: ..., traitCollection: ...)`
    static func prepareContentMinusIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.prepareContentMinusIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "prepare-content-plus-icon", bundle: ..., traitCollection: ...)`
    static func prepareContentPlusIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.prepareContentPlusIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qotLogo", bundle: ..., traitCollection: ...)`
    static func qotLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.qotLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ray", bundle: ..., traitCollection: ...)`
    static func ray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "recoverBig", bundle: ..., traitCollection: ...)`
    static func recoverBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.recoverBig, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "recoverSmall", bundle: ..., traitCollection: ...)`
    static func recoverSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.recoverSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shortcutItem-my-data", bundle: ..., traitCollection: ...)`
    static func shortcutItemMyData(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.shortcutItemMyData, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shortcutItem-my-to-be-vision", bundle: ..., traitCollection: ...)`
    static func shortcutItemMyToBeVision(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.shortcutItemMyToBeVision, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shortcutItem-prepare", bundle: ..., traitCollection: ...)`
    static func shortcutItemPrepare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.shortcutItemPrepare, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shortcutItem-tools", bundle: ..., traitCollection: ...)`
    static func shortcutItemTools(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.shortcutItemTools, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shortcutItem-whats-hot-article", bundle: ..., traitCollection: ...)`
    static func shortcutItemWhatsHotArticle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.shortcutItemWhatsHotArticle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sleepBig", bundle: ..., traitCollection: ...)`
    static func sleepBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.sleepBig, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sleepSmall", bundle: ..., traitCollection: ...)`
    static func sleepSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.sleepSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "strategyback", bundle: ..., traitCollection: ...)`
    static func strategyback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.strategyback, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarButtonItemHighlight", bundle: ..., traitCollection: ...)`
    static func tabBarButtonItemHighlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabBarButtonItemHighlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarItemCharts", bundle: ..., traitCollection: ...)`
    static func tabBarItemCharts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabBarItemCharts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarItemCompassRose", bundle: ..., traitCollection: ...)`
    static func tabBarItemCompassRose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabBarItemCompassRose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarItemLearn", bundle: ..., traitCollection: ...)`
    static func tabBarItemLearn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabBarItemLearn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarItemTignum", bundle: ..., traitCollection: ...)`
    static func tabBarItemTignum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabBarItemTignum, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "taskBig", bundle: ..., traitCollection: ...)`
    static func taskBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.taskBig, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "taskSmall", bundle: ..., traitCollection: ...)`
    static func taskSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.taskSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tbvPlaceholder", bundle: ..., traitCollection: ...)`
    static func tbvPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tbvPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tbv_fade_overlay", bundle: ..., traitCollection: ...)`
    static func tbv_fade_overlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tbv_fade_overlay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tbv_gradient_done", bundle: ..., traitCollection: ...)`
    static func tbv_gradient_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tbv_gradient_done, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tbv_gradient_todo", bundle: ..., traitCollection: ...)`
    static func tbv_gradient_todo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tbv_gradient_todo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tbv_placeholder", bundle: ..., traitCollection: ...)`
    static func tbv_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tbv_placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "universe_plus_ico_add_partner", bundle: ..., traitCollection: ...)`
    static func universe_plus_ico_add_partner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.universe_plus_ico_add_partner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "upcomingEventBig", bundle: ..., traitCollection: ...)`
    static func upcomingEventBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.upcomingEventBig, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "upcomingEventSmall", bundle: ..., traitCollection: ...)`
    static func upcomingEventSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.upcomingEventSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "waveBig", bundle: ..., traitCollection: ...)`
    static func waveBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.waveBig, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "waveSmall", bundle: ..., traitCollection: ...)`
    static func waveSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.waveSmall, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 203 nibs.
  struct nib {
    /// Nib `AboutMeCell`.
    static let aboutMeCell = _R.nib._AboutMeCell()
    /// Nib `AbstractTableViewCell`.
    static let abstractTableViewCell = _R.nib._AbstractTableViewCell()
    /// Nib `AppSettingsFooterView`.
    static let appSettingsFooterView = _R.nib._AppSettingsFooterView()
    /// Nib `ArticleBulletPointTableViewCell`.
    static let articleBulletPointTableViewCell = _R.nib._ArticleBulletPointTableViewCell()
    /// Nib `ArticleCollectionCell`.
    static let articleCollectionCell = _R.nib._ArticleCollectionCell()
    /// Nib `ArticleHeaderView`.
    static let articleHeaderView = _R.nib._ArticleHeaderView()
    /// Nib `ArticleImageHeaderTableViewCell`.
    static let articleImageHeaderTableViewCell = _R.nib._ArticleImageHeaderTableViewCell()
    /// Nib `ArticleItemHeaderView`.
    static let articleItemHeaderView = _R.nib._ArticleItemHeaderView()
    /// Nib `ArticleItemViewController`.
    static let articleItemViewController = _R.nib._ArticleItemViewController()
    /// Nib `ArticleNextUpTableViewCell`.
    static let articleNextUpTableViewCell = _R.nib._ArticleNextUpTableViewCell()
    /// Nib `ArticleRelatedCell`.
    static let articleRelatedCell = _R.nib._ArticleRelatedCell()
    /// Nib `ArticleRelatedTableViewCell`.
    static let articleRelatedTableViewCell = _R.nib._ArticleRelatedTableViewCell()
    /// Nib `ArticleRelatedWhatsHotTableViewCell`.
    static let articleRelatedWhatsHotTableViewCell = _R.nib._ArticleRelatedWhatsHotTableViewCell()
    /// Nib `ArticleTextHeaderTableViewCell`.
    static let articleTextHeaderTableViewCell = _R.nib._ArticleTextHeaderTableViewCell()
    /// Nib `AudioButton`.
    static let audioButton = _R.nib._AudioButton()
    /// Nib `AudioPlayerBar`.
    static let audioPlayerBar = _R.nib._AudioPlayerBar()
    /// Nib `BeSpokeCell`.
    static let beSpokeCell = _R.nib._BeSpokeCell()
    /// Nib `CalendarEventsTableViewCell`.
    static let calendarEventsTableViewCell = _R.nib._CalendarEventsTableViewCell()
    /// Nib `CauseTableViewCell`.
    static let causeTableViewCell = _R.nib._CauseTableViewCell()
    /// Nib `ChartCell`.
    static let chartCell = _R.nib._ChartCell()
    /// Nib `CoachTableHeaderView`.
    static let coachTableHeaderView = _R.nib._CoachTableHeaderView()
    /// Nib `CoachTableViewCell`.
    static let coachTableViewCell = _R.nib._CoachTableViewCell()
    /// Nib `CollapsableCell`.
    static let collapsableCell = _R.nib._CollapsableCell()
    /// Nib `CollapsableContentCell`.
    static let collapsableContentCell = _R.nib._CollapsableContentCell()
    /// Nib `ComponentCollectionViewCell`.
    static let componentCollectionViewCell = _R.nib._ComponentCollectionViewCell()
    /// Nib `ComponentHeaderView`.
    static let componentHeaderView = _R.nib._ComponentHeaderView()
    /// Nib `ConfirmationViewController`.
    static let confirmationViewController = _R.nib._ConfirmationViewController()
    /// Nib `ContentItemTextTableViewCell`.
    static let contentItemTextTableViewCell = _R.nib._ContentItemTextTableViewCell()
    /// Nib `DailyBriefForwardEdge`.
    static let dailyBriefForwardEdge = _R.nib._DailyBriefForwardEdge()
    /// Nib `DailyCheckInInsights2TBV`.
    static let dailyCheckInInsights2TBV = _R.nib._DailyCheckInInsights2TBV()
    /// Nib `DailyCheckinInsightsPeakPerformanceCell`.
    static let dailyCheckinInsightsPeakPerformanceCell = _R.nib._DailyCheckinInsightsPeakPerformanceCell()
    /// Nib `DailyCheckinInsightsSHPICell`.
    static let dailyCheckinInsightsSHPICell = _R.nib._DailyCheckinInsightsSHPICell()
    /// Nib `DailyCheckinInsightsTBVCell`.
    static let dailyCheckinInsightsTBVCell = _R.nib._DailyCheckinInsightsTBVCell()
    /// Nib `DecisionTreeViewController`.
    static let decisionTreeViewController = _R.nib._DecisionTreeViewController()
    /// Nib `DepartureInfoCell`.
    static let departureInfoCell = _R.nib._DepartureInfoCell()
    /// Nib `EditHeaderView`.
    static let editHeaderView = _R.nib._EditHeaderView()
    /// Nib `ExploreCell`.
    static let exploreCell = _R.nib._ExploreCell()
    /// Nib `FatigueTableViewCell`.
    static let fatigueTableViewCell = _R.nib._FatigueTableViewCell()
    /// Nib `FeastCell`.
    static let feastCell = _R.nib._FeastCell()
    /// Nib `FiveLinesWithTopBroad`.
    static let fiveLinesWithTopBroad = _R.nib._FiveLinesWithTopBroad()
    /// Nib `FiveLines`.
    static let fiveLines = _R.nib._FiveLines()
    /// Nib `FormView`.
    static let formView = _R.nib._FormView()
    /// Nib `FoundationTableViewCell`.
    static let foundationTableViewCell = _R.nib._FoundationTableViewCell()
    /// Nib `FromMyCoachCell`.
    static let fromMyCoachCell = _R.nib._FromMyCoachCell()
    /// Nib `FromMyCoachHeaderView`.
    static let fromMyCoachHeaderView = _R.nib._FromMyCoachHeaderView()
    /// Nib `FromMyCoachMessageView`.
    static let fromMyCoachMessageView = _R.nib._FromMyCoachMessageView()
    /// Nib `FromTignumCell`.
    static let fromTignumCell = _R.nib._FromTignumCell()
    /// Nib `GoodToKnowCell`.
    static let goodToKnowCell = _R.nib._GoodToKnowCell()
    /// Nib `GuideDailyPrepTableViewCell`.
    static let guideDailyPrepTableViewCell = _R.nib._GuideDailyPrepTableViewCell()
    /// Nib `GuideGreetingView`.
    static let guideGreetingView = _R.nib._GuideGreetingView()
    /// Nib `GuidePreparationTableViewCell`.
    static let guidePreparationTableViewCell = _R.nib._GuidePreparationTableViewCell()
    /// Nib `GuideTableViewCell`.
    static let guideTableViewCell = _R.nib._GuideTableViewCell()
    /// Nib `GuideToBeVisionTableViewCell`.
    static let guideToBeVisionTableViewCell = _R.nib._GuideToBeVisionTableViewCell()
    /// Nib `GuideWhatsHotTableViewCell`.
    static let guideWhatsHotTableViewCell = _R.nib._GuideWhatsHotTableViewCell()
    /// Nib `IPadAdviceView`.
    static let iPadAdviceView = _R.nib._IPadAdviceView()
    /// Nib `ImageSubtitleTableViewCell`.
    static let imageSubtitleTableViewCell = _R.nib._ImageSubtitleTableViewCell()
    /// Nib `ImpactDataTableViewCell`.
    static let impactDataTableViewCell = _R.nib._ImpactDataTableViewCell()
    /// Nib `ImpactReadinessCell`.
    static let impactReadinessCell = _R.nib._ImpactReadinessCell()
    /// Nib `InfoAlertView`.
    static let infoAlertView = _R.nib._InfoAlertView()
    /// Nib `InfoHelperView`.
    static let infoHelperView = _R.nib._InfoHelperView()
    /// Nib `LeaderWisdomTableViewCell`.
    static let leaderWisdomTableViewCell = _R.nib._LeaderWisdomTableViewCell()
    /// Nib `LearnContentItemBulletCell`.
    static let learnContentItemBulletCell = _R.nib._LearnContentItemBulletCell()
    /// Nib `LearnContentItemHeaderView`.
    static let learnContentItemHeaderView = _R.nib._LearnContentItemHeaderView()
    /// Nib `LearnContentItemRecommendedCell`.
    static let learnContentItemRecommendedCell = _R.nib._LearnContentItemRecommendedCell()
    /// Nib `LearnPDFCell`.
    static let learnPDFCell = _R.nib._LearnPDFCell()
    /// Nib `LearnReadMoreCell`.
    static let learnReadMoreCell = _R.nib._LearnReadMoreCell()
    /// Nib `LearnStrategyAudioPlayerView`.
    static let learnStrategyAudioPlayerView = _R.nib._LearnStrategyAudioPlayerView()
    /// Nib `LearnStrategyPlaylistAudioCell`.
    static let learnStrategyPlaylistAudioCell = _R.nib._LearnStrategyPlaylistAudioCell()
    /// Nib `Level5Cell`.
    static let level5Cell = _R.nib._Level5Cell()
    /// Nib `LibraryCategoryCollectionViewCell`.
    static let libraryCategoryCollectionViewCell = _R.nib._LibraryCategoryCollectionViewCell()
    /// Nib `LibraryLatestPostCollectionViewCell`.
    static let libraryLatestPostCollectionViewCell = _R.nib._LibraryLatestPostCollectionViewCell()
    /// Nib `LibraryTableViewCell`.
    static let libraryTableViewCell = _R.nib._LibraryTableViewCell()
    /// Nib `Loader`.
    static let loader = _R.nib._Loader()
    /// Nib `MarkAsReadTableViewCell`.
    static let markAsReadTableViewCell = _R.nib._MarkAsReadTableViewCell()
    /// Nib `MeAtMyBestCell`.
    static let meAtMyBestCell = _R.nib._MeAtMyBestCell()
    /// Nib `MeAtMyBestEmptyCell`.
    static let meAtMyBestEmptyCell = _R.nib._MeAtMyBestEmptyCell()
    /// Nib `MediaPlayerOverlay`.
    static let mediaPlayerOverlay = _R.nib._MediaPlayerOverlay()
    /// Nib `MindsetShifterHeaderCell`.
    static let mindsetShifterHeaderCell = _R.nib._MindsetShifterHeaderCell()
    /// Nib `MindsetVisionTableViewCell`.
    static let mindsetVisionTableViewCell = _R.nib._MindsetVisionTableViewCell()
    /// Nib `MultipleSelectionCollectionViewCell`.
    static let multipleSelectionCollectionViewCell = _R.nib._MultipleSelectionCollectionViewCell()
    /// Nib `MultipleSelectionTableViewCell`.
    static let multipleSelectionTableViewCell = _R.nib._MultipleSelectionTableViewCell()
    /// Nib `MyPeakPerformanceRowCell`.
    static let myPeakPerformanceRowCell = _R.nib._MyPeakPerformanceRowCell()
    /// Nib `MyPeakPerformanceSectionCell`.
    static let myPeakPerformanceSectionCell = _R.nib._MyPeakPerformanceSectionCell()
    /// Nib `MyPeakPerformanceTableCell`.
    static let myPeakPerformanceTableCell = _R.nib._MyPeakPerformanceTableCell()
    /// Nib `MyPeakPerformanceTitleCell`.
    static let myPeakPerformanceTitleCell = _R.nib._MyPeakPerformanceTitleCell()
    /// Nib `MyPrepTableViewCell`.
    static let myPrepTableViewCell = _R.nib._MyPrepTableViewCell()
    /// Nib `MyPrepsTableViewCell`.
    static let myPrepsTableViewCell = _R.nib._MyPrepsTableViewCell()
    /// Nib `MyQotMainCollectionViewCell`.
    static let myQotMainCollectionViewCell = _R.nib._MyQotMainCollectionViewCell()
    /// Nib `MyQotProfileHeaderView`.
    static let myQotProfileHeaderView = _R.nib._MyQotProfileHeaderView()
    /// Nib `MyQotProfileOptionsTableViewCell`.
    static let myQotProfileOptionsTableViewCell = _R.nib._MyQotProfileOptionsTableViewCell()
    /// Nib `MyQotSyncedCalendarCell`.
    static let myQotSyncedCalendarCell = _R.nib._MyQotSyncedCalendarCell()
    /// Nib `MySprintDetailsHeaderView`.
    static let mySprintDetailsHeaderView = _R.nib._MySprintDetailsHeaderView()
    /// Nib `MySprintsListHeaderView`.
    static let mySprintsListHeaderView = _R.nib._MySprintsListHeaderView()
    /// Nib `MyToBeVisionViewController`.
    static let myToBeVisionViewController = _R.nib._MyToBeVisionViewController()
    /// Nib `MyUniverseContentView`.
    static let myUniverseContentView = _R.nib._MyUniverseContentView()
    /// Nib `MyUniverseViewController`.
    static let myUniverseViewController = _R.nib._MyUniverseViewController()
    /// Nib `NegativeToPositiveTableViewCell`.
    static let negativeToPositiveTableViewCell = _R.nib._NegativeToPositiveTableViewCell()
    /// Nib `PartnerEditViewController`.
    static let partnerEditViewController = _R.nib._PartnerEditViewController()
    /// Nib `PartnersOverviewCollectionViewCell`.
    static let partnersOverviewCollectionViewCell = _R.nib._PartnersOverviewCollectionViewCell()
    /// Nib `PartnersOverviewViewController`.
    static let partnersOverviewViewController = _R.nib._PartnersOverviewViewController()
    /// Nib `PaymentHeaderView`.
    static let paymentHeaderView = _R.nib._PaymentHeaderView()
    /// Nib `PaymentReminderViewController`.
    static let paymentReminderViewController = _R.nib._PaymentReminderViewController()
    /// Nib `PaymentTableViewCell`.
    static let paymentTableViewCell = _R.nib._PaymentTableViewCell()
    /// Nib `PermissionsCell`.
    static let permissionsCell = _R.nib._PermissionsCell()
    /// Nib `PopUpViewController`.
    static let popUpViewController = _R.nib._PopUpViewController()
    /// Nib `PrepareContentHeaderTableViewCell`.
    static let prepareContentHeaderTableViewCell = _R.nib._PrepareContentHeaderTableViewCell()
    /// Nib `PrepareContentMainHeaderTableViewCell`.
    static let prepareContentMainHeaderTableViewCell = _R.nib._PrepareContentMainHeaderTableViewCell()
    /// Nib `PrepareContentSubHeaderTableViewCell`.
    static let prepareContentSubHeaderTableViewCell = _R.nib._PrepareContentSubHeaderTableViewCell()
    /// Nib `PrepareContentTopTabBarView`.
    static let prepareContentTopTabBarView = _R.nib._PrepareContentTopTabBarView()
    /// Nib `PrepareEventTableViewCell`.
    static let prepareEventTableViewCell = _R.nib._PrepareEventTableViewCell()
    /// Nib `PrepareEventsUpcomingTripTableViewCell`.
    static let prepareEventsUpcomingTripTableViewCell = _R.nib._PrepareEventsUpcomingTripTableViewCell()
    /// Nib `PrepareEventsViewController`.
    static let prepareEventsViewController = _R.nib._PrepareEventsViewController()
    /// Nib `PrepareNotesHeaderView`.
    static let prepareNotesHeaderView = _R.nib._PrepareNotesHeaderView()
    /// Nib `PrepareNotesTableViewCell`.
    static let prepareNotesTableViewCell = _R.nib._PrepareNotesTableViewCell()
    /// Nib `PrepareResultsContentTableViewCell`.
    static let prepareResultsContentTableViewCell = _R.nib._PrepareResultsContentTableViewCell()
    /// Nib `PrepareResultsInfoView`.
    static let prepareResultsInfoView = _R.nib._PrepareResultsInfoView()
    /// Nib `PrepareSectionHeaderView`.
    static let prepareSectionHeaderView = _R.nib._PrepareSectionHeaderView()
    /// Nib `ProfileSettingsViewController`.
    static let profileSettingsViewController = _R.nib._ProfileSettingsViewController()
    /// Nib `QuestionCell`.
    static let questionCell = _R.nib._QuestionCell()
    /// Nib `QuestionTableViewCell`.
    static let questionTableViewCell = _R.nib._QuestionTableViewCell()
    /// Nib `ReactionsTableViewCell`.
    static let reactionsTableViewCell = _R.nib._ReactionsTableViewCell()
    /// Nib `RelatedStrategyTableViewCell`.
    static let relatedStrategyTableViewCell = _R.nib._RelatedStrategyTableViewCell()
    /// Nib `ReminderTableViewCell`.
    static let reminderTableViewCell = _R.nib._ReminderTableViewCell()
    /// Nib `RequestDeviceSensorCollectionViewCell`.
    static let requestDeviceSensorCollectionViewCell = _R.nib._RequestDeviceSensorCollectionViewCell()
    /// Nib `ScreenHelpViewController`.
    static let screenHelpViewController = _R.nib._ScreenHelpViewController()
    /// Nib `SearchTableViewCell`.
    static let searchTableViewCell = _R.nib._SearchTableViewCell()
    /// Nib `SearchViewController`.
    static let searchViewController = _R.nib._SearchViewController()
    /// Nib `SensorCollectionViewCell`.
    static let sensorCollectionViewCell = _R.nib._SensorCollectionViewCell()
    /// Nib `SensorViewController`.
    static let sensorViewController = _R.nib._SensorViewController()
    /// Nib `SettingsBubblesViewController`.
    static let settingsBubblesViewController = _R.nib._SettingsBubblesViewController()
    /// Nib `SettingsButtonTableViewCell`.
    static let settingsButtonTableViewCell = _R.nib._SettingsButtonTableViewCell()
    /// Nib `SettingsCell`.
    static let settingsCell = _R.nib._SettingsCell()
    /// Nib `SettingsControlTableViewCell`.
    static let settingsControlTableViewCell = _R.nib._SettingsControlTableViewCell()
    /// Nib `SettingsLabelTableViewCell`.
    static let settingsLabelTableViewCell = _R.nib._SettingsLabelTableViewCell()
    /// Nib `SettingsMenuHeader`.
    static let settingsMenuHeader = _R.nib._SettingsMenuHeader()
    /// Nib `SettingsMenuViewController`.
    static let settingsMenuViewController = _R.nib._SettingsMenuViewController()
    /// Nib `SettingsTextFieldTableViewCell`.
    static let settingsTextFieldTableViewCell = _R.nib._SettingsTextFieldTableViewCell()
    /// Nib `SettingsViewController`.
    static let settingsViewController = _R.nib._SettingsViewController()
    /// Nib `ShareViewController`.
    static let shareViewController = _R.nib._ShareViewController()
    /// Nib `ShifterResultViewController`.
    static let shifterResultViewController = _R.nib._ShifterResultViewController()
    /// Nib `SigningCountryTableViewCell`.
    static let signingCountryTableViewCell = _R.nib._SigningCountryTableViewCell()
    /// Nib `SigningCountryViewController`.
    static let signingCountryViewController = _R.nib._SigningCountryViewController()
    /// Nib `SigningCreatePasswordViewController`.
    static let signingCreatePasswordViewController = _R.nib._SigningCreatePasswordViewController()
    /// Nib `SigningDigitViewController`.
    static let signingDigitViewController = _R.nib._SigningDigitViewController()
    /// Nib `SigningEmailViewController`.
    static let signingEmailViewController = _R.nib._SigningEmailViewController()
    /// Nib `SigningInfoCollectionViewCell`.
    static let signingInfoCollectionViewCell = _R.nib._SigningInfoCollectionViewCell()
    /// Nib `SigningInfoViewController`.
    static let signingInfoViewController = _R.nib._SigningInfoViewController()
    /// Nib `SigningLoginViewController`.
    static let signingLoginViewController = _R.nib._SigningLoginViewController()
    /// Nib `SigningProfileDetailViewController`.
    static let signingProfileDetailViewController = _R.nib._SigningProfileDetailViewController()
    /// Nib `SingleSelectionTableViewCell`.
    static let singleSelectionTableViewCell = _R.nib._SingleSelectionTableViewCell()
    /// Nib `SiriShortcutsCell`.
    static let siriShortcutsCell = _R.nib._SiriShortcutsCell()
    /// Nib `SiriShortcutsViewController`.
    static let siriShortcutsViewController = _R.nib._SiriShortcutsViewController()
    /// Nib `SolveDayPlanTableViewCell`.
    static let solveDayPlanTableViewCell = _R.nib._SolveDayPlanTableViewCell()
    /// Nib `SolveFollowUpTableViewCell`.
    static let solveFollowUpTableViewCell = _R.nib._SolveFollowUpTableViewCell()
    /// Nib `SolveHeaderTableViewCell`.
    static let solveHeaderTableViewCell = _R.nib._SolveHeaderTableViewCell()
    /// Nib `SolveReminderCell`.
    static let solveReminderCell = _R.nib._SolveReminderCell()
    /// Nib `SolveResultsViewController`.
    static let solveResultsViewController = _R.nib._SolveResultsViewController()
    /// Nib `SolveStrategyTableViewCell`.
    static let solveStrategyTableViewCell = _R.nib._SolveStrategyTableViewCell()
    /// Nib `SolveTableViewCell`.
    static let solveTableViewCell = _R.nib._SolveTableViewCell()
    /// Nib `SolveTriggerTableViewCell`.
    static let solveTriggerTableViewCell = _R.nib._SolveTriggerTableViewCell()
    /// Nib `SprintChallengeCell`.
    static let sprintChallengeCell = _R.nib._SprintChallengeCell()
    /// Nib `SprintChallengeTableViewCell`.
    static let sprintChallengeTableViewCell = _R.nib._SprintChallengeTableViewCell()
    /// Nib `StrategyCategoryCollectionViewCell`.
    static let strategyCategoryCollectionViewCell = _R.nib._StrategyCategoryCollectionViewCell()
    /// Nib `StrategyContentTableViewCell`.
    static let strategyContentTableViewCell = _R.nib._StrategyContentTableViewCell()
    /// Nib `StrategyFoundationCollectionViewCell`.
    static let strategyFoundationCollectionViewCell = _R.nib._StrategyFoundationCollectionViewCell()
    /// Nib `StrategyListHeaderView`.
    static let strategyListHeaderView = _R.nib._StrategyListHeaderView()
    /// Nib `StrategyTableViewCell`.
    static let strategyTableViewCell = _R.nib._StrategyTableViewCell()
    /// Nib `SubsriptionReminderViewController`.
    static let subsriptionReminderViewController = _R.nib._SubsriptionReminderViewController()
    /// Nib `SuggestionSearchTableViewCell`.
    static let suggestionSearchTableViewCell = _R.nib._SuggestionSearchTableViewCell()
    /// Nib `SuggestionsHeaderView`.
    static let suggestionsHeaderView = _R.nib._SuggestionsHeaderView()
    /// Nib `SupportFAQTableViewCell`.
    static let supportFAQTableViewCell = _R.nib._SupportFAQTableViewCell()
    /// Nib `SupportFAQViewController`.
    static let supportFAQViewController = _R.nib._SupportFAQViewController()
    /// Nib `TBVDataGraphAnswersTableViewCell`.
    static let tbvDataGraphAnswersTableViewCell = _R.nib._TBVDataGraphAnswersTableViewCell()
    /// Nib `TBVDataGraphBarNextDurationViewCell`.
    static let tbvDataGraphBarNextDurationViewCell = _R.nib._TBVDataGraphBarNextDurationViewCell()
    /// Nib `TBVDataGraphBarViewCell`.
    static let tbvDataGraphBarViewCell = _R.nib._TBVDataGraphBarViewCell()
    /// Nib `TBVDataGraphHeaderView`.
    static let tbvDataGraphHeaderView = _R.nib._TBVDataGraphHeaderView()
    /// Nib `TBVDataGraphSubHeadingTableViewCell`.
    static let tbvDataGraphSubHeadingTableViewCell = _R.nib._TBVDataGraphSubHeadingTableViewCell()
    /// Nib `TBVDataGraphTableViewCell`.
    static let tbvDataGraphTableViewCell = _R.nib._TBVDataGraphTableViewCell()
    /// Nib `TBVGraphBarRangeCell`.
    static let tbvGraphBarRangeCell = _R.nib._TBVGraphBarRangeCell()
    /// Nib `TextTableViewCell`.
    static let textTableViewCell = _R.nib._TextTableViewCell()
    /// Nib `ThoughtsCell`.
    static let thoughtsCell = _R.nib._ThoughtsCell()
    /// Nib `ThreeLinesAndButton`.
    static let threeLinesAndButton = _R.nib._ThreeLinesAndButton()
    /// Nib `ThreeLinesAndImage`.
    static let threeLinesAndImage = _R.nib._ThreeLinesAndImage()
    /// Nib `ThreeLines`.
    static let threeLines = _R.nib._ThreeLines()
    /// Nib `TitleSubtitleTableViewCell`.
    static let titleSubtitleTableViewCell = _R.nib._TitleSubtitleTableViewCell()
    /// Nib `TitleTableHeaderView`.
    static let titleTableHeaderView = _R.nib._TitleTableHeaderView()
    /// Nib `TitleTableViewCell`.
    static let titleTableViewCell = _R.nib._TitleTableViewCell()
    /// Nib `ToolsCollectionsAudioTableViewCell`.
    static let toolsCollectionsAudioTableViewCell = _R.nib._ToolsCollectionsAudioTableViewCell()
    /// Nib `ToolsCollectionsGroupTableViewCell`.
    static let toolsCollectionsGroupTableViewCell = _R.nib._ToolsCollectionsGroupTableViewCell()
    /// Nib `ToolsCollectionsVideoTableViewCell`.
    static let toolsCollectionsVideoTableViewCell = _R.nib._ToolsCollectionsVideoTableViewCell()
    /// Nib `ToolsTableHeaderView`.
    static let toolsTableHeaderView = _R.nib._ToolsTableHeaderView()
    /// Nib `ToolsTableViewCell`.
    static let toolsTableViewCell = _R.nib._ToolsTableViewCell()
    /// Nib `TriggerTableViewCell`.
    static let triggerTableViewCell = _R.nib._TriggerTableViewCell()
    /// Nib `TutorialCollectionViewCell`.
    static let tutorialCollectionViewCell = _R.nib._TutorialCollectionViewCell()
    /// Nib `TutorialViewController`.
    static let tutorialViewController = _R.nib._TutorialViewController()
    /// Nib `TwoLinesAndButton`.
    static let twoLinesAndButton = _R.nib._TwoLinesAndButton()
    /// Nib `TwoLinesAndImage`.
    static let twoLinesAndImage = _R.nib._TwoLinesAndImage()
    /// Nib `UserInputTableViewCell`.
    static let userInputTableViewCell = _R.nib._UserInputTableViewCell()
    /// Nib `WeeklyChoicesCell`.
    static let weeklyChoicesCell = _R.nib._WeeklyChoicesCell()
    /// Nib `WhatsHotArticleHeaderView`.
    static let whatsHotArticleHeaderView = _R.nib._WhatsHotArticleHeaderView()
    /// Nib `WhatsHotCollectionViewCell`.
    static let whatsHotCollectionViewCell = _R.nib._WhatsHotCollectionViewCell()
    /// Nib `WhatsHotComponentView`.
    static let whatsHotComponentView = _R.nib._WhatsHotComponentView()
    /// Nib `WhatsHotLatestCell`.
    static let whatsHotLatestCell = _R.nib._WhatsHotLatestCell()
    
    /// `UINib(name: "AboutMeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.aboutMeCell) instead")
    static func aboutMeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutMeCell)
    }
    
    /// `UINib(name: "AbstractTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.abstractTableViewCell) instead")
    static func abstractTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.abstractTableViewCell)
    }
    
    /// `UINib(name: "AppSettingsFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.appSettingsFooterView) instead")
    static func appSettingsFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appSettingsFooterView)
    }
    
    /// `UINib(name: "ArticleBulletPointTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleBulletPointTableViewCell) instead")
    static func articleBulletPointTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleBulletPointTableViewCell)
    }
    
    /// `UINib(name: "ArticleCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleCollectionCell) instead")
    static func articleCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleCollectionCell)
    }
    
    /// `UINib(name: "ArticleHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleHeaderView) instead")
    static func articleHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleHeaderView)
    }
    
    /// `UINib(name: "ArticleImageHeaderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleImageHeaderTableViewCell) instead")
    static func articleImageHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleImageHeaderTableViewCell)
    }
    
    /// `UINib(name: "ArticleItemHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleItemHeaderView) instead")
    static func articleItemHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleItemHeaderView)
    }
    
    /// `UINib(name: "ArticleItemViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleItemViewController) instead")
    static func articleItemViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleItemViewController)
    }
    
    /// `UINib(name: "ArticleNextUpTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleNextUpTableViewCell) instead")
    static func articleNextUpTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleNextUpTableViewCell)
    }
    
    /// `UINib(name: "ArticleRelatedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleRelatedCell) instead")
    static func articleRelatedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleRelatedCell)
    }
    
    /// `UINib(name: "ArticleRelatedTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleRelatedTableViewCell) instead")
    static func articleRelatedTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleRelatedTableViewCell)
    }
    
    /// `UINib(name: "ArticleRelatedWhatsHotTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleRelatedWhatsHotTableViewCell) instead")
    static func articleRelatedWhatsHotTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleRelatedWhatsHotTableViewCell)
    }
    
    /// `UINib(name: "ArticleTextHeaderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.articleTextHeaderTableViewCell) instead")
    static func articleTextHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleTextHeaderTableViewCell)
    }
    
    /// `UINib(name: "AudioButton", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.audioButton) instead")
    static func audioButton(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.audioButton)
    }
    
    /// `UINib(name: "AudioPlayerBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.audioPlayerBar) instead")
    static func audioPlayerBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.audioPlayerBar)
    }
    
    /// `UINib(name: "BeSpokeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.beSpokeCell) instead")
    static func beSpokeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.beSpokeCell)
    }
    
    /// `UINib(name: "CalendarEventsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.calendarEventsTableViewCell) instead")
    static func calendarEventsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calendarEventsTableViewCell)
    }
    
    /// `UINib(name: "CauseTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.causeTableViewCell) instead")
    static func causeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.causeTableViewCell)
    }
    
    /// `UINib(name: "ChartCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chartCell) instead")
    static func chartCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chartCell)
    }
    
    /// `UINib(name: "CoachTableHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coachTableHeaderView) instead")
    static func coachTableHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coachTableHeaderView)
    }
    
    /// `UINib(name: "CoachTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coachTableViewCell) instead")
    static func coachTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coachTableViewCell)
    }
    
    /// `UINib(name: "CollapsableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.collapsableCell) instead")
    static func collapsableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.collapsableCell)
    }
    
    /// `UINib(name: "CollapsableContentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.collapsableContentCell) instead")
    static func collapsableContentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.collapsableContentCell)
    }
    
    /// `UINib(name: "ComponentCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.componentCollectionViewCell) instead")
    static func componentCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.componentCollectionViewCell)
    }
    
    /// `UINib(name: "ComponentHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.componentHeaderView) instead")
    static func componentHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.componentHeaderView)
    }
    
    /// `UINib(name: "ConfirmationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.confirmationViewController) instead")
    static func confirmationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.confirmationViewController)
    }
    
    /// `UINib(name: "ContentItemTextTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contentItemTextTableViewCell) instead")
    static func contentItemTextTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contentItemTextTableViewCell)
    }
    
    /// `UINib(name: "DailyBriefForwardEdge", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dailyBriefForwardEdge) instead")
    static func dailyBriefForwardEdge(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dailyBriefForwardEdge)
    }
    
    /// `UINib(name: "DailyCheckInInsights2TBV", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dailyCheckInInsights2TBV) instead")
    static func dailyCheckInInsights2TBV(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dailyCheckInInsights2TBV)
    }
    
    /// `UINib(name: "DailyCheckinInsightsPeakPerformanceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dailyCheckinInsightsPeakPerformanceCell) instead")
    static func dailyCheckinInsightsPeakPerformanceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dailyCheckinInsightsPeakPerformanceCell)
    }
    
    /// `UINib(name: "DailyCheckinInsightsSHPICell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dailyCheckinInsightsSHPICell) instead")
    static func dailyCheckinInsightsSHPICell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dailyCheckinInsightsSHPICell)
    }
    
    /// `UINib(name: "DailyCheckinInsightsTBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dailyCheckinInsightsTBVCell) instead")
    static func dailyCheckinInsightsTBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dailyCheckinInsightsTBVCell)
    }
    
    /// `UINib(name: "DecisionTreeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.decisionTreeViewController) instead")
    static func decisionTreeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.decisionTreeViewController)
    }
    
    /// `UINib(name: "DepartureInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.departureInfoCell) instead")
    static func departureInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.departureInfoCell)
    }
    
    /// `UINib(name: "EditHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editHeaderView) instead")
    static func editHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editHeaderView)
    }
    
    /// `UINib(name: "ExploreCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.exploreCell) instead")
    static func exploreCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.exploreCell)
    }
    
    /// `UINib(name: "FatigueTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fatigueTableViewCell) instead")
    static func fatigueTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fatigueTableViewCell)
    }
    
    /// `UINib(name: "FeastCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.feastCell) instead")
    static func feastCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.feastCell)
    }
    
    /// `UINib(name: "FiveLines", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fiveLines) instead")
    static func fiveLines(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fiveLines)
    }
    
    /// `UINib(name: "FiveLinesWithTopBroad", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fiveLinesWithTopBroad) instead")
    static func fiveLinesWithTopBroad(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fiveLinesWithTopBroad)
    }
    
    /// `UINib(name: "FormView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.formView) instead")
    static func formView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.formView)
    }
    
    /// `UINib(name: "FoundationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foundationTableViewCell) instead")
    static func foundationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foundationTableViewCell)
    }
    
    /// `UINib(name: "FromMyCoachCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fromMyCoachCell) instead")
    static func fromMyCoachCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fromMyCoachCell)
    }
    
    /// `UINib(name: "FromMyCoachHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fromMyCoachHeaderView) instead")
    static func fromMyCoachHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fromMyCoachHeaderView)
    }
    
    /// `UINib(name: "FromMyCoachMessageView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fromMyCoachMessageView) instead")
    static func fromMyCoachMessageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fromMyCoachMessageView)
    }
    
    /// `UINib(name: "FromTignumCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fromTignumCell) instead")
    static func fromTignumCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fromTignumCell)
    }
    
    /// `UINib(name: "GoodToKnowCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goodToKnowCell) instead")
    static func goodToKnowCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodToKnowCell)
    }
    
    /// `UINib(name: "GuideDailyPrepTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideDailyPrepTableViewCell) instead")
    static func guideDailyPrepTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideDailyPrepTableViewCell)
    }
    
    /// `UINib(name: "GuideGreetingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideGreetingView) instead")
    static func guideGreetingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideGreetingView)
    }
    
    /// `UINib(name: "GuidePreparationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guidePreparationTableViewCell) instead")
    static func guidePreparationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guidePreparationTableViewCell)
    }
    
    /// `UINib(name: "GuideTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideTableViewCell) instead")
    static func guideTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideTableViewCell)
    }
    
    /// `UINib(name: "GuideToBeVisionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideToBeVisionTableViewCell) instead")
    static func guideToBeVisionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideToBeVisionTableViewCell)
    }
    
    /// `UINib(name: "GuideWhatsHotTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideWhatsHotTableViewCell) instead")
    static func guideWhatsHotTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideWhatsHotTableViewCell)
    }
    
    /// `UINib(name: "IPadAdviceView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.iPadAdviceView) instead")
    static func iPadAdviceView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iPadAdviceView)
    }
    
    /// `UINib(name: "ImageSubtitleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageSubtitleTableViewCell) instead")
    static func imageSubtitleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageSubtitleTableViewCell)
    }
    
    /// `UINib(name: "ImpactDataTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.impactDataTableViewCell) instead")
    static func impactDataTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.impactDataTableViewCell)
    }
    
    /// `UINib(name: "ImpactReadinessCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.impactReadinessCell) instead")
    static func impactReadinessCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.impactReadinessCell)
    }
    
    /// `UINib(name: "InfoAlertView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.infoAlertView) instead")
    static func infoAlertView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoAlertView)
    }
    
    /// `UINib(name: "InfoHelperView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.infoHelperView) instead")
    static func infoHelperView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoHelperView)
    }
    
    /// `UINib(name: "LeaderWisdomTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.leaderWisdomTableViewCell) instead")
    static func leaderWisdomTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leaderWisdomTableViewCell)
    }
    
    /// `UINib(name: "LearnContentItemBulletCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.learnContentItemBulletCell) instead")
    static func learnContentItemBulletCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.learnContentItemBulletCell)
    }
    
    /// `UINib(name: "LearnContentItemHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.learnContentItemHeaderView) instead")
    static func learnContentItemHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.learnContentItemHeaderView)
    }
    
    /// `UINib(name: "LearnContentItemRecommendedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.learnContentItemRecommendedCell) instead")
    static func learnContentItemRecommendedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.learnContentItemRecommendedCell)
    }
    
    /// `UINib(name: "LearnPDFCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.learnPDFCell) instead")
    static func learnPDFCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.learnPDFCell)
    }
    
    /// `UINib(name: "LearnReadMoreCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.learnReadMoreCell) instead")
    static func learnReadMoreCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.learnReadMoreCell)
    }
    
    /// `UINib(name: "LearnStrategyAudioPlayerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.learnStrategyAudioPlayerView) instead")
    static func learnStrategyAudioPlayerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.learnStrategyAudioPlayerView)
    }
    
    /// `UINib(name: "LearnStrategyPlaylistAudioCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.learnStrategyPlaylistAudioCell) instead")
    static func learnStrategyPlaylistAudioCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.learnStrategyPlaylistAudioCell)
    }
    
    /// `UINib(name: "Level5Cell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.level5Cell) instead")
    static func level5Cell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.level5Cell)
    }
    
    /// `UINib(name: "LibraryCategoryCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.libraryCategoryCollectionViewCell) instead")
    static func libraryCategoryCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.libraryCategoryCollectionViewCell)
    }
    
    /// `UINib(name: "LibraryLatestPostCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.libraryLatestPostCollectionViewCell) instead")
    static func libraryLatestPostCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.libraryLatestPostCollectionViewCell)
    }
    
    /// `UINib(name: "LibraryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.libraryTableViewCell) instead")
    static func libraryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.libraryTableViewCell)
    }
    
    /// `UINib(name: "Loader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loader) instead")
    static func loader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loader)
    }
    
    /// `UINib(name: "MarkAsReadTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.markAsReadTableViewCell) instead")
    static func markAsReadTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.markAsReadTableViewCell)
    }
    
    /// `UINib(name: "MeAtMyBestCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.meAtMyBestCell) instead")
    static func meAtMyBestCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.meAtMyBestCell)
    }
    
    /// `UINib(name: "MeAtMyBestEmptyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.meAtMyBestEmptyCell) instead")
    static func meAtMyBestEmptyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.meAtMyBestEmptyCell)
    }
    
    /// `UINib(name: "MediaPlayerOverlay", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mediaPlayerOverlay) instead")
    static func mediaPlayerOverlay(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mediaPlayerOverlay)
    }
    
    /// `UINib(name: "MindsetShifterHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mindsetShifterHeaderCell) instead")
    static func mindsetShifterHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mindsetShifterHeaderCell)
    }
    
    /// `UINib(name: "MindsetVisionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mindsetVisionTableViewCell) instead")
    static func mindsetVisionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mindsetVisionTableViewCell)
    }
    
    /// `UINib(name: "MultipleSelectionCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.multipleSelectionCollectionViewCell) instead")
    static func multipleSelectionCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.multipleSelectionCollectionViewCell)
    }
    
    /// `UINib(name: "MultipleSelectionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.multipleSelectionTableViewCell) instead")
    static func multipleSelectionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.multipleSelectionTableViewCell)
    }
    
    /// `UINib(name: "MyPeakPerformanceRowCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPeakPerformanceRowCell) instead")
    static func myPeakPerformanceRowCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPeakPerformanceRowCell)
    }
    
    /// `UINib(name: "MyPeakPerformanceSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPeakPerformanceSectionCell) instead")
    static func myPeakPerformanceSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPeakPerformanceSectionCell)
    }
    
    /// `UINib(name: "MyPeakPerformanceTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPeakPerformanceTableCell) instead")
    static func myPeakPerformanceTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPeakPerformanceTableCell)
    }
    
    /// `UINib(name: "MyPeakPerformanceTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPeakPerformanceTitleCell) instead")
    static func myPeakPerformanceTitleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPeakPerformanceTitleCell)
    }
    
    /// `UINib(name: "MyPrepTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPrepTableViewCell) instead")
    static func myPrepTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPrepTableViewCell)
    }
    
    /// `UINib(name: "MyPrepsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myPrepsTableViewCell) instead")
    static func myPrepsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPrepsTableViewCell)
    }
    
    /// `UINib(name: "MyQotMainCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myQotMainCollectionViewCell) instead")
    static func myQotMainCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myQotMainCollectionViewCell)
    }
    
    /// `UINib(name: "MyQotProfileHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myQotProfileHeaderView) instead")
    static func myQotProfileHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myQotProfileHeaderView)
    }
    
    /// `UINib(name: "MyQotProfileOptionsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myQotProfileOptionsTableViewCell) instead")
    static func myQotProfileOptionsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myQotProfileOptionsTableViewCell)
    }
    
    /// `UINib(name: "MyQotSyncedCalendarCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myQotSyncedCalendarCell) instead")
    static func myQotSyncedCalendarCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myQotSyncedCalendarCell)
    }
    
    /// `UINib(name: "MySprintDetailsHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySprintDetailsHeaderView) instead")
    static func mySprintDetailsHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySprintDetailsHeaderView)
    }
    
    /// `UINib(name: "MySprintsListHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySprintsListHeaderView) instead")
    static func mySprintsListHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySprintsListHeaderView)
    }
    
    /// `UINib(name: "MyToBeVisionViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myToBeVisionViewController) instead")
    static func myToBeVisionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myToBeVisionViewController)
    }
    
    /// `UINib(name: "MyUniverseContentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myUniverseContentView) instead")
    static func myUniverseContentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myUniverseContentView)
    }
    
    /// `UINib(name: "MyUniverseViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myUniverseViewController) instead")
    static func myUniverseViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myUniverseViewController)
    }
    
    /// `UINib(name: "NegativeToPositiveTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.negativeToPositiveTableViewCell) instead")
    static func negativeToPositiveTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.negativeToPositiveTableViewCell)
    }
    
    /// `UINib(name: "PartnerEditViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.partnerEditViewController) instead")
    static func partnerEditViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.partnerEditViewController)
    }
    
    /// `UINib(name: "PartnersOverviewCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.partnersOverviewCollectionViewCell) instead")
    static func partnersOverviewCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.partnersOverviewCollectionViewCell)
    }
    
    /// `UINib(name: "PartnersOverviewViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.partnersOverviewViewController) instead")
    static func partnersOverviewViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.partnersOverviewViewController)
    }
    
    /// `UINib(name: "PaymentHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentHeaderView) instead")
    static func paymentHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentHeaderView)
    }
    
    /// `UINib(name: "PaymentReminderViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentReminderViewController) instead")
    static func paymentReminderViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentReminderViewController)
    }
    
    /// `UINib(name: "PaymentTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentTableViewCell) instead")
    static func paymentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentTableViewCell)
    }
    
    /// `UINib(name: "PermissionsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.permissionsCell) instead")
    static func permissionsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.permissionsCell)
    }
    
    /// `UINib(name: "PopUpViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popUpViewController) instead")
    static func popUpViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popUpViewController)
    }
    
    /// `UINib(name: "PrepareContentHeaderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareContentHeaderTableViewCell) instead")
    static func prepareContentHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareContentHeaderTableViewCell)
    }
    
    /// `UINib(name: "PrepareContentMainHeaderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareContentMainHeaderTableViewCell) instead")
    static func prepareContentMainHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareContentMainHeaderTableViewCell)
    }
    
    /// `UINib(name: "PrepareContentSubHeaderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareContentSubHeaderTableViewCell) instead")
    static func prepareContentSubHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareContentSubHeaderTableViewCell)
    }
    
    /// `UINib(name: "PrepareContentTopTabBarView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareContentTopTabBarView) instead")
    static func prepareContentTopTabBarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareContentTopTabBarView)
    }
    
    /// `UINib(name: "PrepareEventTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareEventTableViewCell) instead")
    static func prepareEventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareEventTableViewCell)
    }
    
    /// `UINib(name: "PrepareEventsUpcomingTripTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareEventsUpcomingTripTableViewCell) instead")
    static func prepareEventsUpcomingTripTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareEventsUpcomingTripTableViewCell)
    }
    
    /// `UINib(name: "PrepareEventsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareEventsViewController) instead")
    static func prepareEventsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareEventsViewController)
    }
    
    /// `UINib(name: "PrepareNotesHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareNotesHeaderView) instead")
    static func prepareNotesHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareNotesHeaderView)
    }
    
    /// `UINib(name: "PrepareNotesTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareNotesTableViewCell) instead")
    static func prepareNotesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareNotesTableViewCell)
    }
    
    /// `UINib(name: "PrepareResultsContentTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareResultsContentTableViewCell) instead")
    static func prepareResultsContentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareResultsContentTableViewCell)
    }
    
    /// `UINib(name: "PrepareResultsInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareResultsInfoView) instead")
    static func prepareResultsInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareResultsInfoView)
    }
    
    /// `UINib(name: "PrepareSectionHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prepareSectionHeaderView) instead")
    static func prepareSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prepareSectionHeaderView)
    }
    
    /// `UINib(name: "ProfileSettingsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileSettingsViewController) instead")
    static func profileSettingsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileSettingsViewController)
    }
    
    /// `UINib(name: "QuestionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionCell) instead")
    static func questionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionCell)
    }
    
    /// `UINib(name: "QuestionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionTableViewCell) instead")
    static func questionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionTableViewCell)
    }
    
    /// `UINib(name: "ReactionsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reactionsTableViewCell) instead")
    static func reactionsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reactionsTableViewCell)
    }
    
    /// `UINib(name: "RelatedStrategyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.relatedStrategyTableViewCell) instead")
    static func relatedStrategyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.relatedStrategyTableViewCell)
    }
    
    /// `UINib(name: "ReminderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reminderTableViewCell) instead")
    static func reminderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reminderTableViewCell)
    }
    
    /// `UINib(name: "RequestDeviceSensorCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.requestDeviceSensorCollectionViewCell) instead")
    static func requestDeviceSensorCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.requestDeviceSensorCollectionViewCell)
    }
    
    /// `UINib(name: "ScreenHelpViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.screenHelpViewController) instead")
    static func screenHelpViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.screenHelpViewController)
    }
    
    /// `UINib(name: "SearchTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchTableViewCell) instead")
    static func searchTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchTableViewCell)
    }
    
    /// `UINib(name: "SearchViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchViewController) instead")
    static func searchViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchViewController)
    }
    
    /// `UINib(name: "SensorCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sensorCollectionViewCell) instead")
    static func sensorCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sensorCollectionViewCell)
    }
    
    /// `UINib(name: "SensorViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sensorViewController) instead")
    static func sensorViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sensorViewController)
    }
    
    /// `UINib(name: "SettingsBubblesViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsBubblesViewController) instead")
    static func settingsBubblesViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsBubblesViewController)
    }
    
    /// `UINib(name: "SettingsButtonTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsButtonTableViewCell) instead")
    static func settingsButtonTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsButtonTableViewCell)
    }
    
    /// `UINib(name: "SettingsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsCell) instead")
    static func settingsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsCell)
    }
    
    /// `UINib(name: "SettingsControlTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsControlTableViewCell) instead")
    static func settingsControlTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsControlTableViewCell)
    }
    
    /// `UINib(name: "SettingsLabelTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsLabelTableViewCell) instead")
    static func settingsLabelTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsLabelTableViewCell)
    }
    
    /// `UINib(name: "SettingsMenuHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsMenuHeader) instead")
    static func settingsMenuHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsMenuHeader)
    }
    
    /// `UINib(name: "SettingsMenuViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsMenuViewController) instead")
    static func settingsMenuViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsMenuViewController)
    }
    
    /// `UINib(name: "SettingsTextFieldTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsTextFieldTableViewCell) instead")
    static func settingsTextFieldTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsTextFieldTableViewCell)
    }
    
    /// `UINib(name: "SettingsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsViewController) instead")
    static func settingsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsViewController)
    }
    
    /// `UINib(name: "ShareViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shareViewController) instead")
    static func shareViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shareViewController)
    }
    
    /// `UINib(name: "ShifterResultViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shifterResultViewController) instead")
    static func shifterResultViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shifterResultViewController)
    }
    
    /// `UINib(name: "SigningCountryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signingCountryTableViewCell) instead")
    static func signingCountryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signingCountryTableViewCell)
    }
    
    /// `UINib(name: "SigningCountryViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signingCountryViewController) instead")
    static func signingCountryViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signingCountryViewController)
    }
    
    /// `UINib(name: "SigningCreatePasswordViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signingCreatePasswordViewController) instead")
    static func signingCreatePasswordViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signingCreatePasswordViewController)
    }
    
    /// `UINib(name: "SigningDigitViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signingDigitViewController) instead")
    static func signingDigitViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signingDigitViewController)
    }
    
    /// `UINib(name: "SigningEmailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signingEmailViewController) instead")
    static func signingEmailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signingEmailViewController)
    }
    
    /// `UINib(name: "SigningInfoCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signingInfoCollectionViewCell) instead")
    static func signingInfoCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signingInfoCollectionViewCell)
    }
    
    /// `UINib(name: "SigningInfoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signingInfoViewController) instead")
    static func signingInfoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signingInfoViewController)
    }
    
    /// `UINib(name: "SigningLoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signingLoginViewController) instead")
    static func signingLoginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signingLoginViewController)
    }
    
    /// `UINib(name: "SigningProfileDetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signingProfileDetailViewController) instead")
    static func signingProfileDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signingProfileDetailViewController)
    }
    
    /// `UINib(name: "SingleSelectionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.singleSelectionTableViewCell) instead")
    static func singleSelectionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.singleSelectionTableViewCell)
    }
    
    /// `UINib(name: "SiriShortcutsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.siriShortcutsCell) instead")
    static func siriShortcutsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.siriShortcutsCell)
    }
    
    /// `UINib(name: "SiriShortcutsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.siriShortcutsViewController) instead")
    static func siriShortcutsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.siriShortcutsViewController)
    }
    
    /// `UINib(name: "SolveDayPlanTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.solveDayPlanTableViewCell) instead")
    static func solveDayPlanTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.solveDayPlanTableViewCell)
    }
    
    /// `UINib(name: "SolveFollowUpTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.solveFollowUpTableViewCell) instead")
    static func solveFollowUpTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.solveFollowUpTableViewCell)
    }
    
    /// `UINib(name: "SolveHeaderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.solveHeaderTableViewCell) instead")
    static func solveHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.solveHeaderTableViewCell)
    }
    
    /// `UINib(name: "SolveReminderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.solveReminderCell) instead")
    static func solveReminderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.solveReminderCell)
    }
    
    /// `UINib(name: "SolveResultsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.solveResultsViewController) instead")
    static func solveResultsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.solveResultsViewController)
    }
    
    /// `UINib(name: "SolveStrategyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.solveStrategyTableViewCell) instead")
    static func solveStrategyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.solveStrategyTableViewCell)
    }
    
    /// `UINib(name: "SolveTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.solveTableViewCell) instead")
    static func solveTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.solveTableViewCell)
    }
    
    /// `UINib(name: "SolveTriggerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.solveTriggerTableViewCell) instead")
    static func solveTriggerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.solveTriggerTableViewCell)
    }
    
    /// `UINib(name: "SprintChallengeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sprintChallengeCell) instead")
    static func sprintChallengeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sprintChallengeCell)
    }
    
    /// `UINib(name: "SprintChallengeTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sprintChallengeTableViewCell) instead")
    static func sprintChallengeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sprintChallengeTableViewCell)
    }
    
    /// `UINib(name: "StrategyCategoryCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.strategyCategoryCollectionViewCell) instead")
    static func strategyCategoryCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.strategyCategoryCollectionViewCell)
    }
    
    /// `UINib(name: "StrategyContentTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.strategyContentTableViewCell) instead")
    static func strategyContentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.strategyContentTableViewCell)
    }
    
    /// `UINib(name: "StrategyFoundationCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.strategyFoundationCollectionViewCell) instead")
    static func strategyFoundationCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.strategyFoundationCollectionViewCell)
    }
    
    /// `UINib(name: "StrategyListHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.strategyListHeaderView) instead")
    static func strategyListHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.strategyListHeaderView)
    }
    
    /// `UINib(name: "StrategyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.strategyTableViewCell) instead")
    static func strategyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.strategyTableViewCell)
    }
    
    /// `UINib(name: "SubsriptionReminderViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subsriptionReminderViewController) instead")
    static func subsriptionReminderViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subsriptionReminderViewController)
    }
    
    /// `UINib(name: "SuggestionSearchTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.suggestionSearchTableViewCell) instead")
    static func suggestionSearchTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestionSearchTableViewCell)
    }
    
    /// `UINib(name: "SuggestionsHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.suggestionsHeaderView) instead")
    static func suggestionsHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestionsHeaderView)
    }
    
    /// `UINib(name: "SupportFAQTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supportFAQTableViewCell) instead")
    static func supportFAQTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supportFAQTableViewCell)
    }
    
    /// `UINib(name: "SupportFAQViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supportFAQViewController) instead")
    static func supportFAQViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supportFAQViewController)
    }
    
    /// `UINib(name: "TBVDataGraphAnswersTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tbvDataGraphAnswersTableViewCell) instead")
    static func tbvDataGraphAnswersTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tbvDataGraphAnswersTableViewCell)
    }
    
    /// `UINib(name: "TBVDataGraphBarNextDurationViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tbvDataGraphBarNextDurationViewCell) instead")
    static func tbvDataGraphBarNextDurationViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tbvDataGraphBarNextDurationViewCell)
    }
    
    /// `UINib(name: "TBVDataGraphBarViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tbvDataGraphBarViewCell) instead")
    static func tbvDataGraphBarViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tbvDataGraphBarViewCell)
    }
    
    /// `UINib(name: "TBVDataGraphHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tbvDataGraphHeaderView) instead")
    static func tbvDataGraphHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tbvDataGraphHeaderView)
    }
    
    /// `UINib(name: "TBVDataGraphSubHeadingTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tbvDataGraphSubHeadingTableViewCell) instead")
    static func tbvDataGraphSubHeadingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tbvDataGraphSubHeadingTableViewCell)
    }
    
    /// `UINib(name: "TBVDataGraphTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tbvDataGraphTableViewCell) instead")
    static func tbvDataGraphTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tbvDataGraphTableViewCell)
    }
    
    /// `UINib(name: "TBVGraphBarRangeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tbvGraphBarRangeCell) instead")
    static func tbvGraphBarRangeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tbvGraphBarRangeCell)
    }
    
    /// `UINib(name: "TextTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.textTableViewCell) instead")
    static func textTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textTableViewCell)
    }
    
    /// `UINib(name: "ThoughtsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.thoughtsCell) instead")
    static func thoughtsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.thoughtsCell)
    }
    
    /// `UINib(name: "ThreeLines", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.threeLines) instead")
    static func threeLines(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.threeLines)
    }
    
    /// `UINib(name: "ThreeLinesAndButton", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.threeLinesAndButton) instead")
    static func threeLinesAndButton(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.threeLinesAndButton)
    }
    
    /// `UINib(name: "ThreeLinesAndImage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.threeLinesAndImage) instead")
    static func threeLinesAndImage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.threeLinesAndImage)
    }
    
    /// `UINib(name: "TitleSubtitleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titleSubtitleTableViewCell) instead")
    static func titleSubtitleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleSubtitleTableViewCell)
    }
    
    /// `UINib(name: "TitleTableHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titleTableHeaderView) instead")
    static func titleTableHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleTableHeaderView)
    }
    
    /// `UINib(name: "TitleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titleTableViewCell) instead")
    static func titleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleTableViewCell)
    }
    
    /// `UINib(name: "ToolsCollectionsAudioTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toolsCollectionsAudioTableViewCell) instead")
    static func toolsCollectionsAudioTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toolsCollectionsAudioTableViewCell)
    }
    
    /// `UINib(name: "ToolsCollectionsGroupTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toolsCollectionsGroupTableViewCell) instead")
    static func toolsCollectionsGroupTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toolsCollectionsGroupTableViewCell)
    }
    
    /// `UINib(name: "ToolsCollectionsVideoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toolsCollectionsVideoTableViewCell) instead")
    static func toolsCollectionsVideoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toolsCollectionsVideoTableViewCell)
    }
    
    /// `UINib(name: "ToolsTableHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toolsTableHeaderView) instead")
    static func toolsTableHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toolsTableHeaderView)
    }
    
    /// `UINib(name: "ToolsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toolsTableViewCell) instead")
    static func toolsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toolsTableViewCell)
    }
    
    /// `UINib(name: "TriggerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.triggerTableViewCell) instead")
    static func triggerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.triggerTableViewCell)
    }
    
    /// `UINib(name: "TutorialCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tutorialCollectionViewCell) instead")
    static func tutorialCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tutorialCollectionViewCell)
    }
    
    /// `UINib(name: "TutorialViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tutorialViewController) instead")
    static func tutorialViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tutorialViewController)
    }
    
    /// `UINib(name: "TwoLinesAndButton", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.twoLinesAndButton) instead")
    static func twoLinesAndButton(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.twoLinesAndButton)
    }
    
    /// `UINib(name: "TwoLinesAndImage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.twoLinesAndImage) instead")
    static func twoLinesAndImage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.twoLinesAndImage)
    }
    
    /// `UINib(name: "UserInputTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userInputTableViewCell) instead")
    static func userInputTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userInputTableViewCell)
    }
    
    /// `UINib(name: "WeeklyChoicesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weeklyChoicesCell) instead")
    static func weeklyChoicesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weeklyChoicesCell)
    }
    
    /// `UINib(name: "WhatsHotArticleHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.whatsHotArticleHeaderView) instead")
    static func whatsHotArticleHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.whatsHotArticleHeaderView)
    }
    
    /// `UINib(name: "WhatsHotCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.whatsHotCollectionViewCell) instead")
    static func whatsHotCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.whatsHotCollectionViewCell)
    }
    
    /// `UINib(name: "WhatsHotComponentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.whatsHotComponentView) instead")
    static func whatsHotComponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.whatsHotComponentView)
    }
    
    /// `UINib(name: "WhatsHotLatestCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.whatsHotLatestCell) instead")
    static func whatsHotLatestCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.whatsHotLatestCell)
    }
    
    static func aboutMeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutMeCell? {
      return R.nib.aboutMeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutMeCell
    }
    
    static func abstractTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AbstractTableViewCell? {
      return R.nib.abstractTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AbstractTableViewCell
    }
    
    static func appSettingsFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppSettingsFooterView? {
      return R.nib.appSettingsFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppSettingsFooterView
    }
    
    static func articleBulletPointTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleBulletPointTableViewCell? {
      return R.nib.articleBulletPointTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleBulletPointTableViewCell
    }
    
    static func articleCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleCollectionCell? {
      return R.nib.articleCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleCollectionCell
    }
    
    static func articleHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleHeaderView? {
      return R.nib.articleHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleHeaderView
    }
    
    static func articleImageHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleImageHeaderTableViewCell? {
      return R.nib.articleImageHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleImageHeaderTableViewCell
    }
    
    static func articleItemHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleItemHeaderView? {
      return R.nib.articleItemHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleItemHeaderView
    }
    
    static func articleItemViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.articleItemViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func articleNextUpTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleNextUpTableViewCell? {
      return R.nib.articleNextUpTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleNextUpTableViewCell
    }
    
    static func articleRelatedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleRelatedCell? {
      return R.nib.articleRelatedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleRelatedCell
    }
    
    static func articleRelatedTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleRelatedTableViewCell? {
      return R.nib.articleRelatedTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleRelatedTableViewCell
    }
    
    static func articleRelatedWhatsHotTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleRelatedWhatsHotTableViewCell? {
      return R.nib.articleRelatedWhatsHotTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleRelatedWhatsHotTableViewCell
    }
    
    static func articleTextHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleTextHeaderTableViewCell? {
      return R.nib.articleTextHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleTextHeaderTableViewCell
    }
    
    static func audioButton(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AudioButton? {
      return R.nib.audioButton.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AudioButton
    }
    
    static func audioPlayerBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AudioPlayerBar? {
      return R.nib.audioPlayerBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AudioPlayerBar
    }
    
    static func beSpokeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BeSpokeCell? {
      return R.nib.beSpokeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BeSpokeCell
    }
    
    static func calendarEventsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CalendarEventsTableViewCell? {
      return R.nib.calendarEventsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CalendarEventsTableViewCell
    }
    
    static func causeTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CauseTableViewCell? {
      return R.nib.causeTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CauseTableViewCell
    }
    
    static func chartCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChartCell? {
      return R.nib.chartCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChartCell
    }
    
    static func coachTableHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoachTableHeaderView? {
      return R.nib.coachTableHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoachTableHeaderView
    }
    
    static func coachTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoachTableViewCell? {
      return R.nib.coachTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoachTableViewCell
    }
    
    static func collapsableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollapsableCell? {
      return R.nib.collapsableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollapsableCell
    }
    
    static func collapsableContentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollapsableContentCell? {
      return R.nib.collapsableContentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollapsableContentCell
    }
    
    static func componentCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComponentCollectionViewCell? {
      return R.nib.componentCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComponentCollectionViewCell
    }
    
    static func componentHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComponentHeaderView? {
      return R.nib.componentHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComponentHeaderView
    }
    
    static func confirmationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.confirmationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func contentItemTextTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContentItemTextTableViewCell? {
      return R.nib.contentItemTextTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContentItemTextTableViewCell
    }
    
    static func dailyBriefForwardEdge(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dailyBriefForwardEdge.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func dailyCheckInInsights2TBV(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dailyCheckInInsights2TBV.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func dailyCheckinInsightsPeakPerformanceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyCheckinInsightsPeakPerformanceCell? {
      return R.nib.dailyCheckinInsightsPeakPerformanceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyCheckinInsightsPeakPerformanceCell
    }
    
    static func dailyCheckinInsightsSHPICell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyCheckinInsightsSHPICell? {
      return R.nib.dailyCheckinInsightsSHPICell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyCheckinInsightsSHPICell
    }
    
    static func dailyCheckinInsightsTBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyCheckinInsightsTBVCell? {
      return R.nib.dailyCheckinInsightsTBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyCheckinInsightsTBVCell
    }
    
    static func decisionTreeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.decisionTreeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func departureInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DepartureInfoCell? {
      return R.nib.departureInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DepartureInfoCell
    }
    
    static func editHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditHeaderView? {
      return R.nib.editHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditHeaderView
    }
    
    static func exploreCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExploreCell? {
      return R.nib.exploreCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExploreCell
    }
    
    static func fatigueTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FatigueTableViewCell? {
      return R.nib.fatigueTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FatigueTableViewCell
    }
    
    static func feastCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeastCell? {
      return R.nib.feastCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeastCell
    }
    
    static func fiveLines(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FiveLines? {
      return R.nib.fiveLines.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FiveLines
    }
    
    static func fiveLinesWithTopBroad(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FiveLinesWithTopBroad? {
      return R.nib.fiveLinesWithTopBroad.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FiveLinesWithTopBroad
    }
    
    static func formView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FormView? {
      return R.nib.formView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FormView
    }
    
    static func foundationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoundationTableViewCell? {
      return R.nib.foundationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoundationTableViewCell
    }
    
    static func fromMyCoachCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FromMyCoachCell? {
      return R.nib.fromMyCoachCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FromMyCoachCell
    }
    
    static func fromMyCoachHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FromMyCoachHeaderView? {
      return R.nib.fromMyCoachHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FromMyCoachHeaderView
    }
    
    static func fromMyCoachMessageView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FromMyCoachMessageView? {
      return R.nib.fromMyCoachMessageView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FromMyCoachMessageView
    }
    
    static func fromTignumCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FromTignumCell? {
      return R.nib.fromTignumCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FromTignumCell
    }
    
    static func goodToKnowCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodToKnowCell? {
      return R.nib.goodToKnowCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodToKnowCell
    }
    
    static func guideDailyPrepTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuideDailyPrepTableViewCell? {
      return R.nib.guideDailyPrepTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuideDailyPrepTableViewCell
    }
    
    static func guideGreetingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuideGreetingView? {
      return R.nib.guideGreetingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuideGreetingView
    }
    
    static func guidePreparationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuidePreparationTableViewCell? {
      return R.nib.guidePreparationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuidePreparationTableViewCell
    }
    
    static func guideTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuideTableViewCell? {
      return R.nib.guideTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuideTableViewCell
    }
    
    static func guideToBeVisionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuideToBeVisionTableViewCell? {
      return R.nib.guideToBeVisionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuideToBeVisionTableViewCell
    }
    
    static func guideWhatsHotTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuideWhatsHotTableViewCell? {
      return R.nib.guideWhatsHotTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuideWhatsHotTableViewCell
    }
    
    static func iPadAdviceView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IPadAdviceView? {
      return R.nib.iPadAdviceView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IPadAdviceView
    }
    
    static func imageSubtitleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageSubtitleTableViewCell? {
      return R.nib.imageSubtitleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageSubtitleTableViewCell
    }
    
    static func impactDataTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImpactDataTableViewCell? {
      return R.nib.impactDataTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImpactDataTableViewCell
    }
    
    static func impactReadinessCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImpactReadinessCell? {
      return R.nib.impactReadinessCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImpactReadinessCell
    }
    
    static func infoAlertView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.infoAlertView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func infoHelperView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.infoHelperView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func leaderWisdomTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeaderWisdomTableViewCell? {
      return R.nib.leaderWisdomTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeaderWisdomTableViewCell
    }
    
    static func learnContentItemBulletCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnContentItemBulletCell? {
      return R.nib.learnContentItemBulletCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnContentItemBulletCell
    }
    
    static func learnContentItemHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnContentItemHeaderView? {
      return R.nib.learnContentItemHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnContentItemHeaderView
    }
    
    static func learnContentItemRecommendedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnContentItemRecommendedCell? {
      return R.nib.learnContentItemRecommendedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnContentItemRecommendedCell
    }
    
    static func learnPDFCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnPDFCell? {
      return R.nib.learnPDFCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnPDFCell
    }
    
    static func learnReadMoreCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnReadMoreCell? {
      return R.nib.learnReadMoreCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnReadMoreCell
    }
    
    static func learnStrategyAudioPlayerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnStrategyAudioPlayerView? {
      return R.nib.learnStrategyAudioPlayerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnStrategyAudioPlayerView
    }
    
    static func learnStrategyPlaylistAudioCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnStrategyPlaylistAudioCell? {
      return R.nib.learnStrategyPlaylistAudioCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnStrategyPlaylistAudioCell
    }
    
    static func level5Cell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Level5Cell? {
      return R.nib.level5Cell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Level5Cell
    }
    
    static func libraryCategoryCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibraryCollectionViewCell? {
      return R.nib.libraryCategoryCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibraryCollectionViewCell
    }
    
    static func libraryLatestPostCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibraryCollectionViewCell? {
      return R.nib.libraryLatestPostCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibraryCollectionViewCell
    }
    
    static func libraryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibraryTableViewCell? {
      return R.nib.libraryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibraryTableViewCell
    }
    
    static func loader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Loader? {
      return R.nib.loader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Loader
    }
    
    static func markAsReadTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MarkAsReadTableViewCell? {
      return R.nib.markAsReadTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MarkAsReadTableViewCell
    }
    
    static func meAtMyBestCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeAtMyBestCell? {
      return R.nib.meAtMyBestCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeAtMyBestCell
    }
    
    static func meAtMyBestEmptyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeAtMyBestEmptyCell? {
      return R.nib.meAtMyBestEmptyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeAtMyBestEmptyCell
    }
    
    static func mediaPlayerOverlay(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MediaPlayerOverlay? {
      return R.nib.mediaPlayerOverlay.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MediaPlayerOverlay
    }
    
    static func mindsetShifterHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MindsetShifterHeaderCell? {
      return R.nib.mindsetShifterHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MindsetShifterHeaderCell
    }
    
    static func mindsetVisionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MindsetVisionTableViewCell? {
      return R.nib.mindsetVisionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MindsetVisionTableViewCell
    }
    
    static func multipleSelectionCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultipleSelectionCollectionViewCell? {
      return R.nib.multipleSelectionCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultipleSelectionCollectionViewCell
    }
    
    static func multipleSelectionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultipleSelectionTableViewCell? {
      return R.nib.multipleSelectionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultipleSelectionTableViewCell
    }
    
    static func myPeakPerformanceRowCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPeakPerformanceRowCell? {
      return R.nib.myPeakPerformanceRowCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPeakPerformanceRowCell
    }
    
    static func myPeakPerformanceSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPeakPerformanceSectionCell? {
      return R.nib.myPeakPerformanceSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPeakPerformanceSectionCell
    }
    
    static func myPeakPerformanceTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPeakPerformanceTableCell? {
      return R.nib.myPeakPerformanceTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPeakPerformanceTableCell
    }
    
    static func myPeakPerformanceTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPeakPerformanceTitleCell? {
      return R.nib.myPeakPerformanceTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPeakPerformanceTitleCell
    }
    
    static func myPrepTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPrepTableViewCell? {
      return R.nib.myPrepTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPrepTableViewCell
    }
    
    static func myPrepsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPrepsTableViewCell? {
      return R.nib.myPrepsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPrepsTableViewCell
    }
    
    static func myQotMainCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyQotMainCollectionViewCell? {
      return R.nib.myQotMainCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyQotMainCollectionViewCell
    }
    
    static func myQotProfileHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyQotProfileHeaderView? {
      return R.nib.myQotProfileHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyQotProfileHeaderView
    }
    
    static func myQotProfileOptionsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyQotProfileOptionsTableViewCell? {
      return R.nib.myQotProfileOptionsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyQotProfileOptionsTableViewCell
    }
    
    static func myQotSyncedCalendarCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyQotSyncedCalendarCell? {
      return R.nib.myQotSyncedCalendarCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyQotSyncedCalendarCell
    }
    
    static func mySprintDetailsHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySprintDetailsHeaderView? {
      return R.nib.mySprintDetailsHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySprintDetailsHeaderView
    }
    
    static func mySprintsListHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySprintsListHeaderView? {
      return R.nib.mySprintsListHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySprintsListHeaderView
    }
    
    static func myToBeVisionViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.myToBeVisionViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func myUniverseContentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyUniverseContentView? {
      return R.nib.myUniverseContentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyUniverseContentView
    }
    
    static func myUniverseViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.myUniverseViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func negativeToPositiveTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NegativeToPositiveTableViewCell? {
      return R.nib.negativeToPositiveTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NegativeToPositiveTableViewCell
    }
    
    static func partnerEditViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.partnerEditViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func partnersOverviewCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PartnersOverviewCollectionViewCell? {
      return R.nib.partnersOverviewCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PartnersOverviewCollectionViewCell
    }
    
    static func partnersOverviewViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.partnersOverviewViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func paymentHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentHeaderView? {
      return R.nib.paymentHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentHeaderView
    }
    
    static func paymentReminderViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentReminderViewController? {
      return R.nib.paymentReminderViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentReminderViewController
    }
    
    static func paymentTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentTableViewCell? {
      return R.nib.paymentTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentTableViewCell
    }
    
    static func permissionsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PermissionsCell? {
      return R.nib.permissionsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PermissionsCell
    }
    
    static func popUpViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.popUpViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func prepareContentHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareContentHeaderTableViewCell? {
      return R.nib.prepareContentHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareContentHeaderTableViewCell
    }
    
    static func prepareContentMainHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareContentMainHeaderTableViewCell? {
      return R.nib.prepareContentMainHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareContentMainHeaderTableViewCell
    }
    
    static func prepareContentSubHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareContentSubHeaderTableViewCell? {
      return R.nib.prepareContentSubHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareContentSubHeaderTableViewCell
    }
    
    static func prepareContentTopTabBarView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareContentTopTabBarView? {
      return R.nib.prepareContentTopTabBarView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareContentTopTabBarView
    }
    
    static func prepareEventTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareEventTableViewCell? {
      return R.nib.prepareEventTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareEventTableViewCell
    }
    
    static func prepareEventsUpcomingTripTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareEventsUpcomingTripTableViewCell? {
      return R.nib.prepareEventsUpcomingTripTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareEventsUpcomingTripTableViewCell
    }
    
    static func prepareEventsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.prepareEventsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func prepareNotesHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareNotesHeaderView? {
      return R.nib.prepareNotesHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareNotesHeaderView
    }
    
    static func prepareNotesTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareNotesTableViewCell? {
      return R.nib.prepareNotesTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareNotesTableViewCell
    }
    
    static func prepareResultsContentTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareResultsContentTableViewCell? {
      return R.nib.prepareResultsContentTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareResultsContentTableViewCell
    }
    
    static func prepareResultsInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareResultsInfoView? {
      return R.nib.prepareResultsInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareResultsInfoView
    }
    
    static func prepareSectionHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareSectionHeaderView? {
      return R.nib.prepareSectionHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareSectionHeaderView
    }
    
    static func profileSettingsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileSettingsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func questionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionCell? {
      return R.nib.questionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionCell
    }
    
    static func questionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableViewCell? {
      return R.nib.questionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableViewCell
    }
    
    static func reactionsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReactionsTableViewCell? {
      return R.nib.reactionsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReactionsTableViewCell
    }
    
    static func relatedStrategyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RelatedStrategyTableViewCell? {
      return R.nib.relatedStrategyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RelatedStrategyTableViewCell
    }
    
    static func reminderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReminderTableViewCell? {
      return R.nib.reminderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReminderTableViewCell
    }
    
    static func requestDeviceSensorCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestDeviceSensorCollectionViewCell? {
      return R.nib.requestDeviceSensorCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestDeviceSensorCollectionViewCell
    }
    
    static func screenHelpViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.screenHelpViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func searchTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchTableViewCell? {
      return R.nib.searchTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchTableViewCell
    }
    
    static func searchViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func sensorCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SensorCollectionViewCell? {
      return R.nib.sensorCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SensorCollectionViewCell
    }
    
    static func sensorViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.sensorViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func settingsBubblesViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.settingsBubblesViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func settingsButtonTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableViewCell? {
      return R.nib.settingsButtonTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewCell
    }
    
    static func settingsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsCell? {
      return R.nib.settingsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsCell
    }
    
    static func settingsControlTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableViewCell? {
      return R.nib.settingsControlTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewCell
    }
    
    static func settingsLabelTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableViewCell? {
      return R.nib.settingsLabelTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewCell
    }
    
    static func settingsMenuHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsMenuHeader? {
      return R.nib.settingsMenuHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsMenuHeader
    }
    
    static func settingsMenuViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.settingsMenuViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func settingsTextFieldTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableViewCell? {
      return R.nib.settingsTextFieldTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewCell
    }
    
    static func settingsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.settingsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func shareViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.shareViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func shifterResultViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.shifterResultViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func signingCountryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SigningCountryTableViewCell? {
      return R.nib.signingCountryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SigningCountryTableViewCell
    }
    
    static func signingCountryViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.signingCountryViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func signingCreatePasswordViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.signingCreatePasswordViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func signingDigitViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.signingDigitViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func signingEmailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.signingEmailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func signingInfoCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SigningInfoCollectionViewCell? {
      return R.nib.signingInfoCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SigningInfoCollectionViewCell
    }
    
    static func signingInfoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.signingInfoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func signingLoginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.signingLoginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func signingProfileDetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.signingProfileDetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func singleSelectionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleSelectionTableViewCell? {
      return R.nib.singleSelectionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleSelectionTableViewCell
    }
    
    static func siriShortcutsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SiriShortcutsCell? {
      return R.nib.siriShortcutsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SiriShortcutsCell
    }
    
    static func siriShortcutsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.siriShortcutsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func solveDayPlanTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveDayPlanTableViewCell? {
      return R.nib.solveDayPlanTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveDayPlanTableViewCell
    }
    
    static func solveFollowUpTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveFollowUpTableViewCell? {
      return R.nib.solveFollowUpTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveFollowUpTableViewCell
    }
    
    static func solveHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveHeaderTableViewCell? {
      return R.nib.solveHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveHeaderTableViewCell
    }
    
    static func solveReminderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveReminderCell? {
      return R.nib.solveReminderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveReminderCell
    }
    
    static func solveResultsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.solveResultsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func solveStrategyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveStrategyTableViewCell? {
      return R.nib.solveStrategyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveStrategyTableViewCell
    }
    
    static func solveTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveTableViewCell? {
      return R.nib.solveTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveTableViewCell
    }
    
    static func solveTriggerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveTriggerTableViewCell? {
      return R.nib.solveTriggerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveTriggerTableViewCell
    }
    
    static func sprintChallengeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SprintChallengeCell? {
      return R.nib.sprintChallengeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SprintChallengeCell
    }
    
    static func sprintChallengeTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SprintChallengeTableViewCell? {
      return R.nib.sprintChallengeTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SprintChallengeTableViewCell
    }
    
    static func strategyCategoryCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StrategyCategoryCollectionViewCell? {
      return R.nib.strategyCategoryCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StrategyCategoryCollectionViewCell
    }
    
    static func strategyContentTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StrategyContentTableViewCell? {
      return R.nib.strategyContentTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StrategyContentTableViewCell
    }
    
    static func strategyFoundationCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StrategyFoundationCollectionViewCell? {
      return R.nib.strategyFoundationCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StrategyFoundationCollectionViewCell
    }
    
    static func strategyListHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StrategyListHeaderView? {
      return R.nib.strategyListHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StrategyListHeaderView
    }
    
    static func strategyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StrategyTableViewCell? {
      return R.nib.strategyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StrategyTableViewCell
    }
    
    static func subsriptionReminderViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.subsriptionReminderViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func suggestionSearchTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestionSearchTableViewCell? {
      return R.nib.suggestionSearchTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestionSearchTableViewCell
    }
    
    static func suggestionsHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestionsHeaderView? {
      return R.nib.suggestionsHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestionsHeaderView
    }
    
    static func supportFAQTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportFAQTableViewCell? {
      return R.nib.supportFAQTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportFAQTableViewCell
    }
    
    static func supportFAQViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.supportFAQViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func tbvDataGraphAnswersTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphAnswersTableViewCell? {
      return R.nib.tbvDataGraphAnswersTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphAnswersTableViewCell
    }
    
    static func tbvDataGraphBarNextDurationViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphBarNextDurationViewCell? {
      return R.nib.tbvDataGraphBarNextDurationViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphBarNextDurationViewCell
    }
    
    static func tbvDataGraphBarViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphBarViewCell? {
      return R.nib.tbvDataGraphBarViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphBarViewCell
    }
    
    static func tbvDataGraphHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphHeaderView? {
      return R.nib.tbvDataGraphHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphHeaderView
    }
    
    static func tbvDataGraphSubHeadingTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphSubHeadingTableViewCell? {
      return R.nib.tbvDataGraphSubHeadingTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphSubHeadingTableViewCell
    }
    
    static func tbvDataGraphTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphTableViewCell? {
      return R.nib.tbvDataGraphTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphTableViewCell
    }
    
    static func tbvGraphBarRangeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVGraphBarRangeCell? {
      return R.nib.tbvGraphBarRangeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVGraphBarRangeCell
    }
    
    static func textTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextTableViewCell? {
      return R.nib.textTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextTableViewCell
    }
    
    static func thoughtsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ThoughtsCell? {
      return R.nib.thoughtsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThoughtsCell
    }
    
    static func threeLines(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ThreeLines? {
      return R.nib.threeLines.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThreeLines
    }
    
    static func threeLinesAndButton(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ThreeLinesAndButton? {
      return R.nib.threeLinesAndButton.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThreeLinesAndButton
    }
    
    static func threeLinesAndImage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ThreeLinesAndImage? {
      return R.nib.threeLinesAndImage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThreeLinesAndImage
    }
    
    static func titleSubtitleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleSubtitleTableViewCell? {
      return R.nib.titleSubtitleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleSubtitleTableViewCell
    }
    
    static func titleTableHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleTableHeaderView? {
      return R.nib.titleTableHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleTableHeaderView
    }
    
    static func titleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleTableViewCell? {
      return R.nib.titleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleTableViewCell
    }
    
    static func toolsCollectionsAudioTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToolsCollectionsAudioTableViewCell? {
      return R.nib.toolsCollectionsAudioTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToolsCollectionsAudioTableViewCell
    }
    
    static func toolsCollectionsGroupTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToolsCollectionsGroupTableViewCell? {
      return R.nib.toolsCollectionsGroupTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToolsCollectionsGroupTableViewCell
    }
    
    static func toolsCollectionsVideoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToolsCollectionsVideoTableViewCell? {
      return R.nib.toolsCollectionsVideoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToolsCollectionsVideoTableViewCell
    }
    
    static func toolsTableHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToolsTableHeaderView? {
      return R.nib.toolsTableHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToolsTableHeaderView
    }
    
    static func toolsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToolsTableViewCell? {
      return R.nib.toolsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToolsTableViewCell
    }
    
    static func triggerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TriggerTableViewCell? {
      return R.nib.triggerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TriggerTableViewCell
    }
    
    static func tutorialCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TutorialCollectionViewCell? {
      return R.nib.tutorialCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialCollectionViewCell
    }
    
    static func tutorialViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tutorialViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func twoLinesAndButton(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TwoLinesAndButton? {
      return R.nib.twoLinesAndButton.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TwoLinesAndButton
    }
    
    static func twoLinesAndImage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TwoLinesAndImage? {
      return R.nib.twoLinesAndImage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TwoLinesAndImage
    }
    
    static func userInputTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInputTableViewCell? {
      return R.nib.userInputTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInputTableViewCell
    }
    
    static func weeklyChoicesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeeklyChoicesCell? {
      return R.nib.weeklyChoicesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeeklyChoicesCell
    }
    
    static func whatsHotArticleHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleItemHeaderView? {
      return R.nib.whatsHotArticleHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleItemHeaderView
    }
    
    static func whatsHotCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WhatsHotCollectionViewCell? {
      return R.nib.whatsHotCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WhatsHotCollectionViewCell
    }
    
    static func whatsHotComponentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.whatsHotComponentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func whatsHotLatestCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WhatsHotLatestCell? {
      return R.nib.whatsHotLatestCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WhatsHotLatestCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 20 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ArticleBookmarkTableViewCell`.
    static let articleBookmarkTableViewCell: Rswift.ReuseIdentifier<ArticleBookmarkTableViewCell> = Rswift.ReuseIdentifier(identifier: "ArticleBookmarkTableViewCell")
    /// Reuse identifier `AudioBookmarkTableViewCell`.
    static let audioBookmarkTableViewCell: Rswift.ReuseIdentifier<AudioBookmarkTableViewCell> = Rswift.ReuseIdentifier(identifier: "AudioBookmarkTableViewCell")
    /// Reuse identifier `CtaItemDetailsItemCell`.
    static let ctaItemDetailsItemCell: Rswift.ReuseIdentifier<CtaItemDetailsItemCell> = Rswift.ReuseIdentifier(identifier: "CtaItemDetailsItemCell")
    /// Reuse identifier `DownloadTableViewCell`.
    static let downloadTableViewCell: Rswift.ReuseIdentifier<DownloadTableViewCell> = Rswift.ReuseIdentifier(identifier: "DownloadTableViewCell")
    /// Reuse identifier `HeaderDetailsItemCell`.
    static let headerDetailsItemCell: Rswift.ReuseIdentifier<HeaderDetailsItemCell> = Rswift.ReuseIdentifier(identifier: "HeaderDetailsItemCell")
    /// Reuse identifier `ListItemDetailsItemCell`.
    static let listItemDetailsItemCell: Rswift.ReuseIdentifier<ListItemDetailsItemCell> = Rswift.ReuseIdentifier(identifier: "ListItemDetailsItemCell")
    /// Reuse identifier `MyLibraryCategoryTableViewCell`.
    static let myLibraryCategoryTableViewCell: Rswift.ReuseIdentifier<MyLibraryCategoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "MyLibraryCategoryTableViewCell")
    /// Reuse identifier `MySprintsListTableViewCell`.
    static let mySprintsListTableViewCell: Rswift.ReuseIdentifier<MySprintsListTableViewCell> = Rswift.ReuseIdentifier(identifier: "MySprintsListTableViewCell")
    /// Reuse identifier `NoteTableViewCell`.
    static let noteTableViewCell: Rswift.ReuseIdentifier<NoteTableViewCell> = Rswift.ReuseIdentifier(identifier: "NoteTableViewCell")
    /// Reuse identifier `QuestionnaireTableViewCell`.
    static let questionnaireTableViewCell: Rswift.ReuseIdentifier<QuestionnaireTableViewCell> = Rswift.ReuseIdentifier(identifier: "QuestionnaireTableViewCell")
    /// Reuse identifier `ScheduledNotificationTableViewCell_ID`.
    static let scheduledNotificationTableViewCell_ID: Rswift.ReuseIdentifier<ScheduledNotificationTableViewCell> = Rswift.ReuseIdentifier(identifier: "ScheduledNotificationTableViewCell_ID")
    /// Reuse identifier `SettingsTableViewCell_Button`.
    static let settingsTableViewCell_Button: Rswift.ReuseIdentifier<SettingsTableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsTableViewCell_Button")
    /// Reuse identifier `SettingsTableViewCell_Control`.
    static let settingsTableViewCell_Control: Rswift.ReuseIdentifier<SettingsTableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsTableViewCell_Control")
    /// Reuse identifier `SettingsTableViewCell_Label`.
    static let settingsTableViewCell_Label: Rswift.ReuseIdentifier<SettingsTableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsTableViewCell_Label")
    /// Reuse identifier `SettingsTableViewCell_TextField`.
    static let settingsTableViewCell_TextField: Rswift.ReuseIdentifier<SettingsTableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsTableViewCell_TextField")
    /// Reuse identifier `TBVDataGraphAnswersTableViewCell`.
    static let tbvDataGraphAnswersTableViewCell: Rswift.ReuseIdentifier<TBVDataGraphAnswersTableViewCell> = Rswift.ReuseIdentifier(identifier: "TBVDataGraphAnswersTableViewCell")
    /// Reuse identifier `TBVDataGraphSubHeadingTableViewCell`.
    static let tbvDataGraphSubHeadingTableViewCell: Rswift.ReuseIdentifier<TBVDataGraphSubHeadingTableViewCell> = Rswift.ReuseIdentifier(identifier: "TBVDataGraphSubHeadingTableViewCell")
    /// Reuse identifier `TBVDataGraphTableViewCell`.
    static let tbvDataGraphTableViewCell: Rswift.ReuseIdentifier<TBVDataGraphTableViewCell> = Rswift.ReuseIdentifier(identifier: "TBVDataGraphTableViewCell")
    /// Reuse identifier `VideoBookmarkTableViewCell`.
    static let videoBookmarkTableViewCell: Rswift.ReuseIdentifier<VideoBookmarkTableViewCell> = Rswift.ReuseIdentifier(identifier: "VideoBookmarkTableViewCell")
    /// Reuse identifier `collectionViewCell`.
    static let collectionViewCell: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "collectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 9 view controllers.
  struct segue {
    /// This struct is generated for `KnowingViewController`, and contains static references to 2 segues.
    struct knowingViewController {
      /// Segue identifier `know.article.segue.identifier`.
      static let knowArticleSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, KnowingViewController, ArticleNavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "know.article.segue.identifier")
      /// Segue identifier `know.strategy.list.segue.identifier`.
      static let knowStrategyListSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, KnowingViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "know.strategy.list.segue.identifier")
      
      /// Optionally returns a typed version of segue `know.article.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func knowArticleSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, KnowingViewController, ArticleNavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.knowingViewController.knowArticleSegueIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `know.strategy.list.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func knowStrategyListSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, KnowingViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.knowingViewController.knowStrategyListSegueIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyQotAccountSettingsViewController`, and contains static references to 1 segues.
    struct myQotAccountSettingsViewController {
      /// Segue identifier `myQot.accountSettings.editAccount.segue.identifier`.
      static let myQotAccountSettingsEditAccountSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyQotAccountSettingsViewController, ProfileSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "myQot.accountSettings.editAccount.segue.identifier")
      
      /// Optionally returns a typed version of segue `myQot.accountSettings.editAccount.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myQotAccountSettingsEditAccountSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyQotAccountSettingsViewController, ProfileSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myQotAccountSettingsViewController.myQotAccountSettingsEditAccountSegueIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyQotAppSettingsViewController`, and contains static references to 3 segues.
    struct myQotAppSettingsViewController {
      /// Segue identifier `myQot.appSettings.activityTracker.segue.identifier`.
      static let myQotAppSettingsActivityTrackerSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyQotAppSettingsViewController, MyQotSensorsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "myQot.appSettings.activityTracker.segue.identifier")
      /// Segue identifier `myQot.appSettings.siriShortcuts.segue.identifier`.
      static let myQotAppSettingsSiriShortcutsSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyQotAppSettingsViewController, MyQotSiriShortcutsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "myQot.appSettings.siriShortcuts.segue.identifier")
      /// Segue identifier `myQot.appSettings.syncedCalendar.segue.identifier`.
      static let myQotAppSettingsSyncedCalendarSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyQotAppSettingsViewController, MyQotSyncedCalendarsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "myQot.appSettings.syncedCalendar.segue.identifier")
      
      /// Optionally returns a typed version of segue `myQot.appSettings.activityTracker.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myQotAppSettingsActivityTrackerSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyQotAppSettingsViewController, MyQotSensorsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myQotAppSettingsViewController.myQotAppSettingsActivityTrackerSegueIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `myQot.appSettings.siriShortcuts.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myQotAppSettingsSiriShortcutsSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyQotAppSettingsViewController, MyQotSiriShortcutsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myQotAppSettingsViewController.myQotAppSettingsSiriShortcutsSegueIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `myQot.appSettings.syncedCalendar.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myQotAppSettingsSyncedCalendarSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyQotAppSettingsViewController, MyQotSyncedCalendarsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myQotAppSettingsViewController.myQotAppSettingsSyncedCalendarSegueIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyQotProfileViewController`, and contains static references to 5 segues.
    struct myQotProfileViewController {
      /// Segue identifier `myQot.aboutTignum.segue.identifier`.
      static let myQotAboutTignumSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyQotProfileViewController, MyQotAboutUsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "myQot.aboutTignum.segue.identifier")
      /// Segue identifier `myQot.accountSettings.segue.identifier`.
      static let myQotAccountSettingsSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyQotProfileViewController, MyQotAccountSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "myQot.accountSettings.segue.identifier")
      /// Segue identifier `myQot.appSettings.segue.identifier`.
      static let myQotAppSettingsSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyQotProfileViewController, MyQotAppSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "myQot.appSettings.segue.identifier")
      /// Segue identifier `myQot.myLibrary.segue.identifier`.
      static let myQotMyLibrarySegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyQotProfileViewController, MyLibraryCategoryListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "myQot.myLibrary.segue.identifier")
      /// Segue identifier `myQot.support.segue.identifier`.
      static let myQotSupportSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyQotProfileViewController, MyQotSupportViewController> = Rswift.StoryboardSegueIdentifier(identifier: "myQot.support.segue.identifier")
      
      /// Optionally returns a typed version of segue `myQot.aboutTignum.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myQotAboutTignumSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyQotProfileViewController, MyQotAboutUsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myQotProfileViewController.myQotAboutTignumSegueIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `myQot.accountSettings.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myQotAccountSettingsSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyQotProfileViewController, MyQotAccountSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myQotProfileViewController.myQotAccountSettingsSegueIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `myQot.appSettings.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myQotAppSettingsSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyQotProfileViewController, MyQotAppSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myQotProfileViewController.myQotAppSettingsSegueIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `myQot.myLibrary.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myQotMyLibrarySegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyQotProfileViewController, MyLibraryCategoryListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myQotProfileViewController.myQotMyLibrarySegueIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `myQot.support.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myQotSupportSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyQotProfileViewController, MyQotSupportViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myQotProfileViewController.myQotSupportSegueIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyQotSupportViewController`, and contains static references to 1 segues.
    struct myQotSupportViewController {
      /// Segue identifier `myQot.support.faq.segue.identifier`.
      static let myQotSupportFaqSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyQotSupportViewController, MyQotSupportFaqViewController> = Rswift.StoryboardSegueIdentifier(identifier: "myQot.support.faq.segue.identifier")
      
      /// Optionally returns a typed version of segue `myQot.support.faq.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myQotSupportFaqSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyQotSupportViewController, MyQotSupportFaqViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myQotSupportViewController.myQotSupportFaqSegueIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PrepareNotesViewController`, and contains static references to 1 segues.
    struct prepareNotesViewController {
      /// Segue identifier `prepare.notes.segue.identifier`.
      static let prepareNotesSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PrepareNotesViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "prepare.notes.segue.identifier")
      
      /// Optionally returns a typed version of segue `prepare.notes.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func prepareNotesSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PrepareNotesViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.prepareNotesViewController.prepareNotesSegueIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `StrategyListViewController`, and contains static references to 1 segues.
    struct strategyListViewController {
      /// Segue identifier `know.strategy.article.segue.identifier`.
      static let knowStrategyArticleSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, StrategyListViewController, ArticleNavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "know.strategy.article.segue.identifier")
      
      /// Optionally returns a typed version of segue `know.strategy.article.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func knowStrategyArticleSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, StrategyListViewController, ArticleNavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.strategyListViewController.knowStrategyArticleSegueIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ToolsCollectionsViewController`, and contains static references to 1 segues.
    struct toolsCollectionsViewController {
      /// Segue identifier `collections.items.segue.identifier`.
      static let collectionsItemsSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ToolsCollectionsViewController, ToolsItemsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "collections.items.segue.identifier")
      
      /// Optionally returns a typed version of segue `collections.items.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func collectionsItemsSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ToolsCollectionsViewController, ToolsItemsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.toolsCollectionsViewController.collectionsItemsSegueIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ToolsViewController`, and contains static references to 1 segues.
    struct toolsViewController {
      /// Segue identifier `tools.collections.segue.identifier`.
      static let toolsCollectionsSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ToolsViewController, ToolsCollectionsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "tools.collections.segue.identifier")
      
      /// Optionally returns a typed version of segue `tools.collections.segue.identifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toolsCollectionsSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ToolsViewController, ToolsCollectionsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.toolsViewController.toolsCollectionsSegueIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 24 storyboards.
  struct storyboard {
    /// Storyboard `AudioFullScreenViewController`.
    static let audioFullScreenViewController = _R.storyboard.audioFullScreenViewController()
    /// Storyboard `Coach`.
    static let coach = _R.storyboard.coach()
    /// Storyboard `DailyCheckin`.
    static let dailyCheckin = _R.storyboard.dailyCheckin()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MorningInterviewViewController`.
    static let morningInterviewViewController = _R.storyboard.morningInterviewViewController()
    /// Storyboard `MyLibraryNotes`.
    static let myLibraryNotes = _R.storyboard.myLibraryNotes()
    /// Storyboard `MyLibraryUserStorage`.
    static let myLibraryUserStorage = _R.storyboard.myLibraryUserStorage()
    /// Storyboard `MyLibrary`.
    static let myLibrary = _R.storyboard.myLibrary()
    /// Storyboard `MyPreps`.
    static let myPreps = _R.storyboard.myPreps()
    /// Storyboard `MyQot`.
    static let myQot = _R.storyboard.myQot()
    /// Storyboard `MySprintDetails`.
    static let mySprintDetails = _R.storyboard.mySprintDetails()
    /// Storyboard `MySprintNotes`.
    static let mySprintNotes = _R.storyboard.mySprintNotes()
    /// Storyboard `MySprints`.
    static let mySprints = _R.storyboard.mySprints()
    /// Storyboard `MyToBeVisionRate`.
    static let myToBeVisionRate = _R.storyboard.myToBeVisionRate()
    /// Storyboard `MyToBeVision`.
    static let myToBeVision = _R.storyboard.myToBeVision()
    /// Storyboard `PDFReaderViewController`.
    static let pdfReaderViewController = _R.storyboard.pdfReaderViewController()
    /// Storyboard `PrepareContentNotesViewController`.
    static let prepareContentNotesViewController = _R.storyboard.prepareContentNotesViewController()
    /// Storyboard `QuestionnaireViewController`.
    static let questionnaireViewController = _R.storyboard.questionnaireViewController()
    /// Storyboard `ReviewNotesViewController`.
    static let reviewNotesViewController = _R.storyboard.reviewNotesViewController()
    /// Storyboard `SettingsAdmin`.
    static let settingsAdmin = _R.storyboard.settingsAdmin()
    /// Storyboard `SettingsChangePasswordViewController`.
    static let settingsChangePasswordViewController = _R.storyboard.settingsChangePasswordViewController()
    /// Storyboard `Tools`.
    static let tools = _R.storyboard.tools()
    /// Storyboard `bottomNavigation`.
    static let bottomNavigation = _R.storyboard.bottomNavigation()
    
    /// `UIStoryboard(name: "AudioFullScreenViewController", bundle: ...)`
    static func audioFullScreenViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.audioFullScreenViewController)
    }
    
    /// `UIStoryboard(name: "Coach", bundle: ...)`
    static func coach(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.coach)
    }
    
    /// `UIStoryboard(name: "DailyCheckin", bundle: ...)`
    static func dailyCheckin(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dailyCheckin)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "MorningInterviewViewController", bundle: ...)`
    static func morningInterviewViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.morningInterviewViewController)
    }
    
    /// `UIStoryboard(name: "MyLibrary", bundle: ...)`
    static func myLibrary(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myLibrary)
    }
    
    /// `UIStoryboard(name: "MyLibraryNotes", bundle: ...)`
    static func myLibraryNotes(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myLibraryNotes)
    }
    
    /// `UIStoryboard(name: "MyLibraryUserStorage", bundle: ...)`
    static func myLibraryUserStorage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myLibraryUserStorage)
    }
    
    /// `UIStoryboard(name: "MyPreps", bundle: ...)`
    static func myPreps(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myPreps)
    }
    
    /// `UIStoryboard(name: "MyQot", bundle: ...)`
    static func myQot(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myQot)
    }
    
    /// `UIStoryboard(name: "MySprintDetails", bundle: ...)`
    static func mySprintDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mySprintDetails)
    }
    
    /// `UIStoryboard(name: "MySprintNotes", bundle: ...)`
    static func mySprintNotes(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mySprintNotes)
    }
    
    /// `UIStoryboard(name: "MySprints", bundle: ...)`
    static func mySprints(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mySprints)
    }
    
    /// `UIStoryboard(name: "MyToBeVision", bundle: ...)`
    static func myToBeVision(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myToBeVision)
    }
    
    /// `UIStoryboard(name: "MyToBeVisionRate", bundle: ...)`
    static func myToBeVisionRate(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myToBeVisionRate)
    }
    
    /// `UIStoryboard(name: "PDFReaderViewController", bundle: ...)`
    static func pdfReaderViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pdfReaderViewController)
    }
    
    /// `UIStoryboard(name: "PrepareContentNotesViewController", bundle: ...)`
    static func prepareContentNotesViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.prepareContentNotesViewController)
    }
    
    /// `UIStoryboard(name: "QuestionnaireViewController", bundle: ...)`
    static func questionnaireViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.questionnaireViewController)
    }
    
    /// `UIStoryboard(name: "ReviewNotesViewController", bundle: ...)`
    static func reviewNotesViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reviewNotesViewController)
    }
    
    /// `UIStoryboard(name: "SettingsAdmin", bundle: ...)`
    static func settingsAdmin(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingsAdmin)
    }
    
    /// `UIStoryboard(name: "SettingsChangePasswordViewController", bundle: ...)`
    static func settingsChangePasswordViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingsChangePasswordViewController)
    }
    
    /// `UIStoryboard(name: "Tools", bundle: ...)`
    static func tools(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tools)
    }
    
    /// `UIStoryboard(name: "bottomNavigation", bundle: ...)`
    static func bottomNavigation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bottomNavigation)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localized` struct is generated, and contains static references to 540 localization keys.
    struct localized {
      /// Value:  No Weekly Choices selected.
      static let meSectorMyWhyPartnersShareMissingWeeklyChoiceAlert = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Share.MissingWeeklyChoice.alert", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value:  h
      static let dailyCheckInSleepQuantityValueSuffix = Rswift.StringResource(key: "DailyCheckIn.SleepQuantity.Value.Suffix", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value:  h/more
      static let dailyCheckInSleepQuantityValueSuffixMax = Rswift.StringResource(key: "DailyCheckIn.SleepQuantity.Value.Suffix.Max", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value:  months since your last edit
      static let myQotVisionMonthsSince = Rswift.StringResource(key: "MyQot.Vision.MonthsSince", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %02d CHOICE
      static let meSectorMyWhyWeeklyChoicesChoice = Rswift.StringResource(key: "Me.Sector.My.Why.Weekly.Choices.Choice", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ WEEKS
      static let meSectorMyStatisticsWeeks = Rswift.StringResource(key: "Me.Sector.My.Statistics.Weeks", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ min audio
      static let learnContentListViewMinutesLabelListen = Rswift.StringResource(key: "learn.content-list-view.minutes-label-listen", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ min read
      static let learnContentListViewMinutesLabel = Rswift.StringResource(key: "learn.content-list-view.minutes-label", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ min video
      static let learnContentDurationVideo = Rswift.StringResource(key: "learn.content.duration.video", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ min video
      static let learnContentListViewMinutesLabelWatch = Rswift.StringResource(key: "learn.content-list-view.minutes-label-watch", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %d of %d STRATEGIES
      static let guideItemCompletedStrategiesCounter = Rswift.StringResource(key: "guide.item.completed.strategies.counter", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: (ADMIN)
      static let settingsGeneralAdminTitle = Rswift.StringResource(key: "Settings.General.Admin.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 0
      static let chartInitialStateValue = Rswift.StringResource(key: "Chart.Initial.State.Value", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 1 MINUTE
      static let qotUsageTimerDefault = Rswift.StringResource(key: "Qot.Usage.Timer.Default", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 5 minutes is all you need to rewire your brain for future success. What did you do well in this event?
      static let prepareReviewNotesReflectionPositiveTitle = Rswift.StringResource(key: "Prepare.Review.Notes.Reflection.Positive.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 55 Strategies
      static let topTabBarItemTitleLearnStrategies = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Learn.Strategies", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: <head><style>body{font-family:Apercu-Light;font-size:16px;color:gray;line-height:1.25;}highlight{font-family:Apercu-Light;font-size:21px;color:white;line-height:1.0}</style></head>
      static let morningControllerQuestionHTMLStyle = Rswift.StringResource(key: "MorningController.question.HTML.style", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A SPRINT IS ALREADY IN PROGRESS
      static let mySprintDetailsInfoTitleSprintInProgress = Rswift.StringResource(key: "MySprintDetails.Info.Title.SprintInProgress", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A Sprint is already in progress
      static let mySprintDetailsInfoTitleInProgress = Rswift.StringResource(key: "MySprintDetails.Info.Title.In.Progress", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A reset password email has been sent to %@
      static let signingLoginHudMessagePasswordReset = Rswift.StringResource(key: "signing.login.hud.message.password.reset", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: A short description of the action goes here
      static let imagePickerOptionsMessage = Rswift.StringResource(key: "ImagePicker.Options.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ABOUT TIGNUM
      static let sidebarTitleAbout = Rswift.StringResource(key: "Sidebar.Title.About", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ACTIVITY TRACKERS
      static let sidebarSensorsMenuSensors = Rswift.StringResource(key: "Sidebar.SensorsMenu.Sensors", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ADD THIS PREPARATION TO
      static let preparePrepareEventsAddPreparation = Rswift.StringResource(key: "Prepare.PrepareEvents.AddPreparation", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ALL
      static let searchFilterAll = Rswift.StringResource(key: "Search.Filter.All", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ARE YOU READY TO RULE YOUR IMPACT?
      static let slideShowMorePromptTitle = Rswift.StringResource(key: "SlideShow.MorePrompt.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AUDIO
      static let searchFilterAudio = Rswift.StringResource(key: "Search.Filter.Audio", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AVERAGE TIME ZONE CHANGES
      static let meCardTitleTravelTimeZoneMax = Rswift.StringResource(key: "Me.Card.Title.Travel.Time.Zone.Max", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Activity
      static let meSectorActivity = Rswift.StringResource(key: "Me.Sector.Activity", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Activity Level
      static let meCardTitleActivityLevel = Rswift.StringResource(key: "Me.Card.Title.Activity.Level", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add a photo
      static let meSectorMyWhyPartnersAddPhoto = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Add.Photo", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add new event
      static let buttonTitleAddEvent = Rswift.StringResource(key: "Button.Title.Add.Event", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add new event
      static let preparePrepareEventsAddNewEvent = Rswift.StringResource(key: "Prepare.PrepareEvents.AddNewEvent", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add or remove strategies from your preparation list.
      static let choiceViewHeaderEditPrepare = Rswift.StringResource(key: "Choice.View.Header.Edit.Prepare", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add partner
      static let meSectorMyWhyPartnersCellAddPartner = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Cell.Add.Partner", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add sensor to see this card.
      static let meChartAddSensor = Rswift.StringResource(key: "Me.Chart.Add.Sensor", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add strategy
      static let alertTitlePreparationAddStrategy = Rswift.StringResource(key: "Alert.Title.Preparation.Add.Strategy", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Allow QOT to access the calendar to see this card.
      static let meChartAddCalendar = Rswift.StringResource(key: "Me.Chart.Add.Calendar", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: An email has been sent to %@  Enter the 4-digit code to continue.
      static let signingDigitCheckSubtitle = Rswift.StringResource(key: "signing.digit.check.subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: An unexpected error has occured. (%@) Please try again later.
      static let alertMessageUnknownType = Rswift.StringResource(key: "Alert.Message.Unknown.Type", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: An unexpected error has occured. Please try again later.
      static let alertMessageUnknown = Rswift.StringResource(key: "Alert.Message.Unknown", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to leave without saving? The changes will not be applied.
      static let mySprintDetailsNotesInfoMessageLeave = Rswift.StringResource(key: "MySprintDetailsNotes.Info.Message.Leave", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to leave without saving? The changes will not be applied.
      static let profileConfirmationDescription = Rswift.StringResource(key: "ProfileConfirmation.description", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to pause your current sprint? To reach the best results is recommended to finish a sprint in maximum %d days.
      static let mySprintDetailsInfoMessagePauseSprint = Rswift.StringResource(key: "MySprintDetails.Info.Message.PauseSprint", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you would like to logout of QOT?
      static let alertMessageLogout = Rswift.StringResource(key: "Alert.Message.Logout", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Article
      static let learnContentItemArticle = Rswift.StringResource(key: "Learn.Content.Item.Article", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Articles
      static let learnContentItemArticles = Rswift.StringResource(key: "Learn.Content.Item.Articles", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Audio
      static let learnContentItemTitleAudio = Rswift.StringResource(key: "Learn.Content.Item.Title.Audio", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Average Number of Hours You Sleep
      static let meSectorMyStatisticsPersonalAverageSleepQuantity = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Average.Sleep.Quantity", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Average Number of Peak Performances
      static let meCardTitlePeakPerformacneAverage = Rswift.StringResource(key: "Me.Card.Title.Peak.Performacne.Average", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: BEFORE AND AFTER
      static let prepareHeaderBeforeAndAfter = Rswift.StringResource(key: "Prepare.header.before.and.after", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: BENEFITS EXPERIENCED
      static let mySprintDetailsHeaderBenefits = Rswift.StringResource(key: "MySprintDetails.Header.Benefits", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: BY %@
      static let aricleAuthorBy = Rswift.StringResource(key: "aricle.author.by", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Before you start, I would like access to your calendar and your location. Also, I would like to get permission to send you notifications. As always, all of your information is secure and confidential.
      static let onboardingChatItemPermissions = Rswift.StringResource(key: "Onboarding.Chat.Item.Permissions", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Birthdate
      static let birthdateTitle = Rswift.StringResource(key: "birthdate.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Building your daily recovery plan
      static let myQotSprintsSubtitle = Rswift.StringResource(key: "MyQot.Sprints.Subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bullets
      static let learnContentItemTitleBullets = Rswift.StringResource(key: "Learn.Content.Item.Title.Bullets", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: By creating an account, you agree to our [Terms of Use](termsOfUse://) and [Privacy Policy](privacyPolicy://).
      static let signingProfileCheckBoxText = Rswift.StringResource(key: "signing.profile.check.box.text", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CLOSE
      static let chartInitialStateClose = Rswift.StringResource(key: "Chart.Initial.State.Close", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CONNECT
      static let sidebarSensorsMenuConnect = Rswift.StringResource(key: "Sidebar.SensorsMenu.Connect", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CONNECT ACTIVITY TRACKER
      static let sidebarTitleSensor = Rswift.StringResource(key: "Sidebar.Title.Sensor", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CONNECTED
      static let sidebarSensorsMenuFitbitAlreadyConnectedTitle = Rswift.StringResource(key: "Sidebar.SensorsMenu.Fitbit.Already.Connected.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CONTACT SUPPORT
      static let sidebarTitleContactSupport = Rswift.StringResource(key: "Sidebar.Title.ContactSupport", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CONTENT AND COPYRIGHTS
      static let settingsSecurityCopyrightsTitle = Rswift.StringResource(key: "Settings.Security.Copyrights.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: COUNTRY OF RESIDENCE
      static let signingCountryTitle = Rswift.StringResource(key: "signing.country.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CREATE A PASSWORD
      static let signingPasswordTitle = Rswift.StringResource(key: "signing.password.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CREATE YOUR TO BE VISION
      static let guideToBeVisionNotFisishedTitle = Rswift.StringResource(key: "Guide.ToBeVision.NotFisished.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Calendar not synchronized
      static let alertTitleCalendarNotSynced = Rswift.StringResource(key: "Alert.title.calendar.not.synced", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let addSensorViewAlertCancel = Rswift.StringResource(key: "AddSensorView.Alert.Cancel", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let alertButtonTitleCancel = Rswift.StringResource(key: "Alert.Button.Title.Cancel", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let buttonTitleCancel = Rswift.StringResource(key: "Button.Title.Cancel", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let imagePickerOptionsButtonCancel = Rswift.StringResource(key: "ImagePicker.Options.Button.Cancel", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let mySprintDetailsButtonCancel = Rswift.StringResource(key: "MySprintDetails.Button.Cancel", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let mySprintDetailsNotesButtonCancel = Rswift.StringResource(key: "MySprintDetailsNotes.Button.Cancel", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cannot Display Content
      static let commonInvalidContent = Rswift.StringResource(key: "Common.InvalidContent", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cannot delete Partner
      static let partnersAlertDeleteErrorTitle = Rswift.StringResource(key: "Partners.Alert.DeleteError.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Capture your takeaways
      static let mySprintDetailsButtonTakeaways = Rswift.StringResource(key: "MySprintDetails.Button.Takeaways", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Categories
      static let learnCategoryListViewTitle = Rswift.StringResource(key: "learn.category-list-view.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change Notifications
      static let alertTitleSettingsChangeNotifications = Rswift.StringResource(key: "Alert.Title.Settings.Change.Notifications", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change Password
      static let settingsSecurityPasswordTitle = Rswift.StringResource(key: "Settings.Security.Password.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change Permission
      static let alertTitleSettingsChangePermission = Rswift.StringResource(key: "Alert.Title.Settings.ChangePermission", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change photo
      static let meSectorMyWhyPartnersChangePhoto = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Change.Photo", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Choose Photo
      static let imagePickerOptionsButtonPhoto = Rswift.StringResource(key: "ImagePicker.Options.Button.Photo", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Come back on the first sprintday and you will have access to your tasks.
      static let mySprintDetailsInfoTextUpcoming = Rswift.StringResource(key: "MySprintDetails.Info.Text.Upcoming", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Coming soon
      static let meChartCommingSoon = Rswift.StringResource(key: "Me.Chart.Comming.Soon", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Company
      static let settingsGeneralCompanyTitle = Rswift.StringResource(key: "Settings.General.Company.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm
      static let settingsSecurityConfirmTitle = Rswift.StringResource(key: "Settings.Security.Confirm.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Connected
      static let sidebarSensorsMenuSensorsConnected = Rswift.StringResource(key: "Sidebar.SensorsMenu.Sensors.Connected", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Content Not Found
      static let alertTitleNoContent = Rswift.StringResource(key: "Alert.Title.NoContent", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Continue
      static let alertButtonTitleContinue = Rswift.StringResource(key: "Alert.Button.Title.Continue", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Continue
      static let mySprintDetailsButtonContinue = Rswift.StringResource(key: "MySprintDetails.Button.Continue", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Continue sprint
      static let mySprintDetailsButtonContinueSprint = Rswift.StringResource(key: "MySprintDetails.Button.ContinueSprint", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not send email
      static let alertTitleCouldNotSendEmail = Rswift.StringResource(key: "Alert.Title.Could.Not.Send.Email", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create a new To Be Vision
      static let alertButtonTitleCreateVision = Rswift.StringResource(key: "Alert.Button.Title.Create.Vision", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create account
      static let signingProfileBottomButtonTitle = Rswift.StringResource(key: "signing.profile.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create password
      static let signingPasswordBottomButtonTitle = Rswift.StringResource(key: "signing.password.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Customize your benchmark value for your sleep quantity here accroding to the time amount you want to reach.
      static let dailyBriefCustomizeSleepIntro = Rswift.StringResource(key: "DailyBrief.Customize.Sleep.Intro", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Customize your preparation
      static let alertTitlePreparationEditStrategy = Rswift.StringResource(key: "Alert.Title.Preparation.Edit.Strategy", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: DAILY PREP MINUTE
      static let morningControllerTitleLabel = Rswift.StringResource(key: "MorningController.titleLabel", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: DAILY PREP MINUTE
      static let settingsNotificationsDailyPrepTitle = Rswift.StringResource(key: "Settings.Notifications.DailyPrep.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: DATA
      static let tabBarItemData = Rswift.StringResource(key: "Tab.Bar.Item.Data", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: DATA BASE AVG.
      static let chartInitialStateDatabaseAvg = Rswift.StringResource(key: "Chart.Initial.State.Database.Avg", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: DAY
      static let meSectorMyStatisticsDay = Rswift.StringResource(key: "Me.Sector.My.Statistics.Day", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: DONE
      static let morningControllerDoneButton = Rswift.StringResource(key: "MorningController.doneButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Date Of Birth
      static let settingsGeneralDateOfBirthTitle = Rswift.StringResource(key: "Settings.General.DateOfBirth.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Date not available
      static let alertTitleEventDateNotAvailable = Rswift.StringResource(key: "Alert.title.event.date.not.available", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Day
      static let calendarDay = Rswift.StringResource(key: "Calendar.Day", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Days
      static let calendarDays = Rswift.StringResource(key: "Calendar.Days", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete Photo
      static let imagePickerOptionsButtonDelete = Rswift.StringResource(key: "ImagePicker.Options.Button.Delete", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delivered at %@
      static let prepareChatFooterDeliveredTime = Rswift.StringResource(key: "Prepare.Chat.Footer.DeliveredTime", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Disconnected
      static let sidebarSensorsMenuSensorsDisconnected = Rswift.StringResource(key: "Sidebar.SensorsMenu.Sensors.Disconnected", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let buttonTitleDone = Rswift.StringResource(key: "Button.Title.Done", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let questionnaireViewControllerDoneButton = Rswift.StringResource(key: "QuestionnaireViewController.doneButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let rateViewControllerDoneButton = Rswift.StringResource(key: "RateViewController.doneButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let tbvTrackerViewControllerDoneButton = Rswift.StringResource(key: "TBVTrackerViewController.doneButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Download
      static let audioFullScreenButtonDownload = Rswift.StringResource(key: "Audio.FullScreen.Button.Download", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Downloaded
      static let audioFullScreenButtonDownloaded = Rswift.StringResource(key: "Audio.FullScreen.Button.Downloaded", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Downloading
      static let audioFullScreenButtonDownloading = Rswift.StringResource(key: "Audio.FullScreen.Button.Downloading", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: EDIT PREPARATION LIST
      static let prepareEditPreparationList = Rswift.StringResource(key: "Prepare.edit.preparation.list", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ENTER CODE
      static let signingDigitCheckTitle = Rswift.StringResource(key: "signing.digit.check.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ENTER EMAIL
      static let signingEmailCheckTitle = Rswift.StringResource(key: "signing.email.check.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: EXCLUSIVE CONTENT
      static let headerTitleExclusiveContent = Rswift.StringResource(key: "Header.Title.Exclusive.Content", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit QOT Partner
      static let meSectorMyWhyPartnersEditTitle = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Edit.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit To Be Vision
      static let alertButtonTitleEditVision = Rswift.StringResource(key: "Alert.Button.Title.Edit.Vision", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit your personal info and settings
      static let myQotProfileSubtitle = Rswift.StringResource(key: "MyQot.Profile.Subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email
      static let settingsGeneralEmailTitle = Rswift.StringResource(key: "Settings.General.Email.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email is not setup on your device
      static let alertMessageEmailNotSetup = Rswift.StringResource(key: "Alert.Message.Email.Not.Setup", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email not found
      static let alertTitleEmailNotFound = Rswift.StringResource(key: "Alert.Title.EmailNotFound", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email sent
      static let resetPasswordEmailSent = Rswift.StringResource(key: "ResetPassword.EmailSent", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter birthdate
      static let signingProfileErrorBirthdate = Rswift.StringResource(key: "signing.profile.error.birthdate", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter gender
      static let signingProfileErrorGender = Rswift.StringResource(key: "signing.profile.error.gender", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your device info.
      static let addSensorViewAlertPlaceholder = Rswift.StringResource(key: "AddSensorView.Alert.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your email here
      static let loginViewInputPlaceHolder = Rswift.StringResource(key: "LoginView.InputPlaceHolder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your email here
      static let resetPasswordEmailPlaceHolder = Rswift.StringResource(key: "ResetPassword.emailPlaceHolder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your password
      static let loginViewPasswordPlaceHolder = Rswift.StringResource(key: "LoginView.PasswordPlaceHolder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error
      static let alertTitleCustom = Rswift.StringResource(key: "Alert.Title.Custom", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error
      static let alertTitleUnknown = Rswift.StringResource(key: "Alert.Title.Unknown", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error
      static let meSectorMyWhyPartnersPhotoErrorTitle = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Photo.Error.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Every partner requires a 'Name', 'Surname', 'Relationship' and 'Email.'
      static let partnersAlertImcompleteMessage = Rswift.StringResource(key: "Partners.Alert.Imcomplete.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Explore now
      static let slideShowMorePromptDoneButtonTitle = Rswift.StringResource(key: "SlideShow.MorePrompt.DoneButtonTitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FAQ
      static let sidebarTitleFAQ = Rswift.StringResource(key: "Sidebar.Title.FAQ", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FEATURE REQUEST
      static let sidebarTitleFeatureRequest = Rswift.StringResource(key: "Sidebar.Title.FeatureRequest", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FITBIT
      static let sidebarSensorsMenuFitbit = Rswift.StringResource(key: "Sidebar.SensorsMenu.Fitbit", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FLIGHTS NEXT FOUR WEEKS
      static let meCardTitleTravelTrips = Rswift.StringResource(key: "Me.Card.Title.Travel.Trips", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FROM OTHER DEVICES
      static let settingsCalendarSectionOnOtherDevicesHeader = Rswift.StringResource(key: "Settings.Calendar.Section.OnOtherDevices.Header", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FROM THIS DEVICE
      static let settingsCalendarSectionOnThisDeviceHeader = Rswift.StringResource(key: "Settings.Calendar.Section.OnThisDevice.Header", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Failed to link Fitbit
      static let sidebarSensorsMenuFitbitFailure = Rswift.StringResource(key: "Sidebar.SensorsMenu.Fitbit.Failure", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Female
      static let genderFemale = Rswift.StringResource(key: "gender.female", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Female
      static let genderOther = Rswift.StringResource(key: "gender.other", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First Name
      static let settingsGeneralFirstNameTitle = Rswift.StringResource(key: "Settings.General.FirstName.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fitbit is already connected with QOT.
      static let sidebarSensorsMenuFitbitAlreadyConnectedMessage = Rswift.StringResource(key: "Sidebar.SensorsMenu.Fitbit.Already.Connected.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fitbit successfully linked
      static let sidebarSensorsMenuFitbitSuccess = Rswift.StringResource(key: "Sidebar.SensorsMenu.Fitbit.Success", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Flights
      static let meSectorTravel = Rswift.StringResource(key: "Me.Sector.Travel", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forgot password?
      static let loginViewForgotButton = Rswift.StringResource(key: "LoginView.ForgotButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forgot password?
      static let signingLoginButtonTitleForgotPassword = Rswift.StringResource(key: "signing.login.button.title.forgot.password", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forgot your password? We can help to reset it.
      static let resetPasswordForgottenPasswordMessage = Rswift.StringResource(key: "ResetPassword.ForgottenPasswordMessage", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Full
      static let learnContentItemTitleFull = Rswift.StringResource(key: "Learn.Content.Item.Title.Full", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: GENERAL
      static let sidebarSettingsMenuGeneralButton = Rswift.StringResource(key: "Sidebar.SettingsMenu.GeneralButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: GENERAL NOTES
      static let prepareReviewNotesGeneralNavbarTitle = Rswift.StringResource(key: "Prepare.Review.Notes.General.Navbar.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: GUIDE
      static let tabBarItemGuide = Rswift.StringResource(key: "Tab.Bar.Item.Guide", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: GUIDE
      static let topTabBarItemTitleGuide = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Guide", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gender
      static let genderTitle = Rswift.StringResource(key: "gender.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gender
      static let settingsGeneralGenderTitle = Rswift.StringResource(key: "Settings.General.Gender.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: General
      static let settingsTitleGeneral = Rswift.StringResource(key: "Settings.Title.General", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get the most out of QOT
      static let slideShowMorePromptMoreButtonTitle = Rswift.StringResource(key: "SlideShow.MorePrompt.MoreButtonTitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to System Settings to change your permissions.
      static let alertMessageSettingsChangePermission = Rswift.StringResource(key: "Alert.Message.Settings.ChangePermission", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go to System Settings to edit your notification settings.
      static let alertMessageSettingsChangeNotifications = Rswift.StringResource(key: "Alert.Message.Settings.Change.Notifications", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Great job! You have finished the on-boarding.
      static let slideShowCompletePromptTitle = Rswift.StringResource(key: "SlideShow.CompletePrompt.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: HEALTH KIT
      static let sidebarSensorsMenuHealthKit = Rswift.StringResource(key: "Sidebar.SensorsMenu.HealthKit", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: HIDE
      static let loginViewToggleHide = Rswift.StringResource(key: "LoginView.ToggleHide", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: HIGHLIGHTS
      static let mySprintDetailsHeaderHighlights = Rswift.StringResource(key: "MySprintDetails.Header.Highlights", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Height
      static let settingsGeneralHeightTitle = Rswift.StringResource(key: "Settings.General.Height.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hour
      static let calendarHour = Rswift.StringResource(key: "Calendar.Hour", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hours
      static let calendarHours = Rswift.StringResource(key: "Calendar.Hours", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: How do you feel today? I can help you Rule Your Impact with just a minute of your time.
      static let guideDailyPrepNotFinishedFeedback = Rswift.StringResource(key: "Guide.DailyPrep.NotFinished.Feedback", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: How do you want the person/group to feel after the event?
      static let prepareReviewNotesIntentionFeelingTitle = Rswift.StringResource(key: "Prepare.Review.Notes.Intention.Feeling.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: How do you want to be perceived during the event?
      static let prepareReviewNotesIntentionPreceivingTitle = Rswift.StringResource(key: "Prepare.Review.Notes.Intention.Preceiving.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: If there is something you wish you would have done better, what would you look like if you had done it exactly the way you envisioned?
      static let prepareReviewNotesReflectionImproveTitle = Rswift.StringResource(key: "Prepare.Review.Notes.Reflection.Improve.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Incomplete Partners
      static let partnersAlertImcompleteTitle = Rswift.StringResource(key: "Partners.Alert.Imcomplete.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Incorrect code, please try again
      static let signingDigitCheckError = Rswift.StringResource(key: "signing.digit.check.error", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Initial Interview
      static let settingsGeneralInterviewTitle = Rswift.StringResource(key: "Settings.General.Interview.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Insert the ideal amount of sleep per day
      static let dailyBriefCustomizeSleepQuestion = Rswift.StringResource(key: "DailyBrief.Customize.Sleep.Question", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Intensity
      static let meSectorIntensity = Rswift.StringResource(key: "Me.Sector.Intensity", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid username or password
      static let loginViewLoginFailed = Rswift.StringResource(key: "LoginView.LoginFailed", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: It looks like your fatigue is coming from all angles. Jet lag and sleep are the most common causes of this type of fatigue. Which of these two is more applicable to you?
      static let fatigueSymptomGeneral = Rswift.StringResource(key: "Fatigue.Symptom.General", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: It’s really important keep your focus in your sprint to reach your results and finish it in %d days. Do you want to continue where you stopped or restart it from the beginning?
      static let mySprintDetailsInfoMessageReplanSprint = Rswift.StringResource(key: "MySprintDetails.Info.Message.ReplanSprint", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LAST WEEK
      static let meSectorMyStatisticsLastWeek = Rswift.StringResource(key: "Me.Sector.My.Statistics.LastWeek", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LEARN
      static let tabBarItemLearn = Rswift.StringResource(key: "Tab.Bar.Item.Learn", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LEARN MORE
      static let prepareSubtitleLearnMore = Rswift.StringResource(key: "Prepare.Subtitle.Learn.More", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LEAVE WITHOUT SAVING
      static let mySprintDetailsNotesInfoTitleLeave = Rswift.StringResource(key: "MySprintDetailsNotes.Info.Title.Leave", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LISTEN
      static let searchFilterListen = Rswift.StringResource(key: "Search.Filter.Listen", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last Name
      static let settingsGeneralLastNameTitle = Rswift.StringResource(key: "Settings.General.LastName.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Latest What's Hot Article
      static let shortcutItemTitleWhatsHot = Rswift.StringResource(key: "shortcut.item.title.whats.hot", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Leave without saving
      static let profileConfirmationHeader = Rswift.StringResource(key: "ProfileConfirmation.header", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Less than a month since your last edit
      static let myQotVisionLessThan = Rswift.StringResource(key: "MyQot.Vision.LessThan", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Let's go!
      static let onboardingChoiceTitleLetsGo = Rswift.StringResource(key: "Onboarding.Choice.Title.Lets.Go", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Load more
      static let learnContentItemTitleRelatedArticlesLoadMore = Rswift.StringResource(key: "Learn.Content.Item.Title.Related.Articles.Load.More", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Location Services
      static let alertTitleLocationServices = Rswift.StringResource(key: "Alert.Title.LocationServices", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log in
      static let loginViewLoginButton = Rswift.StringResource(key: "LoginView.LoginButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout
      static let sidebarSettingsMenuLogoutButton = Rswift.StringResource(key: "Sidebar.SettingsMenu.LogoutButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout
      static let sidebarTitleLogout = Rswift.StringResource(key: "Sidebar.Title.Logout", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like you have a sprint in progress that ends the %@. It’s important to keep your focus to reach your current sprint goals. Would you like to stop it and start %@?
      static let mySprintDetailsInfoBodyInProgress = Rswift.StringResource(key: "MySprintDetails.Info.Body.In.Progress", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like you have a sprint in progress that ends the %@. It’s important to keep your focus to reach your current sprint goals. Would you like to stop it and start To be vision anchors?
      static let mySprintDetailsInfoMessageSprintInProgress = Rswift.StringResource(key: "MySprintDetails.Info.Message.SprintInProgress", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like you have an event coming up tomorrow. Tap on the card to prepare.
      static let guideCardPreparationSingleUnstartedTomorrowContent = Rswift.StringResource(key: "guide.card.preparation.single-unstarted-tomorrow.content", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like you have several events coming up tomorrow. Tap on the card to prepare.
      static let guideCardPreparationMultipleUnstartedTomorrowContent = Rswift.StringResource(key: "guide.card.preparation.multiple-unstarted-tomorrow.content", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ME
      static let tabBarItemMe = Rswift.StringResource(key: "Tab.Bar.Item.Me", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MEMBER SINCE
      static let sidebarUserTitlesMemberSince = Rswift.StringResource(key: "Sidebar.User.Titles.Member.Since", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MONTH
      static let activityViewMonthButton = Rswift.StringResource(key: "ActivityView.MonthButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MONTH
      static let chartInitialStateMonth = Rswift.StringResource(key: "Chart.Initial.State.Month", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MONTH
      static let meSectorMyStatisticsMonth = Rswift.StringResource(key: "Me.Sector.My.Statistics.Month", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MY HEADLINE
      static let myToBeVisionTitlePlaceholder = Rswift.StringResource(key: "MyToBeVisionTitlePlaceholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MY NOTES
      static let mySprintDetailsHeaderMyNotes = Rswift.StringResource(key: "MySprintDetails.Header.MyNotes", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MY PLAN
      static let mySprintDetailsHeaderMyPlan = Rswift.StringResource(key: "MySprintDetails.Header.MyPlan", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MY PREP LIST
      static let preparePrepareEventsMyPrepList = Rswift.StringResource(key: "Prepare.PrepareEvents.MyPrepList", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MY PREPARATIONS
      static let myQotHeaderTitle = Rswift.StringResource(key: "MyQot.header.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MY QOT
      static let myQotTitle = Rswift.StringResource(key: "MyQot.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MY SUPPORT TEAM
      static let meSectorMyWhyPartnersHeader = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Header", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MY TEAM AVG.
      static let chartInitialStateTeamAvg = Rswift.StringResource(key: "Chart.Initial.State.Team.Avg", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Male
      static let genderMale = Rswift.StringResource(key: "gender.male", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Max Limit
      static let meSectorMyWhySelectWeeklyChoicesMaxChoiceAlertTitle = Rswift.StringResource(key: "Me.Sector.My.Why.Select.Weekly.Choices.Max.Choice.Alert.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Me at my best. Getting Chills? Rule Your Impact!
      static let meSectorMyWhyVisionMessagePlaceholder = Rswift.StringResource(key: "Me.Sector.My.Why.Vision.Message.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Meeting load history
      static let meCardTitleMeetingsIncrease = Rswift.StringResource(key: "Me.Card.Title.Meetings.Increase", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Meetings
      static let meSectorMeetings = Rswift.StringResource(key: "Me.Sector.Meetings", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Minute
      static let calendarMinute = Rswift.StringResource(key: "Calendar.Minute", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Minutes
      static let calendarMinutes = Rswift.StringResource(key: "Calendar.Minutes", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Month
      static let calendarMonth = Rswift.StringResource(key: "Calendar.Month", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Months
      static let calendarMonths = Rswift.StringResource(key: "Calendar.Months", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: More than 
      static let myQotVisionMorethan = Rswift.StringResource(key: "MyQot.Vision.Morethan", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Movement Frequency
      static let meCardTitleActivityRatio = Rswift.StringResource(key: "Me.Card.Title.Activity.Ratio", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Data
      static let topTabBarItemTitleMeMyData = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Me.MyData", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Prep
      static let topTabBarItemTitlePerparePrep = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Perpare.Prep", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My TO BE VISION
      static let myToBeVisionDescriptionPlaceholder = Rswift.StringResource(key: "MyToBeVisionDescriptionPlaceholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Why
      static let topTabBarItemTitleMeMyWhy = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Me.MyWhy", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEXT
      static let morningControllerNextButton = Rswift.StringResource(key: "MorningController.nextButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEXT UP
      static let learnArticleItemNextUp = Rswift.StringResource(key: "Learn.Article.Item.NextUp", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEXT WEEK
      static let meSectorMyStatisticsNextWeek = Rswift.StringResource(key: "Me.Sector.My.Statistics.NextWeek", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NO EVENTS AVAILABE, PLEASE ADD EVENT
      static let preparePrepareEventsNoUpcomingEventsSynchronisableCalendar = Rswift.StringResource(key: "Prepare.PrepareEvents.NoUpcomingEventsSynchronisableCalendar", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NO EVENTS AVAILABLE, PLEASE SYNC CALENDARS
      static let preparePrepareEventsNoSynchronisableCalendars = Rswift.StringResource(key: "Prepare.PrepareEvents.NoSynchronisableCalendars", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NOTES
      static let topTabBarItemTitlePerpareNotes = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Perpare.Notes", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NOTIFICATIONS
      static let sidebarSettingsMenuNotificationsButton = Rswift.StringResource(key: "Sidebar.SettingsMenu.NotificationsButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NUMBER OF FLIGHTS
      static let meCardTitleTravelAverage = Rswift.StringResource(key: "Me.Card.Title.Travel.Average", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NUMBER OF TRIPS WITH TIME ZONE CHANGED
      static let meCardTitleTravelTimeZoneChange = Rswift.StringResource(key: "Me.Card.Title.Travel.Time.Zone.Change", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Name
      static let meSectorMyWhyPartnersName = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Name", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let signingCountryBottomButtonTitle = Rswift.StringResource(key: "signing.country.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let signingEmailCheckBottomButtonTitle = Rswift.StringResource(key: "signing.email.check.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let signingLoginBottomButtonTitle = Rswift.StringResource(key: "signing.login.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Access
      static let alertTitleCalendarNoAccess = Rswift.StringResource(key: "Alert.Title.Calendar.No.Access", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Authorization
      static let alertTitleNotificationsNotAuthorized = Rswift.StringResource(key: "Alert.Title.Notifications.Not.Authorized", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Choice
      static let meSectorMyWhyWeeklyChoicesNoChoiceTitle = Rswift.StringResource(key: "Me.Sector.My.Why.Weekly.Choices.NoChoice.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Internet Connection
      static let alertTitleNoNetworkConnection = Rswift.StringResource(key: "Alert.Title.NoNetworkConnection", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Weekly Choices selected.
      static let alertMessageCouldNotSendEmailWeeklyChoices = Rswift.StringResource(key: "Alert.Message.Could.Not.Send.Email.WeeklyChoices", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No data
      static let sidebarSensorsMenuSeonsorsNoData = Rswift.StringResource(key: "Sidebar.SensorsMenu.Seonsors.NoData", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No human being can outperform their self-image, yet you have not created yours. I would love to help you.
      static let guideToBeVisionNotFisishedMessage = Rswift.StringResource(key: "Guide.ToBeVision.NotFisished.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No network connection
      static let alertMessageNoNetworkConnection = Rswift.StringResource(key: "Alert.Message.NoNetworkConnection", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No preps saved
      static let prepareMyPrepNoSavePreparations = Rswift.StringResource(key: "Prepare.MyPrep.NoSavePreparations", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No weekly choices have been saved yet.
      static let weeklyChoicesNoContent = Rswift.StringResource(key: "Weekly.Choices.No.Content", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No worries. If you change your mind, you can change this access in your preferences at any time
      static let onboardingChatItemShowSettings = Rswift.StringResource(key: "Onboarding.Chat.Item.Show.Settings", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notice!
      static let alertTitleCameraNotAvailable = Rswift.StringResource(key: "Alert.Title.Camera.Not.Available", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notifications
      static let settingsTitleNotifications = Rswift.StringResource(key: "Settings.Title.Notifications", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Number of Meetings
      static let meCardTitleMeetingsNumber = Rswift.StringResource(key: "Me.Card.Title.Meetings.Number", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Number of Upcoming Peak Performances
      static let meCardTitlePeakPerformacneUpcoming = Rswift.StringResource(key: "Me.Card.Title.Peak.Performacne.Upcoming", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let addSensorViewAlertFeedbackSuccessOK = Rswift.StringResource(key: "AddSensorView.Alert.Feedback.Success.OK", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let alertButtonTitleOk = Rswift.StringResource(key: "Alert.Button.Title.Ok", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let meSectorMyWhyPartnersPhotoErrorOKButton = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Photo.Error.OK.Button", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let meSectorMyWhySelectWeeklyChoicesMaxChoiceAlertButton = Rswift.StringResource(key: "Me.Sector.My.Why.Select.Weekly.Choices.Max.Choice.Alert.Button", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OURA RING
      static let sidebarSensorsMenuOuraRing = Rswift.StringResource(key: "Sidebar.SensorsMenu.OuraRing", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Old password isn't valid
      static let changePasswordIssueOldPasswordNotValid = Rswift.StringResource(key: "Change.Password.Issue.Old.Password.Not.Valid", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open Settings
      static let alertButtonTitleOpenSettings = Rswift.StringResource(key: "Alert.Button.Title.Open.Settings", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PAUSE YOUR SPRINT
      static let mySprintDetailsInfoTitlePauseSprint = Rswift.StringResource(key: "MySprintDetails.Info.Title.PauseSprint", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PERFORMANCE
      static let learnContentPerformanceTitle = Rswift.StringResource(key: "Learn.Content.Performance.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PERFORMANCE REMINDERS
      static let settingsNotificationsStrategiesTitle = Rswift.StringResource(key: "Settings.Notifications.Strategies.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PERMISSIONS
      static let sidebarTitlePermission = Rswift.StringResource(key: "Sidebar.Title.Permission", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PERSONAL AVG.
      static let meSectorMyStatisticsPersonalAverageDefault = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Average.Default", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PREPARATION
      static let topTabBarItemTitlePerparePreparation = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Perpare.Preparation", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PREPARATION LIST
      static let prepareHeaderPreparationList = Rswift.StringResource(key: "Prepare.header.preparation.list", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PREPARATIONS
      static let prepareChatHeaderPreparations = Rswift.StringResource(key: "Prepare.Chat.Header.Preparations", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PREPARATIONS COMPLETED
      static let prepareContentCompleted = Rswift.StringResource(key: "Prepare.Content.Completed", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PREPARE
      static let guideCardPreparationSubtitle = Rswift.StringResource(key: "guide.card.preparation.subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PREPARE
      static let tabBarItemPrepare = Rswift.StringResource(key: "Tab.Bar.Item.Prepare", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PREVIOUS
      static let morningControllerPreviousButton = Rswift.StringResource(key: "MorningController.previousButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PRIVACY POLICY
      static let settingsSecurityPrivacyPolicyTitle = Rswift.StringResource(key: "Settings.Security.Privacy.Policy.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PROFILE DETAILS
      static let signingProfileTitle = Rswift.StringResource(key: "signing.profile.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password doesn't match the confirmation
      static let changePasswordIssueConfirmNotMatch = Rswift.StringResource(key: "Change.Password.Issue.Confirm.Not.Match", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password is not secure enough, please review guidelines below
      static let signingPasswordError = Rswift.StringResource(key: "signing.password.error", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password reset
      static let signingLoginHudTitlePasswordReset = Rswift.StringResource(key: "signing.login.hud.title.password.reset", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Past preps
      static let prepareMyPrepTableviewSectionHeaderPastPreparations = Rswift.StringResource(key: "Prepare.MyPrep.Tableview.section.header.PastPreparations", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pause Sprint
      static let mySprintDetailsButtonPauseSprint = Rswift.StringResource(key: "MySprintDetails.Button.PauseSprint", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Peak Performance
      static let meSectorPeakPerformance = Rswift.StringResource(key: "Me.Sector.Peak.Performance", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Perceived Load
      static let meCardTitleIntensityLoad = Rswift.StringResource(key: "Me.Card.Title.Intensity.Load", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Perceived Recovery
      static let meCardTitleIntensityRecovery = Rswift.StringResource(key: "Me.Card.Title.Intensity.Recovery", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pick %d to continue
      static let buttonTitlePick = Rswift.StringResource(key: "Button.Title.Pick", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please create your To Be Vision first
      static let meSectorMyWhyPartnersShareMissingMyToBeVisionAlert = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Share.MissingMyToBeVision.alert", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please define your 'To Be Vision' first
      static let alertMessageCouldNotSendEmailToBeVision = Rswift.StringResource(key: "Alert.Message.Could.Not.Send.Email.ToBeVision", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please edit the name and press save
      static let alertMessageEditPreparationName = Rswift.StringResource(key: "Alert.Message.EditPreparationName", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please ensure your device is connected to the internet to access this file.
      static let alertMessageNoNetworkConnectionFile = Rswift.StringResource(key: "Alert.Message.NoNetworkConnectionFile", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter a first name.
      static let signingProfileErrorFirstName = Rswift.StringResource(key: "signing.profile.error.first.name", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter a last name.
      static let signingProfileErrorLastName = Rswift.StringResource(key: "signing.profile.error.last.name", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter your password.
      static let signingLoginErrorMessagePassword = Rswift.StringResource(key: "signing.login.error.message.password", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please open your settings to enable permissions for this action
      static let alertPermissionNotGrantedMessage = Rswift.StringResource(key: "Alert.PermissionNotGranted.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please try again
      static let alertMessageEmailNotFound = Rswift.StringResource(key: "Alert.Message.EmailNotFound", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please try it again.
      static let partnersAlertDeleteErrorMessage = Rswift.StringResource(key: "Partners.Alert.DeleteError.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please wait while we configure what's hot
      static let articleLoading = Rswift.StringResource(key: "Article.Loading", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please wait while we configure your data
      static let loadingData = Rswift.StringResource(key: "Loading.Data", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please wait while we configure your guide
      static let guideLoading = Rswift.StringResource(key: "Guide.Loading", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please wait while we configure your preparation
      static let meMyPrepLoading = Rswift.StringResource(key: "Me.My.Prep.Loading", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please wait while we configure your universe
      static let meMyUniverseLoading = Rswift.StringResource(key: "Me.My.Universe.Loading", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prefer not to say
      static let genderPreferNotToSay = Rswift.StringResource(key: "gender.prefer.not.to.say", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prepare for an event
      static let shortcutItemTitlePrepare = Rswift.StringResource(key: "shortcut.item.title.prepare", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prepare for your upcoming event
      static let guideCardPreparationSingleStartedTodayTitle = Rswift.StringResource(key: "guide.card.preparation.single-started-today.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prepare for your upcoming event
      static let guideCardPreparationSingleUnstartedTodayTitle = Rswift.StringResource(key: "guide.card.preparation.single-unstarted-today.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prepare for your upcoming event
      static let guideCardPreparationSingleUnstartedTomorrowTitle = Rswift.StringResource(key: "guide.card.preparation.single-unstarted-tomorrow.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prepare for your upcoming events
      static let guideCardPreparationMultipleStartedTodayTitle = Rswift.StringResource(key: "guide.card.preparation.multiple-started-today.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prepare for your upcoming events
      static let guideCardPreparationMultipleUnstartedTodayTitle = Rswift.StringResource(key: "guide.card.preparation.multiple-unstarted-today.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prepare for your upcoming events
      static let guideCardPreparationMultipleUnstartedTomorrowTitle = Rswift.StringResource(key: "guide.card.preparation.multiple-unstarted-tomorrow.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Profile
      static let sidebarTitleProfile = Rswift.StringResource(key: "Sidebar.Title.Profile", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Push Notifications are not authorized for QOT. To enabled Push Notifications open Settings and enable them. 
      static let alertMessageNotificationsNotAuthorized = Rswift.StringResource(key: "Alert.Message.Notifications.Not.Authorized", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Put any additional thoughts into writing. Some examples might include your event To Be Vision, details of what your event's space looks like, or key people at your event.
      static let prepareNotesPlaceholder = Rswift.StringResource(key: "Prepare.Notes.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Put your thoughts into writing (i.e. I listened well; I didn't overreact; I was prepared).
      static let prepareReviewNotesReflectionWishPlaceholder = Rswift.StringResource(key: "Prepare.Review.Notes.Reflection.Wish.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Put your thoughts into writing (i.e. I listened well; I was calm; I answered questions clearly).
      static let prepareReviewNotesReflectionBrainSuccessPlaceholder = Rswift.StringResource(key: "Prepare.Review.Notes.Reflection.BrainSuccess.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Put your thoughts into writing (i.e. I'm not perfect; your opinion matters; I'm committed to excellence).
      static let prepareReviewNotesIntentionsPlaceholder = Rswift.StringResource(key: "Prepare.Review.Notes.Intentions.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Put your thoughts into writing (i.e. calm, engaged, confident, empathetic).
      static let prepareReviewNotesIntentionsPerceivedPlaceholder = Rswift.StringResource(key: "Prepare.Review.Notes.Intentions.Perceived.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Put your thoughts into writing (i.e. heard, loved, valued, important).
      static let prepareReviewNotesIntentionsPersonGroupPlaceholder = Rswift.StringResource(key: "Prepare.Review.Notes.Intentions.PersonGroup.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT BENEFITS
      static let sidebarTitleBenefits = Rswift.StringResource(key: "Sidebar.Title.Benefits", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT Coach
      static let topTabBarItemTitlePerpareCoach = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Perpare.Coach", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT FOUNDATION
      static let guideCardFoundationSubtitle = Rswift.StringResource(key: "guide.card.foundation.subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT Partners
      static let meSectorMyWhyPartnersTitle = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT TOOLS
      static let sidebarTitleTools = Rswift.StringResource(key: "Sidebar.Title.Tools", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT USAGE
      static let sidebarUserTitlesMemberQOTUsage = Rswift.StringResource(key: "Sidebar.User.Titles.Member.QOT.Usage", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT analyzes your calendar to determine how much time you spend in meetings throughout your day. The length of time you spend in meetings helps determine your overall load, which requires preparation if you are going to Rule Your Meetings. It also helps you become more purposeful in the way you design your schedule and prepare for certain types of meetings. On days where your meetings are longer than normal, you may want to schedule oscillation breaks and transitions between your peak performances.
      static let meChartInfoTextMeetingsAverageLength = Rswift.StringResource(key: "Me.Chart.Info.Text.Meetings.Average.Length", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT analyzes your calendar to determine how much time you spend in meetings throughout your day. The length of time you spend in meetings helps determine your overall load, which requires preparation if you are going to Rule Your Meetings. It also helps you become more purposeful in the way you design your schedule and prepare for certain types of meetings. On days where your meetings are longer than normal, you may want to schedule oscillation breaks and transitions between your peak performances.
      static let meChartInfoTextMeetingsHoursSpent = Rswift.StringResource(key: "Me.Chart.Info.Text.Meetings.Hours.Spent", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT analyzes your calendar to determine the average time you have between meetings for the day. QOT then gives you a score between 1 (little-to-no time between meetings) and 10 (15 or more minutes between meetings on average). We recommend taking an average of 15 minutes between your meetings to plan for oscillation, preparation, and reflection. These three key strategies are critical to helping you Rule Your QOT. When planning your day, try reviewing your meetings to see if you can fit in a few more 15-minute breaks. The closer your average is to 15 minutes, the closer your graph will be to becoming a complete circle. If your average time between meetings is 15 minutes or greater, you will receive a score of 10 and have a completed circle.
      static let meChartInfoTextMeetingsAverageTimeBetween = Rswift.StringResource(key: "Me.Chart.Info.Text.Meetings.Average.Time.Between", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT could not create the event for the selected calendar. Please choose another calendar or enable Calendar Synchronization in Settings.
      static let alertMessageCalendarNotSynced = Rswift.StringResource(key: "Alert.message.calendar.not.synced", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT could not create the event for the selected date. Please choose date in next 30 days.
      static let alertMessageEventDateNotAvailable = Rswift.StringResource(key: "Alert.message.event.date.not.available", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT does not have access to your Photos or Videos. To enable access open Setting on your device
      static let alertBodyCameraNotAvailable = Rswift.StringResource(key: "Alert.Body.Camera.Not.Available", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT does not have access to your camera. To enable access, tap Settings and turn on Camera.
      static let alertCameraPermissionNotGrantedMessage = Rswift.StringResource(key: "Alert.CameraPermissionNotGranted.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT does not have access to your photos. To enable access, tap Settings and turn on Photos.
      static let alertPhotosPermissionNotGrantedMessage = Rswift.StringResource(key: "Alert.PhotosPermissionNotGranted.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT needs to download more data. Please try again later
      static let alertNotSyncedMessage = Rswift.StringResource(key: "Alert.NotSynced.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT reviews the calendars you have allowed access to determine how many meetings you have throughout your week. The number of meetings you have today helps determine your overall meeting load, which requires preparation if you are going to Rule Your Meetings. It also helps you become more purposeful in the way you design your schedule and prepare for your meetings. We have found that more than 6 meetings a day makes it very difficult to prepare properly and to have adequate thinking, problem solving, and working time. On days when your meeting load is high you may want to consider activating your Tough Day plan.
      static let meChartInfoTextMeetingsAverageNumber = Rswift.StringResource(key: "Me.Chart.Info.Text.Meetings.Average.Number", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT reviews your calendar and meeting load history to help you see how your current week's load compares to your previous week. The number of meetings you have each week helps you become more purposeful in the way you design your schedule and how you prepare for the week ahead. On weeks where your meeting load is high, you may want to schedule recovery time throughout the week to ensure you Rule Your Impact even during your busiest weeks.
      static let meChartInfoTextMeetingsIncrease = Rswift.StringResource(key: "Me.Chart.Info.Text.Meetings.Increase", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT uses the input from your Daily Preparation Minute to determine your perceived load each day. It then compiles this data to help you get a snapshot of your current week and month. Your average score helps bring self-awareness to how you perceive the intensity of your days. This will help you become more strategic with designing your energy, focus, and recovery needs. The graph displays red bars during periods of high intensity and white bars during periods of moderate to low intensity.
      static let meChartInfoTextIntensityLoad = Rswift.StringResource(key: "Me.Chart.Info.Text.Intensity.Load", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT uses the input from your Daily Preparation Minute to determine your perceived recovery each day. It then compiles this data to help you get a snapshot of your current week and month. Your average score helps bring self-awareness as to how you perceive your recovery state in relation to your perceived load that day. Ideally, your perceived recovery should be equal to or greater than your perceived load. This would mean you created a performance buffer and you are ready for the challenges ahead. If your perceived recovery score is less than your perceived load, you should increase the amount of your sleep, improve the quality of your sleep, and improve your overall recovery plan. You should also examine how you are strategically scheduling your days.
      static let meChartInfoTextIntensityRecovery = Rswift.StringResource(key: "Me.Chart.Info.Text.Intensity.Recovery", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT® uses your calendar and daily input to determine how many peak performances you have coming up this week and next week as well as your average number of peak performances per week. This data will help you better prepare for your upcoming events and customize your strategies accordingly. The personal average helps bring self-awareness as to how many peak performances you typically have compared to your current load and your future ahead.
      static let meChartInfoTextPeakPerformanceUpcoming = Rswift.StringResource(key: "Me.Chart.Info.Text.Peak.Performance.Upcoming", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT® uses your calendar and daily input to determine your average number of many peak performances on a monthly and weekly basis. This data helps bring self-awareness as to how many peak performances you typically have compared to your current load and future load ahead.
      static let meChartInfoTextPeakPerformanceAverage = Rswift.StringResource(key: "Me.Chart.Info.Text.Peak.Performance.Average", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT® uses your calendar to determine your amount of flights you have for the next four weeks. This data helps bring self-awareness as to how many flights you have and strategically plan your weeks ahead. Make sure to apply High Performance Travel strategies from your QOT® coach for each flight.
      static let meChartInfoTextTravelTrips = Rswift.StringResource(key: "Me.Chart.Info.Text.Travel.Trips", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QOT® uses your calendar to determine your amount of flights you have in the past four weeks and the year. This data helps bring self-awareness as to how many flights you have. Make sure to apply High Performance Travel strategies from your QOT® coach for each flight.
      static let meChartInfoTextTravelAverageNumber = Rswift.StringResource(key: "Me.Chart.Info.Text.Travel.Average.Number", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: READ
      static let searchFilterRead = Rswift.StringResource(key: "Search.Filter.Read", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: REFLECT ON SUCCESS
      static let prepareHeaderReflectOnSuccess = Rswift.StringResource(key: "Prepare.header.reflect.on.success", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: REFLECT ON SUCCESS
      static let prepareReviewNotesReflectionsNavbarTitle = Rswift.StringResource(key: "Prepare.Review.Notes.Reflections.Navbar.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: RELATED ARTICLES
      static let learnContentItemTitleRelatedArticles = Rswift.StringResource(key: "Learn.Content.Item.Title.Related.Articles", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: RELATED CONTENT
      static let learnArticleItemRelatedContent = Rswift.StringResource(key: "Learn.Article.Item.RelatedContent", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: REPLAN YOUR SPRINT
      static let mySprintDetailsInfoTitleReplanSprint = Rswift.StringResource(key: "MySprintDetails.Info.Title.ReplanSprint", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: RULE YOUR IMPACT
      static let splashViewRuleYourImpact = Rswift.StringResource(key: "splash.view.rule.your.impact", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rate my TBV
      static let rateViewControllerRateMyTBVButton = Rswift.StringResource(key: "RateViewController.rateMyTBVButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Read more
      static let prepareContentReadMore = Rswift.StringResource(key: "Prepare.Content.ReadMore", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Read my To Be Vision
      static let siriShortcutsToBeVisionSuggestedInvocation = Rswift.StringResource(key: "SiriShortcuts.ToBeVision.suggestedInvocation", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Relationship
      static let meSectorMyWhyPartnersRelationship = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Relationship", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove
      static let buttonTitleRemove = Rswift.StringResource(key: "Button.Title.Remove", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove strategy
      static let alertTitlePreparationRemoveStrategy = Rswift.StringResource(key: "Alert.Title.Preparation.Remove.Strategy", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Request activity tracker
      static let sidebarSensorsMenuRequestSensor = Rswift.StringResource(key: "Sidebar.SensorsMenu.RequestSensor", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reset Password
      static let alertTitleResetPassword = Rswift.StringResource(key: "Alert.Title.Reset.Password", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reset my password
      static let resetPasswordResetMyPassword = Rswift.StringResource(key: "ResetPassword.ResetMyPassword", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Restart sprint
      static let mySprintDetailsButtonRestartSprint = Rswift.StringResource(key: "MySprintDetails.Button.RestartSprint", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Retry sending verification code?
      static let signingDigitCheckButtonTitleResendCode = Rswift.StringResource(key: "signing.digit.check.button.title.resend.code", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Review My Data
      static let shortcutItemTitleMeUniverse = Rswift.StringResource(key: "shortcut.item.title.me.universe", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Room for additional thoughts
      static let prepareReviewNotesGeneralTitle = Rswift.StringResource(key: "Prepare.Review.Notes.General.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SECURITY AND LEGAL
      static let sidebarSettingsMenuSecurityButton = Rswift.StringResource(key: "Sidebar.SettingsMenu.SecurityButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SETTINGS
      static let settingsTitle = Rswift.StringResource(key: "Settings.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SETTINGS
      static let sidebarSettingsMenuSettings = Rswift.StringResource(key: "Sidebar.SettingsMenu.Settings", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SHOW
      static let loginViewToggleShow = Rswift.StringResource(key: "LoginView.ToggleShow", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SIGN IN
      static let signingLoginTitle = Rswift.StringResource(key: "signing.login.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SIRI SHORTCUTS
      static let settingsSiriShortcutsTitle = Rswift.StringResource(key: "Settings.SiriShortcuts.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SKIP
      static let buttonTitleSkip = Rswift.StringResource(key: "Button.Title.Skip", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SPRINT TASKS
      static let mySprintDetailsHeaderSprintTasks = Rswift.StringResource(key: "MySprintDetails.Header.SprintTasks", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: START
      static let buttonTitleStart = Rswift.StringResource(key: "Button.Title.Start", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: STRATEGIES
      static let headerTitleStrategies = Rswift.StringResource(key: "Header.Title.Strategies", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: STRATEGIES TO CARRY FORWARD
      static let mySprintDetailsHeaderStrategies = Rswift.StringResource(key: "MySprintDetails.Header.Strategies", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SUGGESTED SOLUTIONS
      static let headerTitleSuggestedStrategies = Rswift.StringResource(key: "Header.Title.Suggested.Strategies", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SYNCED CALENDARS
      static let sidebarTitleCalendars = Rswift.StringResource(key: "Sidebar.Title.Calendars", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let alertButtonTitleSave = Rswift.StringResource(key: "Alert.Button.Title.Save", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let mySprintDetailsNotesButtonSave = Rswift.StringResource(key: "MySprintDetailsNotes.Button.Save", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save & Continue
      static let alertButtonTitleSaveAndContinue = Rswift.StringResource(key: "Alert.Button.Title.Save.and.Continue", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save & Continue
      static let buttonTitleSaveContinue = Rswift.StringResource(key: "Button.Title.Save.Continue", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save Preparation
      static let preparePrepareEventsSaveThisPreparation = Rswift.StringResource(key: "Prepare.PrepareEvents.SaveThisPreparation", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save changes
      static let buttonTitleSaveChanges = Rswift.StringResource(key: "Button.Title.Save.Changes", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let sidebarTitleSearch = Rswift.StringResource(key: "Sidebar.Title.Search", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search QOT content
      static let searchPlaceholder = Rswift.StringResource(key: "Search.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Security
      static let settingsTitleSecurity = Rswift.StringResource(key: "Settings.Title.Security", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select your %@ strategies you want to challenge this week
      static let meSectorMyWhySelectWeeklyChoicesHeader = Rswift.StringResource(key: "Me.Sector.My.Why.Select.Weekly.Choices.Header", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Selected Strategies %@/%@
      static let prepareNavigationTitleAddRemoveStrategies = Rswift.StringResource(key: "Prepare.Navigation.Title.Add.Remove.Strategies", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send
      static let addSensorViewAlertSend = Rswift.StringResource(key: "AddSensorView.Alert.Send", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send Notification?
      static let alertTitlePartnerInvite = Rswift.StringResource(key: "Alert.Title.Partner.Invite", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send email
      static let settingsChangePasswordButton = Rswift.StringResource(key: "Settings.Change.Password.Button", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sensor connection state is pending. Please try again in a few minutes.
      static let meChartAddSensorPending = Rswift.StringResource(key: "Me.Chart.Add.Sensor.Pending", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set your calendar
      static let meChartInfoButtonTitleNavigateToCalendar = Rswift.StringResource(key: "Me.Chart.Info.Button.Title.Navigate.To.Calendar", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set your password to access Tignum QOT
      static let signingPasswordSubtitle = Rswift.StringResource(key: "signing.password.subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let alertButtonTitleSettings = Rswift.StringResource(key: "Alert.Button.Title.Settings", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share QOT progress with your circle of three.
      static let meSectorMyWhyPartnersCellEmptyState = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Cell.Empty.State", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share content
      static let meSectorMyWhyPartnersCellShareContent = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Cell.Share.Content", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show me the latest What's Hot? article
      static let siriShortcutsWhatsHotArticleSuggestedInvocation = Rswift.StringResource(key: "SiriShortcuts.WhatsHotArticle.suggestedInvocation", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show my Morning Interview feedback
      static let siriShortcutsDailyPrepSuggestedInvocation = Rswift.StringResource(key: "SiriShortcuts.DailyPrep.suggestedInvocation", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skip
      static let rateViewControllerSkipButton = Rswift.StringResource(key: "RateViewController.skipButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sleep
      static let meSectorSleep = Rswift.StringResource(key: "Me.Sector.Sleep", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sleep Quality
      static let meCardTitleSleepQuality = Rswift.StringResource(key: "Me.Card.Title.Sleep.Quality", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sleep Quantity
      static let meCardTitleSleepQuantity = Rswift.StringResource(key: "Me.Card.Title.Sleep.Quantity", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Something else?
      static let addSensorViewAlertTitle = Rswift.StringResource(key: "AddSensorView.Alert.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Start QOT
      static let slideShowCompletePromptDoneButtonTitle = Rswift.StringResource(key: "SlideShow.CompletePrompt.DoneButtonTitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Start now or learn a few more steps to learn how to get the most out of QOT.
      static let slideShowMorePromptSubtitle = Rswift.StringResource(key: "SlideShow.MorePrompt.Subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Start sprint
      static let mySprintDetailsButtonStartSprint = Rswift.StringResource(key: "MySprintDetails.Button.StartSprint", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Support
      static let settingsGeneralSupportTitle = Rswift.StringResource(key: "Settings.General.Support.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Support
      static let sidebarTitleSupport = Rswift.StringResource(key: "Sidebar.Title.Support", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Surname
      static let meSectorMyWhyPartnersSurname = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Surname", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sync Calendars
      static let preparePrepareEventsSyncCalendarEvents = Rswift.StringResource(key: "Prepare.PrepareEvents.SyncCalendarEvents", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Synchronized Calendars
      static let settingsGeneralCalendarTitle = Rswift.StringResource(key: "Settings.General.Calendar.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Syncing...
      static let sidebarSensorsMenuSensorsSyncing = Rswift.StringResource(key: "Sidebar.SensorsMenu.Sensors.Syncing", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TERMS AND CONDITIONS
      static let settingsSecurityTermsTitle = Rswift.StringResource(key: "Settings.Security.Terms.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: THIS WEEK
      static let meSectorMyStatisticsThisWeek = Rswift.StringResource(key: "Me.Sector.My.Statistics.This.Week", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TO BE VISION
      static let myQOTToBeVisionTitle = Rswift.StringResource(key: "MyQOT.ToBeVision.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TODAY
      static let meSectorMyStatisticsToday = Rswift.StringResource(key: "Me.Sector.My.Statistics.Today", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TOOLS
      static let searchFilterTools = Rswift.StringResource(key: "Search.Filter.Tools", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TUTORIAL
      static let settingsGeneralTutorialTitle = Rswift.StringResource(key: "Settings.General.Tutorial.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TUTORIAL
      static let sidebarTitleIntroSliders = Rswift.StringResource(key: "Sidebar.Title.Intro.Sliders", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TUTORIAL
      static let topTabBarItemTitleTutorial = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Tutorial", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Take a Picture
      static let imagePickerOptionsButtonCamera = Rswift.StringResource(key: "ImagePicker.Options.Button.Camera", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Telephone
      static let settingsGeneralTelephoneTitle = Rswift.StringResource(key: "Settings.General.Telephone.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thank you, if you give me a minute, I will give you my first analysis
      static let onboardingChatItemLastStep = Rswift.StringResource(key: "Onboarding.Chat.Item.Last.Step", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thank you. I prefer to give you access later.
      static let onboardingChoiceTitleAccessLater = Rswift.StringResource(key: "Onboarding.Choice.Title.Access.Later", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thank you. I prefer to give you access later.
      static let onboardingChoiceTitleAccessLaterWhy = Rswift.StringResource(key: "Onboarding.Choice.Title.Access.Later.Why", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thank you. Yes, I give you confidential access to all.
      static let onboardingChoiceTitleAccessAllWhy = Rswift.StringResource(key: "Onboarding.Choice.Title.Access.All.Why", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thanks for your feedback
      static let addSensorViewAlertFeedbackTitle = Rswift.StringResource(key: "AddSensorView.Alert.Feedback.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The Learn area contains great content on all of the QOT 55 strategies. You can go there to learn, review, or deep dive into any of the strategies. This Learn area also hosts your “What’s Hot” portal where we periodically place new information that we feel you would love.
      static let tutorialLearnText = Rswift.StringResource(key: "Tutorial.Learn.Text", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The Me area is where we house all of your data, your To Be Vision, your support team, and any other information that pertains only to you. This area is always growing so we recommend you visit it often.
      static let tutorialMeText = Rswift.StringResource(key: "Tutorial.Me.Text", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The Prepare area is your QOT game changer area. In this area you will find your normal day and rough day plans but also you can prepare for any event you have coming up where you want to improve your QOT and the QOT of those around you.
      static let tutorialPrepareText = Rswift.StringResource(key: "Tutorial.Prepare.Text", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The camera is not currently available on this device
      static let alertCameraNotAvailableMessage = Rswift.StringResource(key: "Alert.CameraNotAvailable.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The sprint starts on %@. Come back on the first sprintday and you will have access to your tasks.
      static let mySprintDetailsInfoTextActive = Rswift.StringResource(key: "MySprintDetails.Info.Text.Active", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was a problem updating your profile image. Please try again
      static let meSectorMyWhyPartnersPhotoErrorMessage = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Photo.Error.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This Week's Average Time in Meetings
      static let meSectorMyStatisticsPersonalAverageLengthOfMeetings = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Average.Length.Of.Meetings", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This Week's Average Time in Meetings
      static let meSectorMyStatisticsPersonalMeetingsLength = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Meetings.Length", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This Week’s Average Number of Meetings
      static let meSectorMyStatisticsPersonalAverageNumberOfMeetings = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Average.Number.Of.Meetings", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This app does not have access to your calendars. You can enable access in Privacy Settings
      static let alertMessageCalendarNoAccess = Rswift.StringResource(key: "Alert.Message.Calendar.No.Access", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This content is currently unavailable. Please check back later.
      static let alertMessageNoContent = Rswift.StringResource(key: "Alert.Message.NoContent", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This email does not exist in our database
      static let loginViewUnknowEmailMessage = Rswift.StringResource(key: "LoginView.UnknowEmailMessage", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This feature is coming soon
      static let alertMessageComingSoon = Rswift.StringResource(key: "Alert.Message.ComingSoon", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Time Between Meetings
      static let meCardTitleMeetingsTimeBetween = Rswift.StringResource(key: "Me.Card.Title.Meetings.Time.Between", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Time in meetings
      static let meCardTitleMeetingsHoursSpent = Rswift.StringResource(key: "Me.Card.Title.Meetings.Hours.Spent", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Time in meetings
      static let meCardTitleMeetingsLength = Rswift.StringResource(key: "Me.Card.Title.Meetings.Length", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Time to the event %@
      static let prepareMyPrepTimeToEvent = Rswift.StringResource(key: "Prepare.MyPrep.TimeToEvent", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Title
      static let settingsGeneralJobTitleTitle = Rswift.StringResource(key: "Settings.General.JobTitle.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To Be Vision
      static let meSectorMyWhyVisionTitle = Rswift.StringResource(key: "Me.Sector.My.Why.Vision.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To Be Vision
      static let tabBarItemTbv = Rswift.StringResource(key: "Tab.Bar.Item.tbv", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To change the location service permissions please go the settings.
      static let alertMessageLocationServices = Rswift.StringResource(key: "Alert.Message.LocationServices", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To read
      static let learnContentItemToRead = Rswift.StringResource(key: "Learn.Content.Item.ToRead", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To use Tignum QOT, you must agree to the conditons.
      static let signingProfileCheckBoxError = Rswift.StringResource(key: "signing.profile.check.box.error", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Today’s Average Time Between Meetings
      static let meSectorMyStatisticsPersonalAverageTimeBetweenMeetings = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Average.Time.Between.Meetings", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tools
      static let shortcutItemTitleLibrary = Rswift.StringResource(key: "shortcut.item.title.library", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tools
      static let topTabBarItemTitlePerpareTools = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Perpare.Tools", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Turn on mobile data or use Wi-Fi to access data.
      static let alertMessageSigninMissingConnection = Rswift.StringResource(key: "Alert.Message.signinMissingConnection", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tutorial reset
      static let settingsTutorialResetTitle = Rswift.StringResource(key: "Settings.Tutorial.Reset.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: UPCOMING EVENTS
      static let preparePrepareEventsUpcomingEvents = Rswift.StringResource(key: "Prepare.PrepareEvents.UpcomingEvents", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: UPCOMING EVENTS, OR SYNC CALENDAR
      static let preparePrepareEventsUpcomingEventsNoSynchronisableCalendars = Rswift.StringResource(key: "Prepare.PrepareEvents.UpcomingEventsNoSynchronisableCalendars", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unable to authenticated
      static let alertMessageUnauthenticated = Rswift.StringResource(key: "Alert.Message.Unauthenticated", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unable to share content
      static let meSectorMyWhyPartnersShareNoContentTitle = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Share.NoContent.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Upcoming preps
      static let prepareMyPrepTableviewSectionHeaderUpCommingPreparations = Rswift.StringResource(key: "Prepare.MyPrep.Tableview.section.header.UpCommingPreparations", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User not authenticated
      static let alertTitleUnauthenticated = Rswift.StringResource(key: "Alert.Title.Unauthenticated", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User's average value
      static let chartInitialStateUserAvg = Rswift.StringResource(key: "Chart.Initial.State.User.Avg", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: VIDEO
      static let searchFilterVideo = Rswift.StringResource(key: "Search.Filter.Video", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify
      static let signingDigitCheckBottomButtonTitle = Rswift.StringResource(key: "signing.digit.check.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WATCH
      static let searchFilterWatch = Rswift.StringResource(key: "Search.Filter.Watch", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WEEK
      static let activityViewWeekButton = Rswift.StringResource(key: "ActivityView.WeekButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WEEK
      static let chartInitialStateWeek = Rswift.StringResource(key: "Chart.Initial.State.Week", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WEEK
      static let meSectorMyStatisticsWeek = Rswift.StringResource(key: "Me.Sector.My.Statistics.Week", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WELCOME
      static let signingProfileHudTitleUserCreated = Rswift.StringResource(key: "signing.profile.hud.title.user.created", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WHY DPM ?
      static let guideDailyPrepNotFinishedWhyDPM = Rswift.StringResource(key: "Guide.DailyPrep.NotFinished.WhyDPM", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Waiting
      static let audioFullScreenButtonWaiting = Rswift.StringResource(key: "Audio.FullScreen.Button.Waiting", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Want to change your password? We can send you an email to help with that!
      static let settingsChangePasswordTitle = Rswift.StringResource(key: "Settings.Change.Password.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We have sent you an email with instructions on how to reset your password.
      static let alertMessageResetPassword = Rswift.StringResource(key: "Alert.Message.Reset.Password", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We use your email to securely verify your account and protect all data you share with us.
      static let signingEmailCheckSubtitle = Rswift.StringResource(key: "signing.email.check.subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We use your email to securely verify your account and to protect all data you share with us.
      static let signingProfileSubtitle = Rswift.StringResource(key: "signing.profile.subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Week
      static let calendarWeek = Rswift.StringResource(key: "Calendar.Week", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Weekly Choices
      static let meSectorMyWhyWeeklyChoicesTitle = Rswift.StringResource(key: "Me.Sector.My.Why.Weekly.Choices.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Weeks
      static let calendarWeeks = Rswift.StringResource(key: "Calendar.Weeks", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Weight
      static let settingsGeneralWeightTitle = Rswift.StringResource(key: "Settings.General.Weight.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome %@
      static let onboardingChatItemWelcome = Rswift.StringResource(key: "Onboarding.Chat.Item.Welcome", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome back to QOT.
      static let signingLoginSubtitle = Rswift.StringResource(key: "signing.login.subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What device would you like us to support?
      static let addSensorViewAlertMessage = Rswift.StringResource(key: "AddSensorView.Alert.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What do you want the person/group to know after the event?
      static let prepareReviewNotesIntentionKnowingTitle = Rswift.StringResource(key: "Prepare.Review.Notes.Intention.Knowing.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What would you like to share with %@?
      static let meSectorMyWhyPartnersShareHeader = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Share.Header", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What's Hot
      static let topTabBarItemTitleLearnWhatsHot = Rswift.StringResource(key: "Top.Tab.Bar.Item.Title.Learn.WhatsHot", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What's my Upcoming QOT Preparation Event?
      static let siriShortcutsUpcomingEventSuggestedInvocation = Rswift.StringResource(key: "SiriShortcuts.UpcomingEvent.suggestedInvocation", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Whats Hot Article
      static let guideCardTypeWhatsHot = Rswift.StringResource(key: "Guide.Card.Type.WhatsHot", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Which country do you live in? We use this to protect your data.
      static let signingCountrySubtitle = Rswift.StringResource(key: "signing.country.subtitle", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Why do you need access?
      static let onboardingChoiceTitleAccessWhy = Rswift.StringResource(key: "Onboarding.Choice.Title.Access.Why", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Would you like to tell your partner more about QOT and how they can help you?
      static let alertMessagePartnerInvite = Rswift.StringResource(key: "Alert.Message.Partner.Invite", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Write your reflection notes here
      static let prepareReviewNotesReflectionsPlaceholder = Rswift.StringResource(key: "Prepare.Review.Notes.Reflections.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Written %@ ago
      static let meSectorMyWhyVisionWriteDate = Rswift.StringResource(key: "Me.Sector.My.Why.Vision.Write.Date", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YEAR
      static let meSectorMyStatisticsYear = Rswift.StringResource(key: "Me.Sector.My.Statistics.Year", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YOUR DEVICE
      static let preparePrepareEventsYourDevice = Rswift.StringResource(key: "Prepare.PrepareEvents.YourDevice", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YOUR INTENTIONS
      static let prepareHeaderYourIntentions = Rswift.StringResource(key: "Prepare.header.your.intentions", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YOUR INTENTIONS
      static let prepareReviewNotesIntentionsNavbarTitle = Rswift.StringResource(key: "Prepare.Review.Notes.Intentions.Navbar.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Year
      static let calendarYear = Rswift.StringResource(key: "Calendar.Year", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Years
      static let calendarYears = Rswift.StringResource(key: "Calendar.Years", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes, I give you confidential access to all.
      static let onboardingChoiceTitleAccessAll = Rswift.StringResource(key: "Onboarding.Choice.Title.Access.All", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes, Leave
      static let mySprintDetailsNotesButtonLeave = Rswift.StringResource(key: "MySprintDetailsNotes.Button.Leave", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes, Leave
      static let profileConfirmationDoneButton = Rswift.StringResource(key: "ProfileConfirmation.doneButton", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes, Pause
      static let mySprintDetailsButtonYesPause = Rswift.StringResource(key: "MySprintDetails.Button.YesPause", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes, continue
      static let buttonTitleYesContinue = Rswift.StringResource(key: "Button.Title.YesContinue", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can tailor your preparation. Add strategies that fit best or remove those you dont like.
      static let alertMessagePreparationEditStrategy = Rswift.StringResource(key: "Alert.Message.Preparation.Edit.Strategy", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You finished your sprint. Why don’t you tell us your main takeaways?
      static let mySprintDetailsInfoTextNotes = Rswift.StringResource(key: "MySprintDetails.Info.Text.Notes", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have already reached the maximum limit of weekly choices. Please unselect something to continue your selection
      static let meSectorMyWhySelectWeeklyChoicesMaxChoiceAlertMessage = Rswift.StringResource(key: "Me.Sector.My.Why.Select.Weekly.Choices.Max.Choice.Alert.Message", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have not created your To Be Vision yet
      static let myQotVisionNoVision = Rswift.StringResource(key: "MyQot.Vision.NoVision", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You've got an event coming up today. Tap on the card to prepare.
      static let guideCardPreparationSingleStartedTodayContent = Rswift.StringResource(key: "guide.card.preparation.single-started-today.content", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You've got an event coming up today. Tap on the card to prepare.
      static let guideCardPreparationSingleUnstartedTodayContent = Rswift.StringResource(key: "guide.card.preparation.single-unstarted-today.content", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You've got some events coming up today. Tap on the card to prepare.
      static let guideCardPreparationMultipleStartedTodayContent = Rswift.StringResource(key: "guide.card.preparation.multiple-started-today.content", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You've got some events coming up today. Tap on the card to prepare.
      static let guideCardPreparationMultipleUnstartedTodayContent = Rswift.StringResource(key: "guide.card.preparation.multiple-unstarted-today.content", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your %@ weekly choices %@/%@
      static let meSectorMyWhySelectWeeklyChoicesNavigation = Rswift.StringResource(key: "Me.Sector.My.Why.Select.Weekly.Choices.Navigation", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your 5 Weekly Choices
      static let settingsNotificationsWeeklyChoicesTitle = Rswift.StringResource(key: "Settings.Notifications.WeeklyChoices.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Average Activity Level Score
      static let meSectorMyStatisticsPersonalAverageActivityLevel = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Average.Activity.Level", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Average Movement Frequency Score
      static let meSectorMyStatisticsPersonalAverageMovementFrequency = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Average.Movement.Frequency", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Average Perceived Load
      static let meSectorMyStatisticsPersonalAveragePerceivedLoad = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Average.Perceived.Load", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Average Perceived Recovery
      static let meSectorMyStatisticsPersonalAveragePerceivedRecovery = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Average.Perceived.Recovery", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Average Sleep Score
      static let meSectorMyStatisticsPersonalAverageSleepQuality = Rswift.StringResource(key: "Me.Sector.My.Statistics.Personal.Average.Sleep.Quality", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Headline
      static let meSectorMyWhyVisionHeadlinePlaceholder = Rswift.StringResource(key: "Me.Sector.My.Why.Vision.Headline.Placeholder", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Morning Interview Feedback
      static let siriShortcutsDailyPrepTitle = Rswift.StringResource(key: "SiriShortcuts.DailyPrep.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your To Be Vision
      static let siriShortcutsToBeVisionTitle = Rswift.StringResource(key: "SiriShortcuts.ToBeVision.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Upcoming Event Preparation
      static let siriShortcutsUpcomingEventPrepTitle = Rswift.StringResource(key: "SiriShortcuts.UpcomingEventPrep.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your What's Hot? Article
      static let siriShortcutsWhatsHotArticleTitle = Rswift.StringResource(key: "SiriShortcuts.WhatsHotArticle.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your daily activity level comes from your wearable device and is based on your overall volume of activity throughout your entire day. Your score ranges from 1 (inactive) to 10 (very active). Your activity level score is particularly helpful to build awareness during long days (i.e full of meetings, travel, etc.), when you might not realize that you spend most of the day sitting. Being active helps your brain performance, your energy levels, and your immune function.
      static let meChartInfoTextActivityIndex = Rswift.StringResource(key: "Me.Chart.Info.Text.Activity.Index", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your daily movement frequency measures uses data from your wearable device and measures how many times you sit for 90 minutes or longer throughout the day. Your daily score ranges from 1 (highly sedentary) to 10 (very active). Strive for a score greater than 6 to help your brain and body harness the performance benefits of movement. The movement frequency graph displays your daily movement frequency score for the last 5 days.
      static let meChartInfoTextActivityOscillation = Rswift.StringResource(key: "Me.Chart.Info.Text.Activity.Oscillation", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your device could not send email
      static let alertMessageCouldNotSendEmail = Rswift.StringResource(key: "Alert.Message.Could.Not.Send.Email", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your events and, therefore, your load is kept on your calendar. When I analyze your information, I am looking for how many meetings you have, how much time you have between meetings, how often you need to travel, etc. When I know these things, I can help you rule your impact every day. By knowing your location, I can analyze timezone changes when you travel. This way, I can provide you with custom strategies during your entire trip. Lastly, permission to send you notifications allows me to interact with you when you need it most
      static let onboardingChatItemWhy = Rswift.StringResource(key: "Onboarding.Chat.Item.Why", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your preparation has been saved to My Prep
      static let prepareChatPreparationSaved = Rswift.StringResource(key: "Prepare.Chat.PreparationSaved", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your sleep quality comes from your paired wearable device and ranges from 1 (bad quality) to 10 (very good sleep quality). The score is derived from an algorithm developed by our recovery experts that considers the time it takes you to fall asleep, how much deep sleep you get, how many times you wake up, and your overall sleep architecture. Each bar on the graph displays your daily sleep score over the last 5 days. The internal pentagon represents your average sleep score for those days. Sleep quality helps you maximize your QOT.
      static let meChartInfoTextSleepQuality = Rswift.StringResource(key: "Me.Chart.Info.Text.Sleep.Quality", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your sleep quantity comes from your paired wearable device and shows you how long you slept. This graph shows the number of hours you slept last night and for the past five days. The internal pentagon represents the average number of hours you slept over those five days.
      static let meChartInfoTextSleepQuantity = Rswift.StringResource(key: "Me.Chart.Info.Text.Sleep.Quantity", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: cognitive fatigue
      static let fatigueSymptomCognitive = Rswift.StringResource(key: "Fatigue.Symptom.Cognitive", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: e-mail
      static let meSectorMyWhyPartnersEmail = Rswift.StringResource(key: "Me.Sector.My.Why.Partners.Email", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: emotional fatigue
      static let fatigueSymptomEmotional = Rswift.StringResource(key: "Fatigue.Symptom.Emotional", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: in 4 weeks
      static let tbvDataGraphBarNextDurationViewCellInFourWeeks = Rswift.StringResource(key: "TBVDataGraphBarNextDurationViewCell.inFourWeeks", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: physical fatigue
      static let fatigueSymptomPhysical = Rswift.StringResource(key: "Fatigue.Symptom.Physical", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: • Eight characters minimum
      static let signingPasswordHintCharacter = Rswift.StringResource(key: "signing.password.hint.character", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: • One special character
      static let signingPasswordHintSpecial = Rswift.StringResource(key: "signing.password.hint.special", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: • One uppercase character
      static let signingPasswordHintUppercase = Rswift.StringResource(key: "signing.password.hint.uppercase", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value:  No Weekly Choices selected.
      static func meSectorMyWhyPartnersShareMissingWeeklyChoiceAlert(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Share.MissingWeeklyChoice.alert", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value:  h
      static func dailyCheckInSleepQuantityValueSuffix(_: Void = ()) -> String {
        return NSLocalizedString("DailyCheckIn.SleepQuantity.Value.Suffix", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value:  h/more
      static func dailyCheckInSleepQuantityValueSuffixMax(_: Void = ()) -> String {
        return NSLocalizedString("DailyCheckIn.SleepQuantity.Value.Suffix.Max", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value:  months since your last edit
      static func myQotVisionMonthsSince(_: Void = ()) -> String {
        return NSLocalizedString("MyQot.Vision.MonthsSince", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: %02d CHOICE
      static func meSectorMyWhyWeeklyChoicesChoice(_ value1: Int) -> String {
        return String(format: NSLocalizedString("Me.Sector.My.Why.Weekly.Choices.Choice", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ WEEKS
      static func meSectorMyStatisticsWeeks(_ value1: String) -> String {
        return String(format: NSLocalizedString("Me.Sector.My.Statistics.Weeks", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ min audio
      static func learnContentListViewMinutesLabelListen(_ value1: String) -> String {
        return String(format: NSLocalizedString("learn.content-list-view.minutes-label-listen", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ min read
      static func learnContentListViewMinutesLabel(_ value1: String) -> String {
        return String(format: NSLocalizedString("learn.content-list-view.minutes-label", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ min video
      static func learnContentDurationVideo(_ value1: String) -> String {
        return String(format: NSLocalizedString("learn.content.duration.video", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ min video
      static func learnContentListViewMinutesLabelWatch(_ value1: String) -> String {
        return String(format: NSLocalizedString("learn.content-list-view.minutes-label-watch", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %d of %d STRATEGIES
      static func guideItemCompletedStrategiesCounter(_ value1: Int, _ value2: Int) -> String {
        return String(format: NSLocalizedString("guide.item.completed.strategies.counter", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: (ADMIN)
      static func settingsGeneralAdminTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Admin.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 0
      static func chartInitialStateValue(_: Void = ()) -> String {
        return NSLocalizedString("Chart.Initial.State.Value", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 1 MINUTE
      static func qotUsageTimerDefault(_: Void = ()) -> String {
        return NSLocalizedString("Qot.Usage.Timer.Default", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 5 minutes is all you need to rewire your brain for future success. What did you do well in this event?
      static func prepareReviewNotesReflectionPositiveTitle(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Reflection.Positive.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 55 Strategies
      static func topTabBarItemTitleLearnStrategies(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Learn.Strategies", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: <head><style>body{font-family:Apercu-Light;font-size:16px;color:gray;line-height:1.25;}highlight{font-family:Apercu-Light;font-size:21px;color:white;line-height:1.0}</style></head>
      static func morningControllerQuestionHTMLStyle(_: Void = ()) -> String {
        return NSLocalizedString("MorningController.question.HTML.style", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: A SPRINT IS ALREADY IN PROGRESS
      static func mySprintDetailsInfoTitleSprintInProgress(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Info.Title.SprintInProgress", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: A Sprint is already in progress
      static func mySprintDetailsInfoTitleInProgress(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Info.Title.In.Progress", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: A reset password email has been sent to %@
      static func signingLoginHudMessagePasswordReset(_ value1: String) -> String {
        return String(format: NSLocalizedString("signing.login.hud.message.password.reset", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: A short description of the action goes here
      static func imagePickerOptionsMessage(_: Void = ()) -> String {
        return NSLocalizedString("ImagePicker.Options.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ABOUT TIGNUM
      static func sidebarTitleAbout(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.About", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ACTIVITY TRACKERS
      static func sidebarSensorsMenuSensors(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Sensors", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ADD THIS PREPARATION TO
      static func preparePrepareEventsAddPreparation(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.PrepareEvents.AddPreparation", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ALL
      static func searchFilterAll(_: Void = ()) -> String {
        return NSLocalizedString("Search.Filter.All", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ARE YOU READY TO RULE YOUR IMPACT?
      static func slideShowMorePromptTitle(_: Void = ()) -> String {
        return NSLocalizedString("SlideShow.MorePrompt.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: AUDIO
      static func searchFilterAudio(_: Void = ()) -> String {
        return NSLocalizedString("Search.Filter.Audio", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: AVERAGE TIME ZONE CHANGES
      static func meCardTitleTravelTimeZoneMax(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Travel.Time.Zone.Max", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Activity
      static func meSectorActivity(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.Activity", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Activity Level
      static func meCardTitleActivityLevel(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Activity.Level", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Add a photo
      static func meSectorMyWhyPartnersAddPhoto(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Add.Photo", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Add new event
      static func buttonTitleAddEvent(_: Void = ()) -> String {
        return NSLocalizedString("Button.Title.Add.Event", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Add new event
      static func preparePrepareEventsAddNewEvent(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.PrepareEvents.AddNewEvent", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Add or remove strategies from your preparation list.
      static func choiceViewHeaderEditPrepare(_: Void = ()) -> String {
        return NSLocalizedString("Choice.View.Header.Edit.Prepare", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Add partner
      static func meSectorMyWhyPartnersCellAddPartner(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Cell.Add.Partner", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Add sensor to see this card.
      static func meChartAddSensor(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Add.Sensor", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Add strategy
      static func alertTitlePreparationAddStrategy(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Preparation.Add.Strategy", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Allow QOT to access the calendar to see this card.
      static func meChartAddCalendar(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Add.Calendar", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: An email has been sent to %@  Enter the 4-digit code to continue.
      static func signingDigitCheckSubtitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("signing.digit.check.subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: An unexpected error has occured. (%@) Please try again later.
      static func alertMessageUnknownType(_ value1: String) -> String {
        return String(format: NSLocalizedString("Alert.Message.Unknown.Type", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: An unexpected error has occured. Please try again later.
      static func alertMessageUnknown(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Unknown", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to leave without saving? The changes will not be applied.
      static func mySprintDetailsNotesInfoMessageLeave(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetailsNotes.Info.Message.Leave", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to leave without saving? The changes will not be applied.
      static func profileConfirmationDescription(_: Void = ()) -> String {
        return NSLocalizedString("ProfileConfirmation.description", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to pause your current sprint? To reach the best results is recommended to finish a sprint in maximum %d days.
      static func mySprintDetailsInfoMessagePauseSprint(_ value1: Int) -> String {
        return String(format: NSLocalizedString("MySprintDetails.Info.Message.PauseSprint", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Are you sure you would like to logout of QOT?
      static func alertMessageLogout(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Logout", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Article
      static func learnContentItemArticle(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Content.Item.Article", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Articles
      static func learnContentItemArticles(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Content.Item.Articles", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Audio
      static func learnContentItemTitleAudio(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Content.Item.Title.Audio", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Average Number of Hours You Sleep
      static func meSectorMyStatisticsPersonalAverageSleepQuantity(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Average.Sleep.Quantity", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Average Number of Peak Performances
      static func meCardTitlePeakPerformacneAverage(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Peak.Performacne.Average", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: BEFORE AND AFTER
      static func prepareHeaderBeforeAndAfter(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.header.before.and.after", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: BENEFITS EXPERIENCED
      static func mySprintDetailsHeaderBenefits(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Header.Benefits", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: BY %@
      static func aricleAuthorBy(_ value1: String) -> String {
        return String(format: NSLocalizedString("aricle.author.by", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Before you start, I would like access to your calendar and your location. Also, I would like to get permission to send you notifications. As always, all of your information is secure and confidential.
      static func onboardingChatItemPermissions(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding.Chat.Item.Permissions", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Birthdate
      static func birthdateTitle(_: Void = ()) -> String {
        return NSLocalizedString("birthdate.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Building your daily recovery plan
      static func myQotSprintsSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("MyQot.Sprints.Subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Bullets
      static func learnContentItemTitleBullets(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Content.Item.Title.Bullets", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: By creating an account, you agree to our [Terms of Use](termsOfUse://) and [Privacy Policy](privacyPolicy://).
      static func signingProfileCheckBoxText(_: Void = ()) -> String {
        return NSLocalizedString("signing.profile.check.box.text", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CLOSE
      static func chartInitialStateClose(_: Void = ()) -> String {
        return NSLocalizedString("Chart.Initial.State.Close", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CONNECT
      static func sidebarSensorsMenuConnect(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Connect", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CONNECT ACTIVITY TRACKER
      static func sidebarTitleSensor(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Sensor", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CONNECTED
      static func sidebarSensorsMenuFitbitAlreadyConnectedTitle(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Fitbit.Already.Connected.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CONTACT SUPPORT
      static func sidebarTitleContactSupport(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.ContactSupport", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CONTENT AND COPYRIGHTS
      static func settingsSecurityCopyrightsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Security.Copyrights.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: COUNTRY OF RESIDENCE
      static func signingCountryTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.country.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CREATE A PASSWORD
      static func signingPasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.password.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CREATE YOUR TO BE VISION
      static func guideToBeVisionNotFisishedTitle(_: Void = ()) -> String {
        return NSLocalizedString("Guide.ToBeVision.NotFisished.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Calendar not synchronized
      static func alertTitleCalendarNotSynced(_: Void = ()) -> String {
        return NSLocalizedString("Alert.title.calendar.not.synced", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func addSensorViewAlertCancel(_: Void = ()) -> String {
        return NSLocalizedString("AddSensorView.Alert.Cancel", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func alertButtonTitleCancel(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Button.Title.Cancel", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func buttonTitleCancel(_: Void = ()) -> String {
        return NSLocalizedString("Button.Title.Cancel", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func imagePickerOptionsButtonCancel(_: Void = ()) -> String {
        return NSLocalizedString("ImagePicker.Options.Button.Cancel", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func mySprintDetailsButtonCancel(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Button.Cancel", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func mySprintDetailsNotesButtonCancel(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetailsNotes.Button.Cancel", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cannot Display Content
      static func commonInvalidContent(_: Void = ()) -> String {
        return NSLocalizedString("Common.InvalidContent", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cannot delete Partner
      static func partnersAlertDeleteErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("Partners.Alert.DeleteError.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Capture your takeaways
      static func mySprintDetailsButtonTakeaways(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Button.Takeaways", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Categories
      static func learnCategoryListViewTitle(_: Void = ()) -> String {
        return NSLocalizedString("learn.category-list-view.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Change Notifications
      static func alertTitleSettingsChangeNotifications(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Settings.Change.Notifications", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Change Password
      static func settingsSecurityPasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Security.Password.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Change Permission
      static func alertTitleSettingsChangePermission(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Settings.ChangePermission", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Change photo
      static func meSectorMyWhyPartnersChangePhoto(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Change.Photo", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Choose Photo
      static func imagePickerOptionsButtonPhoto(_: Void = ()) -> String {
        return NSLocalizedString("ImagePicker.Options.Button.Photo", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Come back on the first sprintday and you will have access to your tasks.
      static func mySprintDetailsInfoTextUpcoming(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Info.Text.Upcoming", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Coming soon
      static func meChartCommingSoon(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Comming.Soon", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Company
      static func settingsGeneralCompanyTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Company.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Confirm
      static func settingsSecurityConfirmTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Security.Confirm.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Connected
      static func sidebarSensorsMenuSensorsConnected(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Sensors.Connected", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Content Not Found
      static func alertTitleNoContent(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.NoContent", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Continue
      static func alertButtonTitleContinue(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Button.Title.Continue", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Continue
      static func mySprintDetailsButtonContinue(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Button.Continue", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Continue sprint
      static func mySprintDetailsButtonContinueSprint(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Button.ContinueSprint", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Could not send email
      static func alertTitleCouldNotSendEmail(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Could.Not.Send.Email", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Create a new To Be Vision
      static func alertButtonTitleCreateVision(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Button.Title.Create.Vision", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Create account
      static func signingProfileBottomButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.profile.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Create password
      static func signingPasswordBottomButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.password.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Customize your benchmark value for your sleep quantity here accroding to the time amount you want to reach.
      static func dailyBriefCustomizeSleepIntro(_: Void = ()) -> String {
        return NSLocalizedString("DailyBrief.Customize.Sleep.Intro", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Customize your preparation
      static func alertTitlePreparationEditStrategy(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Preparation.Edit.Strategy", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: DAILY PREP MINUTE
      static func morningControllerTitleLabel(_: Void = ()) -> String {
        return NSLocalizedString("MorningController.titleLabel", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: DAILY PREP MINUTE
      static func settingsNotificationsDailyPrepTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Notifications.DailyPrep.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: DATA
      static func tabBarItemData(_: Void = ()) -> String {
        return NSLocalizedString("Tab.Bar.Item.Data", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: DATA BASE AVG.
      static func chartInitialStateDatabaseAvg(_: Void = ()) -> String {
        return NSLocalizedString("Chart.Initial.State.Database.Avg", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: DAY
      static func meSectorMyStatisticsDay(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Day", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: DONE
      static func morningControllerDoneButton(_: Void = ()) -> String {
        return NSLocalizedString("MorningController.doneButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Date Of Birth
      static func settingsGeneralDateOfBirthTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.DateOfBirth.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Date not available
      static func alertTitleEventDateNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("Alert.title.event.date.not.available", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Day
      static func calendarDay(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Day", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Days
      static func calendarDays(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Days", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Delete Photo
      static func imagePickerOptionsButtonDelete(_: Void = ()) -> String {
        return NSLocalizedString("ImagePicker.Options.Button.Delete", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Delivered at %@
      static func prepareChatFooterDeliveredTime(_ value1: String) -> String {
        return String(format: NSLocalizedString("Prepare.Chat.Footer.DeliveredTime", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Disconnected
      static func sidebarSensorsMenuSensorsDisconnected(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Sensors.Disconnected", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Done
      static func buttonTitleDone(_: Void = ()) -> String {
        return NSLocalizedString("Button.Title.Done", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Done
      static func questionnaireViewControllerDoneButton(_: Void = ()) -> String {
        return NSLocalizedString("QuestionnaireViewController.doneButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Done
      static func rateViewControllerDoneButton(_: Void = ()) -> String {
        return NSLocalizedString("RateViewController.doneButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Done
      static func tbvTrackerViewControllerDoneButton(_: Void = ()) -> String {
        return NSLocalizedString("TBVTrackerViewController.doneButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Download
      static func audioFullScreenButtonDownload(_: Void = ()) -> String {
        return NSLocalizedString("Audio.FullScreen.Button.Download", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Downloaded
      static func audioFullScreenButtonDownloaded(_: Void = ()) -> String {
        return NSLocalizedString("Audio.FullScreen.Button.Downloaded", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Downloading
      static func audioFullScreenButtonDownloading(_: Void = ()) -> String {
        return NSLocalizedString("Audio.FullScreen.Button.Downloading", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: EDIT PREPARATION LIST
      static func prepareEditPreparationList(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.edit.preparation.list", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ENTER CODE
      static func signingDigitCheckTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.digit.check.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ENTER EMAIL
      static func signingEmailCheckTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.email.check.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: EXCLUSIVE CONTENT
      static func headerTitleExclusiveContent(_: Void = ()) -> String {
        return NSLocalizedString("Header.Title.Exclusive.Content", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Edit QOT Partner
      static func meSectorMyWhyPartnersEditTitle(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Edit.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Edit To Be Vision
      static func alertButtonTitleEditVision(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Button.Title.Edit.Vision", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Edit your personal info and settings
      static func myQotProfileSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("MyQot.Profile.Subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email
      static func settingsGeneralEmailTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Email.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email is not setup on your device
      static func alertMessageEmailNotSetup(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Email.Not.Setup", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email not found
      static func alertTitleEmailNotFound(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.EmailNotFound", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email sent
      static func resetPasswordEmailSent(_: Void = ()) -> String {
        return NSLocalizedString("ResetPassword.EmailSent", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter birthdate
      static func signingProfileErrorBirthdate(_: Void = ()) -> String {
        return NSLocalizedString("signing.profile.error.birthdate", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter gender
      static func signingProfileErrorGender(_: Void = ()) -> String {
        return NSLocalizedString("signing.profile.error.gender", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter your device info.
      static func addSensorViewAlertPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("AddSensorView.Alert.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter your email here
      static func loginViewInputPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("LoginView.InputPlaceHolder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter your email here
      static func resetPasswordEmailPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("ResetPassword.emailPlaceHolder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter your password
      static func loginViewPasswordPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("LoginView.PasswordPlaceHolder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Error
      static func alertTitleCustom(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Custom", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Error
      static func alertTitleUnknown(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Unknown", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Error
      static func meSectorMyWhyPartnersPhotoErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Photo.Error.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Every partner requires a 'Name', 'Surname', 'Relationship' and 'Email.'
      static func partnersAlertImcompleteMessage(_: Void = ()) -> String {
        return NSLocalizedString("Partners.Alert.Imcomplete.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Explore now
      static func slideShowMorePromptDoneButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("SlideShow.MorePrompt.DoneButtonTitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FAQ
      static func sidebarTitleFAQ(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.FAQ", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FEATURE REQUEST
      static func sidebarTitleFeatureRequest(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.FeatureRequest", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FITBIT
      static func sidebarSensorsMenuFitbit(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Fitbit", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FLIGHTS NEXT FOUR WEEKS
      static func meCardTitleTravelTrips(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Travel.Trips", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FROM OTHER DEVICES
      static func settingsCalendarSectionOnOtherDevicesHeader(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Calendar.Section.OnOtherDevices.Header", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FROM THIS DEVICE
      static func settingsCalendarSectionOnThisDeviceHeader(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Calendar.Section.OnThisDevice.Header", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Failed to link Fitbit
      static func sidebarSensorsMenuFitbitFailure(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Fitbit.Failure", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Female
      static func genderFemale(_: Void = ()) -> String {
        return NSLocalizedString("gender.female", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Female
      static func genderOther(_: Void = ()) -> String {
        return NSLocalizedString("gender.other", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: First Name
      static func settingsGeneralFirstNameTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.FirstName.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Fitbit is already connected with QOT.
      static func sidebarSensorsMenuFitbitAlreadyConnectedMessage(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Fitbit.Already.Connected.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Fitbit successfully linked
      static func sidebarSensorsMenuFitbitSuccess(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Fitbit.Success", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Flights
      static func meSectorTravel(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.Travel", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Forgot password?
      static func loginViewForgotButton(_: Void = ()) -> String {
        return NSLocalizedString("LoginView.ForgotButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Forgot password?
      static func signingLoginButtonTitleForgotPassword(_: Void = ()) -> String {
        return NSLocalizedString("signing.login.button.title.forgot.password", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Forgot your password? We can help to reset it.
      static func resetPasswordForgottenPasswordMessage(_: Void = ()) -> String {
        return NSLocalizedString("ResetPassword.ForgottenPasswordMessage", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Full
      static func learnContentItemTitleFull(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Content.Item.Title.Full", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: GENERAL
      static func sidebarSettingsMenuGeneralButton(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SettingsMenu.GeneralButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: GENERAL NOTES
      static func prepareReviewNotesGeneralNavbarTitle(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.General.Navbar.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: GUIDE
      static func tabBarItemGuide(_: Void = ()) -> String {
        return NSLocalizedString("Tab.Bar.Item.Guide", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: GUIDE
      static func topTabBarItemTitleGuide(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Guide", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Gender
      static func genderTitle(_: Void = ()) -> String {
        return NSLocalizedString("gender.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Gender
      static func settingsGeneralGenderTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Gender.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: General
      static func settingsTitleGeneral(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Title.General", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Get the most out of QOT
      static func slideShowMorePromptMoreButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("SlideShow.MorePrompt.MoreButtonTitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Go to System Settings to change your permissions.
      static func alertMessageSettingsChangePermission(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Settings.ChangePermission", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Go to System Settings to edit your notification settings.
      static func alertMessageSettingsChangeNotifications(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Settings.Change.Notifications", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Great job! You have finished the on-boarding.
      static func slideShowCompletePromptTitle(_: Void = ()) -> String {
        return NSLocalizedString("SlideShow.CompletePrompt.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: HEALTH KIT
      static func sidebarSensorsMenuHealthKit(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.HealthKit", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: HIDE
      static func loginViewToggleHide(_: Void = ()) -> String {
        return NSLocalizedString("LoginView.ToggleHide", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: HIGHLIGHTS
      static func mySprintDetailsHeaderHighlights(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Header.Highlights", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Height
      static func settingsGeneralHeightTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Height.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Hour
      static func calendarHour(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Hour", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Hours
      static func calendarHours(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Hours", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: How do you feel today? I can help you Rule Your Impact with just a minute of your time.
      static func guideDailyPrepNotFinishedFeedback(_: Void = ()) -> String {
        return NSLocalizedString("Guide.DailyPrep.NotFinished.Feedback", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: How do you want the person/group to feel after the event?
      static func prepareReviewNotesIntentionFeelingTitle(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Intention.Feeling.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: How do you want to be perceived during the event?
      static func prepareReviewNotesIntentionPreceivingTitle(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Intention.Preceiving.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: If there is something you wish you would have done better, what would you look like if you had done it exactly the way you envisioned?
      static func prepareReviewNotesReflectionImproveTitle(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Reflection.Improve.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Incomplete Partners
      static func partnersAlertImcompleteTitle(_: Void = ()) -> String {
        return NSLocalizedString("Partners.Alert.Imcomplete.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Incorrect code, please try again
      static func signingDigitCheckError(_: Void = ()) -> String {
        return NSLocalizedString("signing.digit.check.error", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Initial Interview
      static func settingsGeneralInterviewTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Interview.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Insert the ideal amount of sleep per day
      static func dailyBriefCustomizeSleepQuestion(_: Void = ()) -> String {
        return NSLocalizedString("DailyBrief.Customize.Sleep.Question", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Intensity
      static func meSectorIntensity(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.Intensity", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Invalid username or password
      static func loginViewLoginFailed(_: Void = ()) -> String {
        return NSLocalizedString("LoginView.LoginFailed", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: It looks like your fatigue is coming from all angles. Jet lag and sleep are the most common causes of this type of fatigue. Which of these two is more applicable to you?
      static func fatigueSymptomGeneral(_: Void = ()) -> String {
        return NSLocalizedString("Fatigue.Symptom.General", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: It’s really important keep your focus in your sprint to reach your results and finish it in %d days. Do you want to continue where you stopped or restart it from the beginning?
      static func mySprintDetailsInfoMessageReplanSprint(_ value1: Int) -> String {
        return String(format: NSLocalizedString("MySprintDetails.Info.Message.ReplanSprint", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: LAST WEEK
      static func meSectorMyStatisticsLastWeek(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.LastWeek", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: LEARN
      static func tabBarItemLearn(_: Void = ()) -> String {
        return NSLocalizedString("Tab.Bar.Item.Learn", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: LEARN MORE
      static func prepareSubtitleLearnMore(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Subtitle.Learn.More", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: LEAVE WITHOUT SAVING
      static func mySprintDetailsNotesInfoTitleLeave(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetailsNotes.Info.Title.Leave", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: LISTEN
      static func searchFilterListen(_: Void = ()) -> String {
        return NSLocalizedString("Search.Filter.Listen", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Last Name
      static func settingsGeneralLastNameTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.LastName.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Latest What's Hot Article
      static func shortcutItemTitleWhatsHot(_: Void = ()) -> String {
        return NSLocalizedString("shortcut.item.title.whats.hot", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Leave without saving
      static func profileConfirmationHeader(_: Void = ()) -> String {
        return NSLocalizedString("ProfileConfirmation.header", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Less than a month since your last edit
      static func myQotVisionLessThan(_: Void = ()) -> String {
        return NSLocalizedString("MyQot.Vision.LessThan", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Let's go!
      static func onboardingChoiceTitleLetsGo(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding.Choice.Title.Lets.Go", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Load more
      static func learnContentItemTitleRelatedArticlesLoadMore(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Content.Item.Title.Related.Articles.Load.More", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Location Services
      static func alertTitleLocationServices(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.LocationServices", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Log in
      static func loginViewLoginButton(_: Void = ()) -> String {
        return NSLocalizedString("LoginView.LoginButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Logout
      static func sidebarSettingsMenuLogoutButton(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SettingsMenu.LogoutButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Logout
      static func sidebarTitleLogout(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Logout", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Looks like you have a sprint in progress that ends the %@. It’s important to keep your focus to reach your current sprint goals. Would you like to stop it and start %@?
      static func mySprintDetailsInfoBodyInProgress(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("MySprintDetails.Info.Body.In.Progress", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Looks like you have a sprint in progress that ends the %@. It’s important to keep your focus to reach your current sprint goals. Would you like to stop it and start To be vision anchors?
      static func mySprintDetailsInfoMessageSprintInProgress(_ value1: String) -> String {
        return String(format: NSLocalizedString("MySprintDetails.Info.Message.SprintInProgress", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Looks like you have an event coming up tomorrow. Tap on the card to prepare.
      static func guideCardPreparationSingleUnstartedTomorrowContent(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.single-unstarted-tomorrow.content", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Looks like you have several events coming up tomorrow. Tap on the card to prepare.
      static func guideCardPreparationMultipleUnstartedTomorrowContent(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.multiple-unstarted-tomorrow.content", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ME
      static func tabBarItemMe(_: Void = ()) -> String {
        return NSLocalizedString("Tab.Bar.Item.Me", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MEMBER SINCE
      static func sidebarUserTitlesMemberSince(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.User.Titles.Member.Since", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MONTH
      static func activityViewMonthButton(_: Void = ()) -> String {
        return NSLocalizedString("ActivityView.MonthButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MONTH
      static func chartInitialStateMonth(_: Void = ()) -> String {
        return NSLocalizedString("Chart.Initial.State.Month", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MONTH
      static func meSectorMyStatisticsMonth(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Month", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MY HEADLINE
      static func myToBeVisionTitlePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("MyToBeVisionTitlePlaceholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MY NOTES
      static func mySprintDetailsHeaderMyNotes(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Header.MyNotes", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MY PLAN
      static func mySprintDetailsHeaderMyPlan(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Header.MyPlan", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MY PREP LIST
      static func preparePrepareEventsMyPrepList(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.PrepareEvents.MyPrepList", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MY PREPARATIONS
      static func myQotHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("MyQot.header.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MY QOT
      static func myQotTitle(_: Void = ()) -> String {
        return NSLocalizedString("MyQot.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MY SUPPORT TEAM
      static func meSectorMyWhyPartnersHeader(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Header", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: MY TEAM AVG.
      static func chartInitialStateTeamAvg(_: Void = ()) -> String {
        return NSLocalizedString("Chart.Initial.State.Team.Avg", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Male
      static func genderMale(_: Void = ()) -> String {
        return NSLocalizedString("gender.male", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Max Limit
      static func meSectorMyWhySelectWeeklyChoicesMaxChoiceAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Select.Weekly.Choices.Max.Choice.Alert.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Me at my best. Getting Chills? Rule Your Impact!
      static func meSectorMyWhyVisionMessagePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Vision.Message.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Meeting load history
      static func meCardTitleMeetingsIncrease(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Meetings.Increase", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Meetings
      static func meSectorMeetings(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.Meetings", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Minute
      static func calendarMinute(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Minute", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Minutes
      static func calendarMinutes(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Minutes", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Month
      static func calendarMonth(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Month", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Months
      static func calendarMonths(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Months", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: More than 
      static func myQotVisionMorethan(_: Void = ()) -> String {
        return NSLocalizedString("MyQot.Vision.Morethan", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Movement Frequency
      static func meCardTitleActivityRatio(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Activity.Ratio", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Data
      static func topTabBarItemTitleMeMyData(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Me.MyData", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Prep
      static func topTabBarItemTitlePerparePrep(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Perpare.Prep", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My TO BE VISION
      static func myToBeVisionDescriptionPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("MyToBeVisionDescriptionPlaceholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Why
      static func topTabBarItemTitleMeMyWhy(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Me.MyWhy", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NEXT
      static func morningControllerNextButton(_: Void = ()) -> String {
        return NSLocalizedString("MorningController.nextButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NEXT UP
      static func learnArticleItemNextUp(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Article.Item.NextUp", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NEXT WEEK
      static func meSectorMyStatisticsNextWeek(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.NextWeek", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NO EVENTS AVAILABE, PLEASE ADD EVENT
      static func preparePrepareEventsNoUpcomingEventsSynchronisableCalendar(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.PrepareEvents.NoUpcomingEventsSynchronisableCalendar", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NO EVENTS AVAILABLE, PLEASE SYNC CALENDARS
      static func preparePrepareEventsNoSynchronisableCalendars(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.PrepareEvents.NoSynchronisableCalendars", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NOTES
      static func topTabBarItemTitlePerpareNotes(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Perpare.Notes", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NOTIFICATIONS
      static func sidebarSettingsMenuNotificationsButton(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SettingsMenu.NotificationsButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NUMBER OF FLIGHTS
      static func meCardTitleTravelAverage(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Travel.Average", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NUMBER OF TRIPS WITH TIME ZONE CHANGED
      static func meCardTitleTravelTimeZoneChange(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Travel.Time.Zone.Change", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Name
      static func meSectorMyWhyPartnersName(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Name", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Next
      static func signingCountryBottomButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.country.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Next
      static func signingEmailCheckBottomButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.email.check.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Next
      static func signingLoginBottomButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.login.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No Access
      static func alertTitleCalendarNoAccess(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Calendar.No.Access", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No Authorization
      static func alertTitleNotificationsNotAuthorized(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Notifications.Not.Authorized", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No Choice
      static func meSectorMyWhyWeeklyChoicesNoChoiceTitle(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Weekly.Choices.NoChoice.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No Internet Connection
      static func alertTitleNoNetworkConnection(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.NoNetworkConnection", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No Weekly Choices selected.
      static func alertMessageCouldNotSendEmailWeeklyChoices(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Could.Not.Send.Email.WeeklyChoices", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No data
      static func sidebarSensorsMenuSeonsorsNoData(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Seonsors.NoData", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No human being can outperform their self-image, yet you have not created yours. I would love to help you.
      static func guideToBeVisionNotFisishedMessage(_: Void = ()) -> String {
        return NSLocalizedString("Guide.ToBeVision.NotFisished.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No network connection
      static func alertMessageNoNetworkConnection(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.NoNetworkConnection", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No preps saved
      static func prepareMyPrepNoSavePreparations(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.MyPrep.NoSavePreparations", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No weekly choices have been saved yet.
      static func weeklyChoicesNoContent(_: Void = ()) -> String {
        return NSLocalizedString("Weekly.Choices.No.Content", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No worries. If you change your mind, you can change this access in your preferences at any time
      static func onboardingChatItemShowSettings(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding.Chat.Item.Show.Settings", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Notice!
      static func alertTitleCameraNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Camera.Not.Available", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Notifications
      static func settingsTitleNotifications(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Title.Notifications", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Number of Meetings
      static func meCardTitleMeetingsNumber(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Meetings.Number", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Number of Upcoming Peak Performances
      static func meCardTitlePeakPerformacneUpcoming(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Peak.Performacne.Upcoming", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func addSensorViewAlertFeedbackSuccessOK(_: Void = ()) -> String {
        return NSLocalizedString("AddSensorView.Alert.Feedback.Success.OK", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func alertButtonTitleOk(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Button.Title.Ok", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func meSectorMyWhyPartnersPhotoErrorOKButton(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Photo.Error.OK.Button", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func meSectorMyWhySelectWeeklyChoicesMaxChoiceAlertButton(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Select.Weekly.Choices.Max.Choice.Alert.Button", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OURA RING
      static func sidebarSensorsMenuOuraRing(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.OuraRing", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Old password isn't valid
      static func changePasswordIssueOldPasswordNotValid(_: Void = ()) -> String {
        return NSLocalizedString("Change.Password.Issue.Old.Password.Not.Valid", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Open Settings
      static func alertButtonTitleOpenSettings(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Button.Title.Open.Settings", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PAUSE YOUR SPRINT
      static func mySprintDetailsInfoTitlePauseSprint(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Info.Title.PauseSprint", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PERFORMANCE
      static func learnContentPerformanceTitle(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Content.Performance.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PERFORMANCE REMINDERS
      static func settingsNotificationsStrategiesTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Notifications.Strategies.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PERMISSIONS
      static func sidebarTitlePermission(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Permission", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PERSONAL AVG.
      static func meSectorMyStatisticsPersonalAverageDefault(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Average.Default", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PREPARATION
      static func topTabBarItemTitlePerparePreparation(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Perpare.Preparation", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PREPARATION LIST
      static func prepareHeaderPreparationList(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.header.preparation.list", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PREPARATIONS
      static func prepareChatHeaderPreparations(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Chat.Header.Preparations", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PREPARATIONS COMPLETED
      static func prepareContentCompleted(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Content.Completed", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PREPARE
      static func guideCardPreparationSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PREPARE
      static func tabBarItemPrepare(_: Void = ()) -> String {
        return NSLocalizedString("Tab.Bar.Item.Prepare", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PREVIOUS
      static func morningControllerPreviousButton(_: Void = ()) -> String {
        return NSLocalizedString("MorningController.previousButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PRIVACY POLICY
      static func settingsSecurityPrivacyPolicyTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Security.Privacy.Policy.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PROFILE DETAILS
      static func signingProfileTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.profile.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password doesn't match the confirmation
      static func changePasswordIssueConfirmNotMatch(_: Void = ()) -> String {
        return NSLocalizedString("Change.Password.Issue.Confirm.Not.Match", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password is not secure enough, please review guidelines below
      static func signingPasswordError(_: Void = ()) -> String {
        return NSLocalizedString("signing.password.error", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password reset
      static func signingLoginHudTitlePasswordReset(_: Void = ()) -> String {
        return NSLocalizedString("signing.login.hud.title.password.reset", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Past preps
      static func prepareMyPrepTableviewSectionHeaderPastPreparations(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.MyPrep.Tableview.section.header.PastPreparations", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Pause Sprint
      static func mySprintDetailsButtonPauseSprint(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Button.PauseSprint", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Peak Performance
      static func meSectorPeakPerformance(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.Peak.Performance", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Perceived Load
      static func meCardTitleIntensityLoad(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Intensity.Load", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Perceived Recovery
      static func meCardTitleIntensityRecovery(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Intensity.Recovery", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Pick %d to continue
      static func buttonTitlePick(_ value1: Int) -> String {
        return String(format: NSLocalizedString("Button.Title.Pick", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Please create your To Be Vision first
      static func meSectorMyWhyPartnersShareMissingMyToBeVisionAlert(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Share.MissingMyToBeVision.alert", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please define your 'To Be Vision' first
      static func alertMessageCouldNotSendEmailToBeVision(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Could.Not.Send.Email.ToBeVision", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please edit the name and press save
      static func alertMessageEditPreparationName(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.EditPreparationName", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please ensure your device is connected to the internet to access this file.
      static func alertMessageNoNetworkConnectionFile(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.NoNetworkConnectionFile", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter a first name.
      static func signingProfileErrorFirstName(_: Void = ()) -> String {
        return NSLocalizedString("signing.profile.error.first.name", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter a last name.
      static func signingProfileErrorLastName(_: Void = ()) -> String {
        return NSLocalizedString("signing.profile.error.last.name", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter your password.
      static func signingLoginErrorMessagePassword(_: Void = ()) -> String {
        return NSLocalizedString("signing.login.error.message.password", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please open your settings to enable permissions for this action
      static func alertPermissionNotGrantedMessage(_: Void = ()) -> String {
        return NSLocalizedString("Alert.PermissionNotGranted.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please try again
      static func alertMessageEmailNotFound(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.EmailNotFound", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please try it again.
      static func partnersAlertDeleteErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("Partners.Alert.DeleteError.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please wait while we configure what's hot
      static func articleLoading(_: Void = ()) -> String {
        return NSLocalizedString("Article.Loading", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please wait while we configure your data
      static func loadingData(_: Void = ()) -> String {
        return NSLocalizedString("Loading.Data", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please wait while we configure your guide
      static func guideLoading(_: Void = ()) -> String {
        return NSLocalizedString("Guide.Loading", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please wait while we configure your preparation
      static func meMyPrepLoading(_: Void = ()) -> String {
        return NSLocalizedString("Me.My.Prep.Loading", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please wait while we configure your universe
      static func meMyUniverseLoading(_: Void = ()) -> String {
        return NSLocalizedString("Me.My.Universe.Loading", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prefer not to say
      static func genderPreferNotToSay(_: Void = ()) -> String {
        return NSLocalizedString("gender.prefer.not.to.say", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prepare for an event
      static func shortcutItemTitlePrepare(_: Void = ()) -> String {
        return NSLocalizedString("shortcut.item.title.prepare", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prepare for your upcoming event
      static func guideCardPreparationSingleStartedTodayTitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.single-started-today.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prepare for your upcoming event
      static func guideCardPreparationSingleUnstartedTodayTitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.single-unstarted-today.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prepare for your upcoming event
      static func guideCardPreparationSingleUnstartedTomorrowTitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.single-unstarted-tomorrow.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prepare for your upcoming events
      static func guideCardPreparationMultipleStartedTodayTitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.multiple-started-today.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prepare for your upcoming events
      static func guideCardPreparationMultipleUnstartedTodayTitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.multiple-unstarted-today.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prepare for your upcoming events
      static func guideCardPreparationMultipleUnstartedTomorrowTitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.multiple-unstarted-tomorrow.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Profile
      static func sidebarTitleProfile(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Profile", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Push Notifications are not authorized for QOT. To enabled Push Notifications open Settings and enable them. 
      static func alertMessageNotificationsNotAuthorized(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Notifications.Not.Authorized", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Put any additional thoughts into writing. Some examples might include your event To Be Vision, details of what your event's space looks like, or key people at your event.
      static func prepareNotesPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Notes.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Put your thoughts into writing (i.e. I listened well; I didn't overreact; I was prepared).
      static func prepareReviewNotesReflectionWishPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Reflection.Wish.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Put your thoughts into writing (i.e. I listened well; I was calm; I answered questions clearly).
      static func prepareReviewNotesReflectionBrainSuccessPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Reflection.BrainSuccess.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Put your thoughts into writing (i.e. I'm not perfect; your opinion matters; I'm committed to excellence).
      static func prepareReviewNotesIntentionsPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Intentions.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Put your thoughts into writing (i.e. calm, engaged, confident, empathetic).
      static func prepareReviewNotesIntentionsPerceivedPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Intentions.Perceived.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Put your thoughts into writing (i.e. heard, loved, valued, important).
      static func prepareReviewNotesIntentionsPersonGroupPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Intentions.PersonGroup.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT BENEFITS
      static func sidebarTitleBenefits(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Benefits", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT Coach
      static func topTabBarItemTitlePerpareCoach(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Perpare.Coach", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT FOUNDATION
      static func guideCardFoundationSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.foundation.subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT Partners
      static func meSectorMyWhyPartnersTitle(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT TOOLS
      static func sidebarTitleTools(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Tools", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT USAGE
      static func sidebarUserTitlesMemberQOTUsage(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.User.Titles.Member.QOT.Usage", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT analyzes your calendar to determine how much time you spend in meetings throughout your day. The length of time you spend in meetings helps determine your overall load, which requires preparation if you are going to Rule Your Meetings. It also helps you become more purposeful in the way you design your schedule and prepare for certain types of meetings. On days where your meetings are longer than normal, you may want to schedule oscillation breaks and transitions between your peak performances.
      static func meChartInfoTextMeetingsAverageLength(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Meetings.Average.Length", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT analyzes your calendar to determine how much time you spend in meetings throughout your day. The length of time you spend in meetings helps determine your overall load, which requires preparation if you are going to Rule Your Meetings. It also helps you become more purposeful in the way you design your schedule and prepare for certain types of meetings. On days where your meetings are longer than normal, you may want to schedule oscillation breaks and transitions between your peak performances.
      static func meChartInfoTextMeetingsHoursSpent(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Meetings.Hours.Spent", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT analyzes your calendar to determine the average time you have between meetings for the day. QOT then gives you a score between 1 (little-to-no time between meetings) and 10 (15 or more minutes between meetings on average). We recommend taking an average of 15 minutes between your meetings to plan for oscillation, preparation, and reflection. These three key strategies are critical to helping you Rule Your QOT. When planning your day, try reviewing your meetings to see if you can fit in a few more 15-minute breaks. The closer your average is to 15 minutes, the closer your graph will be to becoming a complete circle. If your average time between meetings is 15 minutes or greater, you will receive a score of 10 and have a completed circle.
      static func meChartInfoTextMeetingsAverageTimeBetween(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Meetings.Average.Time.Between", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT could not create the event for the selected calendar. Please choose another calendar or enable Calendar Synchronization in Settings.
      static func alertMessageCalendarNotSynced(_: Void = ()) -> String {
        return NSLocalizedString("Alert.message.calendar.not.synced", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT could not create the event for the selected date. Please choose date in next 30 days.
      static func alertMessageEventDateNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("Alert.message.event.date.not.available", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT does not have access to your Photos or Videos. To enable access open Setting on your device
      static func alertBodyCameraNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Body.Camera.Not.Available", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT does not have access to your camera. To enable access, tap Settings and turn on Camera.
      static func alertCameraPermissionNotGrantedMessage(_: Void = ()) -> String {
        return NSLocalizedString("Alert.CameraPermissionNotGranted.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT does not have access to your photos. To enable access, tap Settings and turn on Photos.
      static func alertPhotosPermissionNotGrantedMessage(_: Void = ()) -> String {
        return NSLocalizedString("Alert.PhotosPermissionNotGranted.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT needs to download more data. Please try again later
      static func alertNotSyncedMessage(_: Void = ()) -> String {
        return NSLocalizedString("Alert.NotSynced.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT reviews the calendars you have allowed access to determine how many meetings you have throughout your week. The number of meetings you have today helps determine your overall meeting load, which requires preparation if you are going to Rule Your Meetings. It also helps you become more purposeful in the way you design your schedule and prepare for your meetings. We have found that more than 6 meetings a day makes it very difficult to prepare properly and to have adequate thinking, problem solving, and working time. On days when your meeting load is high you may want to consider activating your Tough Day plan.
      static func meChartInfoTextMeetingsAverageNumber(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Meetings.Average.Number", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT reviews your calendar and meeting load history to help you see how your current week's load compares to your previous week. The number of meetings you have each week helps you become more purposeful in the way you design your schedule and how you prepare for the week ahead. On weeks where your meeting load is high, you may want to schedule recovery time throughout the week to ensure you Rule Your Impact even during your busiest weeks.
      static func meChartInfoTextMeetingsIncrease(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Meetings.Increase", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT uses the input from your Daily Preparation Minute to determine your perceived load each day. It then compiles this data to help you get a snapshot of your current week and month. Your average score helps bring self-awareness to how you perceive the intensity of your days. This will help you become more strategic with designing your energy, focus, and recovery needs. The graph displays red bars during periods of high intensity and white bars during periods of moderate to low intensity.
      static func meChartInfoTextIntensityLoad(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Intensity.Load", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT uses the input from your Daily Preparation Minute to determine your perceived recovery each day. It then compiles this data to help you get a snapshot of your current week and month. Your average score helps bring self-awareness as to how you perceive your recovery state in relation to your perceived load that day. Ideally, your perceived recovery should be equal to or greater than your perceived load. This would mean you created a performance buffer and you are ready for the challenges ahead. If your perceived recovery score is less than your perceived load, you should increase the amount of your sleep, improve the quality of your sleep, and improve your overall recovery plan. You should also examine how you are strategically scheduling your days.
      static func meChartInfoTextIntensityRecovery(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Intensity.Recovery", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT® uses your calendar and daily input to determine how many peak performances you have coming up this week and next week as well as your average number of peak performances per week. This data will help you better prepare for your upcoming events and customize your strategies accordingly. The personal average helps bring self-awareness as to how many peak performances you typically have compared to your current load and your future ahead.
      static func meChartInfoTextPeakPerformanceUpcoming(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Peak.Performance.Upcoming", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT® uses your calendar and daily input to determine your average number of many peak performances on a monthly and weekly basis. This data helps bring self-awareness as to how many peak performances you typically have compared to your current load and future load ahead.
      static func meChartInfoTextPeakPerformanceAverage(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Peak.Performance.Average", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT® uses your calendar to determine your amount of flights you have for the next four weeks. This data helps bring self-awareness as to how many flights you have and strategically plan your weeks ahead. Make sure to apply High Performance Travel strategies from your QOT® coach for each flight.
      static func meChartInfoTextTravelTrips(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Travel.Trips", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QOT® uses your calendar to determine your amount of flights you have in the past four weeks and the year. This data helps bring self-awareness as to how many flights you have. Make sure to apply High Performance Travel strategies from your QOT® coach for each flight.
      static func meChartInfoTextTravelAverageNumber(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Travel.Average.Number", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: READ
      static func searchFilterRead(_: Void = ()) -> String {
        return NSLocalizedString("Search.Filter.Read", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: REFLECT ON SUCCESS
      static func prepareHeaderReflectOnSuccess(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.header.reflect.on.success", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: REFLECT ON SUCCESS
      static func prepareReviewNotesReflectionsNavbarTitle(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Reflections.Navbar.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: RELATED ARTICLES
      static func learnContentItemTitleRelatedArticles(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Content.Item.Title.Related.Articles", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: RELATED CONTENT
      static func learnArticleItemRelatedContent(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Article.Item.RelatedContent", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: REPLAN YOUR SPRINT
      static func mySprintDetailsInfoTitleReplanSprint(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Info.Title.ReplanSprint", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: RULE YOUR IMPACT
      static func splashViewRuleYourImpact(_: Void = ()) -> String {
        return NSLocalizedString("splash.view.rule.your.impact", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Rate my TBV
      static func rateViewControllerRateMyTBVButton(_: Void = ()) -> String {
        return NSLocalizedString("RateViewController.rateMyTBVButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Read more
      static func prepareContentReadMore(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Content.ReadMore", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Read my To Be Vision
      static func siriShortcutsToBeVisionSuggestedInvocation(_: Void = ()) -> String {
        return NSLocalizedString("SiriShortcuts.ToBeVision.suggestedInvocation", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Relationship
      static func meSectorMyWhyPartnersRelationship(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Relationship", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Remove
      static func buttonTitleRemove(_: Void = ()) -> String {
        return NSLocalizedString("Button.Title.Remove", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Remove strategy
      static func alertTitlePreparationRemoveStrategy(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Preparation.Remove.Strategy", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Request activity tracker
      static func sidebarSensorsMenuRequestSensor(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.RequestSensor", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Reset Password
      static func alertTitleResetPassword(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Reset.Password", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Reset my password
      static func resetPasswordResetMyPassword(_: Void = ()) -> String {
        return NSLocalizedString("ResetPassword.ResetMyPassword", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Restart sprint
      static func mySprintDetailsButtonRestartSprint(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Button.RestartSprint", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Retry sending verification code?
      static func signingDigitCheckButtonTitleResendCode(_: Void = ()) -> String {
        return NSLocalizedString("signing.digit.check.button.title.resend.code", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Review My Data
      static func shortcutItemTitleMeUniverse(_: Void = ()) -> String {
        return NSLocalizedString("shortcut.item.title.me.universe", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Room for additional thoughts
      static func prepareReviewNotesGeneralTitle(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.General.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SECURITY AND LEGAL
      static func sidebarSettingsMenuSecurityButton(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SettingsMenu.SecurityButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SETTINGS
      static func settingsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SETTINGS
      static func sidebarSettingsMenuSettings(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SettingsMenu.Settings", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SHOW
      static func loginViewToggleShow(_: Void = ()) -> String {
        return NSLocalizedString("LoginView.ToggleShow", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SIGN IN
      static func signingLoginTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.login.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SIRI SHORTCUTS
      static func settingsSiriShortcutsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.SiriShortcuts.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SKIP
      static func buttonTitleSkip(_: Void = ()) -> String {
        return NSLocalizedString("Button.Title.Skip", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SPRINT TASKS
      static func mySprintDetailsHeaderSprintTasks(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Header.SprintTasks", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: START
      static func buttonTitleStart(_: Void = ()) -> String {
        return NSLocalizedString("Button.Title.Start", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: STRATEGIES
      static func headerTitleStrategies(_: Void = ()) -> String {
        return NSLocalizedString("Header.Title.Strategies", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: STRATEGIES TO CARRY FORWARD
      static func mySprintDetailsHeaderStrategies(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Header.Strategies", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SUGGESTED SOLUTIONS
      static func headerTitleSuggestedStrategies(_: Void = ()) -> String {
        return NSLocalizedString("Header.Title.Suggested.Strategies", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SYNCED CALENDARS
      static func sidebarTitleCalendars(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Calendars", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save
      static func alertButtonTitleSave(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Button.Title.Save", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save
      static func mySprintDetailsNotesButtonSave(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetailsNotes.Button.Save", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save & Continue
      static func alertButtonTitleSaveAndContinue(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Button.Title.Save.and.Continue", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save & Continue
      static func buttonTitleSaveContinue(_: Void = ()) -> String {
        return NSLocalizedString("Button.Title.Save.Continue", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save Preparation
      static func preparePrepareEventsSaveThisPreparation(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.PrepareEvents.SaveThisPreparation", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save changes
      static func buttonTitleSaveChanges(_: Void = ()) -> String {
        return NSLocalizedString("Button.Title.Save.Changes", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Search
      static func sidebarTitleSearch(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Search", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Search QOT content
      static func searchPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Search.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Security
      static func settingsTitleSecurity(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Title.Security", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Select your %@ strategies you want to challenge this week
      static func meSectorMyWhySelectWeeklyChoicesHeader(_ value1: String) -> String {
        return String(format: NSLocalizedString("Me.Sector.My.Why.Select.Weekly.Choices.Header", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Selected Strategies %@/%@
      static func prepareNavigationTitleAddRemoveStrategies(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("Prepare.Navigation.Title.Add.Remove.Strategies", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Send
      static func addSensorViewAlertSend(_: Void = ()) -> String {
        return NSLocalizedString("AddSensorView.Alert.Send", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send Notification?
      static func alertTitlePartnerInvite(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Partner.Invite", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send email
      static func settingsChangePasswordButton(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Change.Password.Button", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sensor connection state is pending. Please try again in a few minutes.
      static func meChartAddSensorPending(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Add.Sensor.Pending", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Set your calendar
      static func meChartInfoButtonTitleNavigateToCalendar(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Button.Title.Navigate.To.Calendar", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Set your password to access Tignum QOT
      static func signingPasswordSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.password.subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Settings
      static func alertButtonTitleSettings(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Button.Title.Settings", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Share QOT progress with your circle of three.
      static func meSectorMyWhyPartnersCellEmptyState(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Cell.Empty.State", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Share content
      static func meSectorMyWhyPartnersCellShareContent(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Cell.Share.Content", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Show me the latest What's Hot? article
      static func siriShortcutsWhatsHotArticleSuggestedInvocation(_: Void = ()) -> String {
        return NSLocalizedString("SiriShortcuts.WhatsHotArticle.suggestedInvocation", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Show my Morning Interview feedback
      static func siriShortcutsDailyPrepSuggestedInvocation(_: Void = ()) -> String {
        return NSLocalizedString("SiriShortcuts.DailyPrep.suggestedInvocation", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Skip
      static func rateViewControllerSkipButton(_: Void = ()) -> String {
        return NSLocalizedString("RateViewController.skipButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sleep
      static func meSectorSleep(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.Sleep", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sleep Quality
      static func meCardTitleSleepQuality(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Sleep.Quality", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sleep Quantity
      static func meCardTitleSleepQuantity(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Sleep.Quantity", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Something else?
      static func addSensorViewAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("AddSensorView.Alert.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Start QOT
      static func slideShowCompletePromptDoneButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("SlideShow.CompletePrompt.DoneButtonTitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Start now or learn a few more steps to learn how to get the most out of QOT.
      static func slideShowMorePromptSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("SlideShow.MorePrompt.Subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Start sprint
      static func mySprintDetailsButtonStartSprint(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Button.StartSprint", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Support
      static func settingsGeneralSupportTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Support.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Support
      static func sidebarTitleSupport(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Support", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Surname
      static func meSectorMyWhyPartnersSurname(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Surname", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sync Calendars
      static func preparePrepareEventsSyncCalendarEvents(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.PrepareEvents.SyncCalendarEvents", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Synchronized Calendars
      static func settingsGeneralCalendarTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Calendar.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Syncing...
      static func sidebarSensorsMenuSensorsSyncing(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.SensorsMenu.Sensors.Syncing", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: TERMS AND CONDITIONS
      static func settingsSecurityTermsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Security.Terms.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: THIS WEEK
      static func meSectorMyStatisticsThisWeek(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.This.Week", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: TO BE VISION
      static func myQOTToBeVisionTitle(_: Void = ()) -> String {
        return NSLocalizedString("MyQOT.ToBeVision.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: TODAY
      static func meSectorMyStatisticsToday(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Today", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: TOOLS
      static func searchFilterTools(_: Void = ()) -> String {
        return NSLocalizedString("Search.Filter.Tools", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: TUTORIAL
      static func settingsGeneralTutorialTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Tutorial.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: TUTORIAL
      static func sidebarTitleIntroSliders(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Intro.Sliders", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: TUTORIAL
      static func topTabBarItemTitleTutorial(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Tutorial", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Take a Picture
      static func imagePickerOptionsButtonCamera(_: Void = ()) -> String {
        return NSLocalizedString("ImagePicker.Options.Button.Camera", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Telephone
      static func settingsGeneralTelephoneTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Telephone.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Thank you, if you give me a minute, I will give you my first analysis
      static func onboardingChatItemLastStep(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding.Chat.Item.Last.Step", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Thank you. I prefer to give you access later.
      static func onboardingChoiceTitleAccessLater(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding.Choice.Title.Access.Later", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Thank you. I prefer to give you access later.
      static func onboardingChoiceTitleAccessLaterWhy(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding.Choice.Title.Access.Later.Why", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Thank you. Yes, I give you confidential access to all.
      static func onboardingChoiceTitleAccessAllWhy(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding.Choice.Title.Access.All.Why", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Thanks for your feedback
      static func addSensorViewAlertFeedbackTitle(_: Void = ()) -> String {
        return NSLocalizedString("AddSensorView.Alert.Feedback.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: The Learn area contains great content on all of the QOT 55 strategies. You can go there to learn, review, or deep dive into any of the strategies. This Learn area also hosts your “What’s Hot” portal where we periodically place new information that we feel you would love.
      static func tutorialLearnText(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial.Learn.Text", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: The Me area is where we house all of your data, your To Be Vision, your support team, and any other information that pertains only to you. This area is always growing so we recommend you visit it often.
      static func tutorialMeText(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial.Me.Text", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: The Prepare area is your QOT game changer area. In this area you will find your normal day and rough day plans but also you can prepare for any event you have coming up where you want to improve your QOT and the QOT of those around you.
      static func tutorialPrepareText(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial.Prepare.Text", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: The camera is not currently available on this device
      static func alertCameraNotAvailableMessage(_: Void = ()) -> String {
        return NSLocalizedString("Alert.CameraNotAvailable.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: The sprint starts on %@. Come back on the first sprintday and you will have access to your tasks.
      static func mySprintDetailsInfoTextActive(_ value1: String) -> String {
        return String(format: NSLocalizedString("MySprintDetails.Info.Text.Active", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: There was a problem updating your profile image. Please try again
      static func meSectorMyWhyPartnersPhotoErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Photo.Error.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This Week's Average Time in Meetings
      static func meSectorMyStatisticsPersonalAverageLengthOfMeetings(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Average.Length.Of.Meetings", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This Week's Average Time in Meetings
      static func meSectorMyStatisticsPersonalMeetingsLength(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Meetings.Length", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This Week’s Average Number of Meetings
      static func meSectorMyStatisticsPersonalAverageNumberOfMeetings(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Average.Number.Of.Meetings", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This app does not have access to your calendars. You can enable access in Privacy Settings
      static func alertMessageCalendarNoAccess(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Calendar.No.Access", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This content is currently unavailable. Please check back later.
      static func alertMessageNoContent(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.NoContent", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This email does not exist in our database
      static func loginViewUnknowEmailMessage(_: Void = ()) -> String {
        return NSLocalizedString("LoginView.UnknowEmailMessage", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This feature is coming soon
      static func alertMessageComingSoon(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.ComingSoon", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Time Between Meetings
      static func meCardTitleMeetingsTimeBetween(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Meetings.Time.Between", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Time in meetings
      static func meCardTitleMeetingsHoursSpent(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Meetings.Hours.Spent", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Time in meetings
      static func meCardTitleMeetingsLength(_: Void = ()) -> String {
        return NSLocalizedString("Me.Card.Title.Meetings.Length", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Time to the event %@
      static func prepareMyPrepTimeToEvent(_ value1: String) -> String {
        return String(format: NSLocalizedString("Prepare.MyPrep.TimeToEvent", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Title
      static func settingsGeneralJobTitleTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.JobTitle.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: To Be Vision
      static func meSectorMyWhyVisionTitle(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Vision.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: To Be Vision
      static func tabBarItemTbv(_: Void = ()) -> String {
        return NSLocalizedString("Tab.Bar.Item.tbv", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: To change the location service permissions please go the settings.
      static func alertMessageLocationServices(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.LocationServices", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: To read
      static func learnContentItemToRead(_: Void = ()) -> String {
        return NSLocalizedString("Learn.Content.Item.ToRead", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: To use Tignum QOT, you must agree to the conditons.
      static func signingProfileCheckBoxError(_: Void = ()) -> String {
        return NSLocalizedString("signing.profile.check.box.error", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Today’s Average Time Between Meetings
      static func meSectorMyStatisticsPersonalAverageTimeBetweenMeetings(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Average.Time.Between.Meetings", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Tools
      static func shortcutItemTitleLibrary(_: Void = ()) -> String {
        return NSLocalizedString("shortcut.item.title.library", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Tools
      static func topTabBarItemTitlePerpareTools(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Perpare.Tools", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Turn on mobile data or use Wi-Fi to access data.
      static func alertMessageSigninMissingConnection(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.signinMissingConnection", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Tutorial reset
      static func settingsTutorialResetTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Tutorial.Reset.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: UPCOMING EVENTS
      static func preparePrepareEventsUpcomingEvents(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.PrepareEvents.UpcomingEvents", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: UPCOMING EVENTS, OR SYNC CALENDAR
      static func preparePrepareEventsUpcomingEventsNoSynchronisableCalendars(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.PrepareEvents.UpcomingEventsNoSynchronisableCalendars", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unable to authenticated
      static func alertMessageUnauthenticated(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Unauthenticated", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unable to share content
      static func meSectorMyWhyPartnersShareNoContentTitle(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Share.NoContent.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Upcoming preps
      static func prepareMyPrepTableviewSectionHeaderUpCommingPreparations(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.MyPrep.Tableview.section.header.UpCommingPreparations", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: User not authenticated
      static func alertTitleUnauthenticated(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Title.Unauthenticated", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: User's average value
      static func chartInitialStateUserAvg(_: Void = ()) -> String {
        return NSLocalizedString("Chart.Initial.State.User.Avg", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: VIDEO
      static func searchFilterVideo(_: Void = ()) -> String {
        return NSLocalizedString("Search.Filter.Video", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Verify
      static func signingDigitCheckBottomButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.digit.check.bottomButtonTitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: WATCH
      static func searchFilterWatch(_: Void = ()) -> String {
        return NSLocalizedString("Search.Filter.Watch", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: WEEK
      static func activityViewWeekButton(_: Void = ()) -> String {
        return NSLocalizedString("ActivityView.WeekButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: WEEK
      static func chartInitialStateWeek(_: Void = ()) -> String {
        return NSLocalizedString("Chart.Initial.State.Week", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: WEEK
      static func meSectorMyStatisticsWeek(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Week", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: WELCOME
      static func signingProfileHudTitleUserCreated(_: Void = ()) -> String {
        return NSLocalizedString("signing.profile.hud.title.user.created", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: WHY DPM ?
      static func guideDailyPrepNotFinishedWhyDPM(_: Void = ()) -> String {
        return NSLocalizedString("Guide.DailyPrep.NotFinished.WhyDPM", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Waiting
      static func audioFullScreenButtonWaiting(_: Void = ()) -> String {
        return NSLocalizedString("Audio.FullScreen.Button.Waiting", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Want to change your password? We can send you an email to help with that!
      static func settingsChangePasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Change.Password.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: We have sent you an email with instructions on how to reset your password.
      static func alertMessageResetPassword(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Reset.Password", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: We use your email to securely verify your account and protect all data you share with us.
      static func signingEmailCheckSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.email.check.subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: We use your email to securely verify your account and to protect all data you share with us.
      static func signingProfileSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.profile.subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Week
      static func calendarWeek(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Week", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Weekly Choices
      static func meSectorMyWhyWeeklyChoicesTitle(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Weekly.Choices.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Weeks
      static func calendarWeeks(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Weeks", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Weight
      static func settingsGeneralWeightTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.General.Weight.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Welcome %@
      static func onboardingChatItemWelcome(_ value1: String) -> String {
        return String(format: NSLocalizedString("Onboarding.Chat.Item.Welcome", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Welcome back to QOT.
      static func signingLoginSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.login.subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: What device would you like us to support?
      static func addSensorViewAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("AddSensorView.Alert.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: What do you want the person/group to know after the event?
      static func prepareReviewNotesIntentionKnowingTitle(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Intention.Knowing.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: What would you like to share with %@?
      static func meSectorMyWhyPartnersShareHeader(_ value1: String) -> String {
        return String(format: NSLocalizedString("Me.Sector.My.Why.Partners.Share.Header", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: What's Hot
      static func topTabBarItemTitleLearnWhatsHot(_: Void = ()) -> String {
        return NSLocalizedString("Top.Tab.Bar.Item.Title.Learn.WhatsHot", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: What's my Upcoming QOT Preparation Event?
      static func siriShortcutsUpcomingEventSuggestedInvocation(_: Void = ()) -> String {
        return NSLocalizedString("SiriShortcuts.UpcomingEvent.suggestedInvocation", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Whats Hot Article
      static func guideCardTypeWhatsHot(_: Void = ()) -> String {
        return NSLocalizedString("Guide.Card.Type.WhatsHot", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Which country do you live in? We use this to protect your data.
      static func signingCountrySubtitle(_: Void = ()) -> String {
        return NSLocalizedString("signing.country.subtitle", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Why do you need access?
      static func onboardingChoiceTitleAccessWhy(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding.Choice.Title.Access.Why", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Would you like to tell your partner more about QOT and how they can help you?
      static func alertMessagePartnerInvite(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Partner.Invite", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Write your reflection notes here
      static func prepareReviewNotesReflectionsPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Reflections.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Written %@ ago
      static func meSectorMyWhyVisionWriteDate(_ value1: String) -> String {
        return String(format: NSLocalizedString("Me.Sector.My.Why.Vision.Write.Date", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: YEAR
      static func meSectorMyStatisticsYear(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Year", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: YOUR DEVICE
      static func preparePrepareEventsYourDevice(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.PrepareEvents.YourDevice", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: YOUR INTENTIONS
      static func prepareHeaderYourIntentions(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.header.your.intentions", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: YOUR INTENTIONS
      static func prepareReviewNotesIntentionsNavbarTitle(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Review.Notes.Intentions.Navbar.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Year
      static func calendarYear(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Year", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Years
      static func calendarYears(_: Void = ()) -> String {
        return NSLocalizedString("Calendar.Years", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Yes, I give you confidential access to all.
      static func onboardingChoiceTitleAccessAll(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding.Choice.Title.Access.All", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Yes, Leave
      static func mySprintDetailsNotesButtonLeave(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetailsNotes.Button.Leave", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Yes, Leave
      static func profileConfirmationDoneButton(_: Void = ()) -> String {
        return NSLocalizedString("ProfileConfirmation.doneButton", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Yes, Pause
      static func mySprintDetailsButtonYesPause(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Button.YesPause", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Yes, continue
      static func buttonTitleYesContinue(_: Void = ()) -> String {
        return NSLocalizedString("Button.Title.YesContinue", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You can tailor your preparation. Add strategies that fit best or remove those you dont like.
      static func alertMessagePreparationEditStrategy(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Preparation.Edit.Strategy", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You finished your sprint. Why don’t you tell us your main takeaways?
      static func mySprintDetailsInfoTextNotes(_: Void = ()) -> String {
        return NSLocalizedString("MySprintDetails.Info.Text.Notes", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have already reached the maximum limit of weekly choices. Please unselect something to continue your selection
      static func meSectorMyWhySelectWeeklyChoicesMaxChoiceAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Select.Weekly.Choices.Max.Choice.Alert.Message", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have not created your To Be Vision yet
      static func myQotVisionNoVision(_: Void = ()) -> String {
        return NSLocalizedString("MyQot.Vision.NoVision", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You've got an event coming up today. Tap on the card to prepare.
      static func guideCardPreparationSingleStartedTodayContent(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.single-started-today.content", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You've got an event coming up today. Tap on the card to prepare.
      static func guideCardPreparationSingleUnstartedTodayContent(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.single-unstarted-today.content", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You've got some events coming up today. Tap on the card to prepare.
      static func guideCardPreparationMultipleStartedTodayContent(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.multiple-started-today.content", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You've got some events coming up today. Tap on the card to prepare.
      static func guideCardPreparationMultipleUnstartedTodayContent(_: Void = ()) -> String {
        return NSLocalizedString("guide.card.preparation.multiple-unstarted-today.content", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your %@ weekly choices %@/%@
      static func meSectorMyWhySelectWeeklyChoicesNavigation(_ value1: String, _ value2: String, _ value3: String) -> String {
        return String(format: NSLocalizedString("Me.Sector.My.Why.Select.Weekly.Choices.Navigation", tableName: "Localized", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// Value: Your 5 Weekly Choices
      static func settingsNotificationsWeeklyChoicesTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Notifications.WeeklyChoices.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your Average Activity Level Score
      static func meSectorMyStatisticsPersonalAverageActivityLevel(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Average.Activity.Level", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your Average Movement Frequency Score
      static func meSectorMyStatisticsPersonalAverageMovementFrequency(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Average.Movement.Frequency", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your Average Perceived Load
      static func meSectorMyStatisticsPersonalAveragePerceivedLoad(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Average.Perceived.Load", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your Average Perceived Recovery
      static func meSectorMyStatisticsPersonalAveragePerceivedRecovery(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Average.Perceived.Recovery", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your Average Sleep Score
      static func meSectorMyStatisticsPersonalAverageSleepQuality(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Statistics.Personal.Average.Sleep.Quality", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your Headline
      static func meSectorMyWhyVisionHeadlinePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Vision.Headline.Placeholder", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your Morning Interview Feedback
      static func siriShortcutsDailyPrepTitle(_: Void = ()) -> String {
        return NSLocalizedString("SiriShortcuts.DailyPrep.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your To Be Vision
      static func siriShortcutsToBeVisionTitle(_: Void = ()) -> String {
        return NSLocalizedString("SiriShortcuts.ToBeVision.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your Upcoming Event Preparation
      static func siriShortcutsUpcomingEventPrepTitle(_: Void = ()) -> String {
        return NSLocalizedString("SiriShortcuts.UpcomingEventPrep.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your What's Hot? Article
      static func siriShortcutsWhatsHotArticleTitle(_: Void = ()) -> String {
        return NSLocalizedString("SiriShortcuts.WhatsHotArticle.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your daily activity level comes from your wearable device and is based on your overall volume of activity throughout your entire day. Your score ranges from 1 (inactive) to 10 (very active). Your activity level score is particularly helpful to build awareness during long days (i.e full of meetings, travel, etc.), when you might not realize that you spend most of the day sitting. Being active helps your brain performance, your energy levels, and your immune function.
      static func meChartInfoTextActivityIndex(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Activity.Index", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your daily movement frequency measures uses data from your wearable device and measures how many times you sit for 90 minutes or longer throughout the day. Your daily score ranges from 1 (highly sedentary) to 10 (very active). Strive for a score greater than 6 to help your brain and body harness the performance benefits of movement. The movement frequency graph displays your daily movement frequency score for the last 5 days.
      static func meChartInfoTextActivityOscillation(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Activity.Oscillation", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your device could not send email
      static func alertMessageCouldNotSendEmail(_: Void = ()) -> String {
        return NSLocalizedString("Alert.Message.Could.Not.Send.Email", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your events and, therefore, your load is kept on your calendar. When I analyze your information, I am looking for how many meetings you have, how much time you have between meetings, how often you need to travel, etc. When I know these things, I can help you rule your impact every day. By knowing your location, I can analyze timezone changes when you travel. This way, I can provide you with custom strategies during your entire trip. Lastly, permission to send you notifications allows me to interact with you when you need it most
      static func onboardingChatItemWhy(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding.Chat.Item.Why", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your preparation has been saved to My Prep
      static func prepareChatPreparationSaved(_: Void = ()) -> String {
        return NSLocalizedString("Prepare.Chat.PreparationSaved", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your sleep quality comes from your paired wearable device and ranges from 1 (bad quality) to 10 (very good sleep quality). The score is derived from an algorithm developed by our recovery experts that considers the time it takes you to fall asleep, how much deep sleep you get, how many times you wake up, and your overall sleep architecture. Each bar on the graph displays your daily sleep score over the last 5 days. The internal pentagon represents your average sleep score for those days. Sleep quality helps you maximize your QOT.
      static func meChartInfoTextSleepQuality(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Sleep.Quality", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your sleep quantity comes from your paired wearable device and shows you how long you slept. This graph shows the number of hours you slept last night and for the past five days. The internal pentagon represents the average number of hours you slept over those five days.
      static func meChartInfoTextSleepQuantity(_: Void = ()) -> String {
        return NSLocalizedString("Me.Chart.Info.Text.Sleep.Quantity", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: cognitive fatigue
      static func fatigueSymptomCognitive(_: Void = ()) -> String {
        return NSLocalizedString("Fatigue.Symptom.Cognitive", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: e-mail
      static func meSectorMyWhyPartnersEmail(_: Void = ()) -> String {
        return NSLocalizedString("Me.Sector.My.Why.Partners.Email", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: emotional fatigue
      static func fatigueSymptomEmotional(_: Void = ()) -> String {
        return NSLocalizedString("Fatigue.Symptom.Emotional", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: in 4 weeks
      static func tbvDataGraphBarNextDurationViewCellInFourWeeks(_: Void = ()) -> String {
        return NSLocalizedString("TBVDataGraphBarNextDurationViewCell.inFourWeeks", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: physical fatigue
      static func fatigueSymptomPhysical(_: Void = ()) -> String {
        return NSLocalizedString("Fatigue.Symptom.Physical", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: • Eight characters minimum
      static func signingPasswordHintCharacter(_: Void = ()) -> String {
        return NSLocalizedString("signing.password.hint.character", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: • One special character
      static func signingPasswordHintSpecial(_: Void = ()) -> String {
        return NSLocalizedString("signing.password.hint.special", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: • One uppercase character
      static func signingPasswordHintUppercase(_: Void = ()) -> String {
        return NSLocalizedString("signing.password.hint.uppercase", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ArticleCollectionCell.validate()
      try _ArticleItemHeaderView.validate()
      try _AudioButton.validate()
      try _AudioPlayerBar.validate()
      try _ChartCell.validate()
      try _CollapsableCell.validate()
      try _CollapsableContentCell.validate()
      try _DecisionTreeViewController.validate()
      try _EditHeaderView.validate()
      try _FormView.validate()
      try _FoundationTableViewCell.validate()
      try _GuideDailyPrepTableViewCell.validate()
      try _GuideToBeVisionTableViewCell.validate()
      try _ImageSubtitleTableViewCell.validate()
      try _ImpactReadinessCell.validate()
      try _LeaderWisdomTableViewCell.validate()
      try _LearnStrategyPlaylistAudioCell.validate()
      try _MediaPlayerOverlay.validate()
      try _MyPeakPerformanceRowCell.validate()
      try _MyPrepsTableViewCell.validate()
      try _MyQotProfileOptionsTableViewCell.validate()
      try _MyToBeVisionViewController.validate()
      try _MyUniverseContentView.validate()
      try _MyUniverseViewController.validate()
      try _NegativeToPositiveTableViewCell.validate()
      try _PartnerEditViewController.validate()
      try _PartnersOverviewCollectionViewCell.validate()
      try _PartnersOverviewViewController.validate()
      try _PaymentReminderViewController.validate()
      try _PrepareContentMainHeaderTableViewCell.validate()
      try _PrepareEventTableViewCell.validate()
      try _PrepareEventsViewController.validate()
      try _PrepareResultsContentTableViewCell.validate()
      try _PrepareSectionHeaderView.validate()
      try _RelatedStrategyTableViewCell.validate()
      try _ScreenHelpViewController.validate()
      try _SensorCollectionViewCell.validate()
      try _SensorViewController.validate()
      try _SettingsLabelTableViewCell.validate()
      try _SettingsMenuHeader.validate()
      try _ShareViewController.validate()
      try _SigningInfoViewController.validate()
      try _SigningProfileDetailViewController.validate()
      try _SolveStrategyTableViewCell.validate()
      try _SolveTableViewCell.validate()
      try _SprintChallengeTableViewCell.validate()
      try _StrategyCategoryCollectionViewCell.validate()
      try _StrategyContentTableViewCell.validate()
      try _StrategyFoundationCollectionViewCell.validate()
      try _TitleSubtitleTableViewCell.validate()
      try _TitleTableViewCell.validate()
      try _ToolsCollectionsAudioTableViewCell.validate()
      try _ToolsCollectionsGroupTableViewCell.validate()
      try _ToolsCollectionsVideoTableViewCell.validate()
      try _UserInputTableViewCell.validate()
      try _WhatsHotArticleHeaderView.validate()
      try _WhatsHotComponentView.validate()
    }
    
    struct _AboutMeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AboutMeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutMeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutMeCell
      }
      
      fileprivate init() {}
    }
    
    struct _AbstractTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AbstractTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AbstractTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AbstractTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AppSettingsFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AppSettingsFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppSettingsFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppSettingsFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleBulletPointTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleBulletPointTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleBulletPointTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleBulletPointTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleCollectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ArticleCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleCollectionCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_new_tag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_new_tag' is used in nib 'ArticleCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleImageHeaderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleImageHeaderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleImageHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleImageHeaderTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleItemHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ArticleItemHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleItemHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleItemHeaderView
      }
      
      static func validate() throws {
        if UIImage(named: "preloading", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'preloading' is used in nib 'ArticleItemHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleItemViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleItemViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleNextUpTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleNextUpTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleNextUpTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleNextUpTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleRelatedCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleRelatedCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleRelatedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleRelatedCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleRelatedTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleRelatedTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleRelatedTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleRelatedTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleRelatedWhatsHotTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleRelatedWhatsHotTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleRelatedWhatsHotTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleRelatedWhatsHotTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ArticleTextHeaderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleTextHeaderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleTextHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleTextHeaderTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AudioButton: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AudioButton"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AudioButton? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AudioButton
      }
      
      static func validate() throws {
        if UIImage(named: "ic_audio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_audio' is used in nib 'AudioButton', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AudioPlayerBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AudioPlayerBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AudioPlayerBar? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AudioPlayerBar
      }
      
      static func validate() throws {
        if UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in nib 'AudioPlayerBar', but couldn't be loaded.") }
        if UIImage(named: "ic_play_sand", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_sand' is used in nib 'AudioPlayerBar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BeSpokeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BeSpokeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BeSpokeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BeSpokeCell
      }
      
      fileprivate init() {}
    }
    
    struct _CalendarEventsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CalendarEventsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CalendarEventsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CalendarEventsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CauseTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CauseTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CauseTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CauseTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ChartCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChartCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChartCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChartCell
      }
      
      static func validate() throws {
        if UIImage(named: "add_sensor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add_sensor' is used in nib 'ChartCell', but couldn't be loaded.") }
        if UIImage(named: "overlay_travel_01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'overlay_travel_01' is used in nib 'ChartCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CoachTableHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CoachTableHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoachTableHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoachTableHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _CoachTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CoachTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoachTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoachTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CollapsableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CollapsableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollapsableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollapsableCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus' is used in nib 'CollapsableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CollapsableContentCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CollapsableContentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollapsableContentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollapsableContentCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_radio_unselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_unselected' is used in nib 'CollapsableContentCell', but couldn't be loaded.") }
        if UIImage(named: "ic_seen_of", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_seen_of' is used in nib 'CollapsableContentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ComponentCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ComponentCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComponentCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComponentCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ComponentHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ComponentHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComponentHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComponentHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _ConfirmationViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ConfirmationViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ContentItemTextTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ContentItemTextTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContentItemTextTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContentItemTextTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DailyBriefForwardEdge: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DailyBriefForwardEdge"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DailyCheckInInsights2TBV: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DailyCheckInInsights2TBV"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DailyCheckinInsightsPeakPerformanceCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DailyCheckinInsightsPeakPerformanceCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyCheckinInsightsPeakPerformanceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyCheckinInsightsPeakPerformanceCell
      }
      
      fileprivate init() {}
    }
    
    struct _DailyCheckinInsightsSHPICell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DailyCheckinInsightsSHPICell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyCheckinInsightsSHPICell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyCheckinInsightsSHPICell
      }
      
      fileprivate init() {}
    }
    
    struct _DailyCheckinInsightsTBVCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DailyCheckinInsightsTBVCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyCheckinInsightsTBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyCheckinInsightsTBVCell
      }
      
      fileprivate init() {}
    }
    
    struct _DecisionTreeViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DecisionTreeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "ic_arrow_up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_up' is used in nib 'DecisionTreeViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _DepartureInfoCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DepartureInfoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DepartureInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DepartureInfoCell
      }
      
      fileprivate init() {}
    }
    
    struct _EditHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditHeaderView
      }
      
      static func validate() throws {
        if UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in nib 'EditHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ExploreCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ExploreCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExploreCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExploreCell
      }
      
      fileprivate init() {}
    }
    
    struct _FatigueTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FatigueTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FatigueTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FatigueTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _FeastCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FeastCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeastCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeastCell
      }
      
      fileprivate init() {}
    }
    
    struct _FiveLines: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FiveLines"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FiveLines? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FiveLines
      }
      
      fileprivate init() {}
    }
    
    struct _FiveLinesWithTopBroad: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FiveLinesWithTopBroad"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FiveLinesWithTopBroad? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FiveLinesWithTopBroad
      }
      
      fileprivate init() {}
    }
    
    struct _FormView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FormView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FormView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FormView
      }
      
      static func validate() throws {
        if UIImage(named: "ic_eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_eye' is used in nib 'FormView', but couldn't be loaded.") }
        if UIImage(named: "ic_eyeHide", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_eyeHide' is used in nib 'FormView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FoundationTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FoundationTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoundationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoundationTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_camera_sand", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_sand' is used in nib 'FoundationTableViewCell', but couldn't be loaded.") }
        if UIImage(named: "ic_play_sand_hollow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_sand_hollow' is used in nib 'FoundationTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FromMyCoachCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FromMyCoachCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FromMyCoachCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FromMyCoachCell
      }
      
      fileprivate init() {}
    }
    
    struct _FromMyCoachHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FromMyCoachHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FromMyCoachHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FromMyCoachHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _FromMyCoachMessageView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FromMyCoachMessageView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FromMyCoachMessageView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FromMyCoachMessageView
      }
      
      fileprivate init() {}
    }
    
    struct _FromTignumCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FromTignumCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FromTignumCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FromTignumCell
      }
      
      fileprivate init() {}
    }
    
    struct _GoodToKnowCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GoodToKnowCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodToKnowCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodToKnowCell
      }
      
      fileprivate init() {}
    }
    
    struct _GuideDailyPrepTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideDailyPrepTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuideDailyPrepTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuideDailyPrepTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_info' is used in nib 'GuideDailyPrepTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideGreetingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GuideGreetingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuideGreetingView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuideGreetingView
      }
      
      fileprivate init() {}
    }
    
    struct _GuidePreparationTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GuidePreparationTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuidePreparationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuidePreparationTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _GuideTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GuideTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuideTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuideTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _GuideToBeVisionTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideToBeVisionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuideToBeVisionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuideToBeVisionTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_info' is used in nib 'GuideToBeVisionTableViewCell', but couldn't be loaded.") }
        if UIImage(named: "tbv_gradient_todo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tbv_gradient_todo' is used in nib 'GuideToBeVisionTableViewCell', but couldn't be loaded.") }
        if UIImage(named: "tbv_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tbv_placeholder' is used in nib 'GuideToBeVisionTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideWhatsHotTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GuideWhatsHotTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GuideWhatsHotTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GuideWhatsHotTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _IPadAdviceView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IPadAdviceView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IPadAdviceView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IPadAdviceView
      }
      
      fileprivate init() {}
    }
    
    struct _ImageSubtitleTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ImageSubtitleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageSubtitleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageSubtitleTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_play_video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_video' is used in nib 'ImageSubtitleTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ImpactDataTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ImpactDataTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImpactDataTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImpactDataTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ImpactReadinessCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ImpactReadinessCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImpactReadinessCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImpactReadinessCell
      }
      
      static func validate() throws {
        if UIImage(named: "arrowDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowDown' is used in nib 'ImpactReadinessCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _InfoAlertView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InfoAlertView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _InfoHelperView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InfoHelperView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LeaderWisdomTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LeaderWisdomTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeaderWisdomTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeaderWisdomTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_audio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_audio' is used in nib 'LeaderWisdomTableViewCell', but couldn't be loaded.") }
        if UIImage(named: "ic_camera_sand", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_sand' is used in nib 'LeaderWisdomTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _LearnContentItemBulletCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LearnContentItemBulletCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnContentItemBulletCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnContentItemBulletCell
      }
      
      fileprivate init() {}
    }
    
    struct _LearnContentItemHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LearnContentItemHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnContentItemHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnContentItemHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _LearnContentItemRecommendedCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LearnContentItemRecommendedCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnContentItemRecommendedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnContentItemRecommendedCell
      }
      
      fileprivate init() {}
    }
    
    struct _LearnPDFCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LearnPDFCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnPDFCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnPDFCell
      }
      
      fileprivate init() {}
    }
    
    struct _LearnReadMoreCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LearnReadMoreCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnReadMoreCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnReadMoreCell
      }
      
      fileprivate init() {}
    }
    
    struct _LearnStrategyAudioPlayerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LearnStrategyAudioPlayerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnStrategyAudioPlayerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnStrategyAudioPlayerView
      }
      
      fileprivate init() {}
    }
    
    struct _LearnStrategyPlaylistAudioCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LearnStrategyPlaylistAudioCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LearnStrategyPlaylistAudioCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LearnStrategyPlaylistAudioCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play' is used in nib 'LearnStrategyPlaylistAudioCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _Level5Cell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Level5Cell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Level5Cell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Level5Cell
      }
      
      fileprivate init() {}
    }
    
    struct _LibraryCategoryCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LibraryCategoryCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibraryCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibraryCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _LibraryLatestPostCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LibraryLatestPostCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibraryCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibraryCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _LibraryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LibraryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibraryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibraryTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _Loader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Loader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Loader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Loader
      }
      
      fileprivate init() {}
    }
    
    struct _MarkAsReadTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MarkAsReadTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MarkAsReadTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MarkAsReadTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MeAtMyBestCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MeAtMyBestCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeAtMyBestCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeAtMyBestCell
      }
      
      fileprivate init() {}
    }
    
    struct _MeAtMyBestEmptyCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MeAtMyBestEmptyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeAtMyBestEmptyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeAtMyBestEmptyCell
      }
      
      fileprivate init() {}
    }
    
    struct _MediaPlayerOverlay: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MediaPlayerOverlay"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MediaPlayerOverlay? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MediaPlayerOverlay
      }
      
      static func validate() throws {
        if UIImage(named: "ic_bookmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bookmark' is used in nib 'MediaPlayerOverlay', but couldn't be loaded.") }
        if UIImage(named: "ic_download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_download' is used in nib 'MediaPlayerOverlay', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MindsetShifterHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MindsetShifterHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MindsetShifterHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MindsetShifterHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _MindsetVisionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MindsetVisionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MindsetVisionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MindsetVisionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MultipleSelectionCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MultipleSelectionCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultipleSelectionCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultipleSelectionCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MultipleSelectionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MultipleSelectionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MultipleSelectionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MultipleSelectionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyPeakPerformanceRowCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyPeakPerformanceRowCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPeakPerformanceRowCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPeakPerformanceRowCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right' is used in nib 'MyPeakPerformanceRowCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MyPeakPerformanceSectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyPeakPerformanceSectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPeakPerformanceSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPeakPerformanceSectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyPeakPerformanceTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyPeakPerformanceTableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPeakPerformanceTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPeakPerformanceTableCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyPeakPerformanceTitleCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyPeakPerformanceTitleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPeakPerformanceTitleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPeakPerformanceTitleCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyPrepTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyPrepTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPrepTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPrepTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyPrepsTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyPrepsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyPrepsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPrepsTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calendar' is used in nib 'MyPrepsTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MyQotMainCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyQotMainCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyQotMainCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyQotMainCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyQotProfileHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyQotProfileHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyQotProfileHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyQotProfileHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _MyQotProfileOptionsTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyQotProfileOptionsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyQotProfileOptionsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyQotProfileOptionsTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "arrowFront", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowFront' is used in nib 'MyQotProfileOptionsTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MyQotSyncedCalendarCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyQotSyncedCalendarCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyQotSyncedCalendarCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyQotSyncedCalendarCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySprintDetailsHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySprintDetailsHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySprintDetailsHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySprintDetailsHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _MySprintsListHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySprintsListHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySprintsListHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySprintsListHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _MyToBeVisionViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyToBeVisionViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "ic_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera' is used in nib 'MyToBeVisionViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in nib 'MyToBeVisionViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_generator", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_generator' is used in nib 'MyToBeVisionViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_share_fancy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_fancy' is used in nib 'MyToBeVisionViewController', but couldn't be loaded.") }
        if UIImage(named: "tbv_fade_overlay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tbv_fade_overlay' is used in nib 'MyToBeVisionViewController', but couldn't be loaded.") }
        if UIImage(named: "tbv_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tbv_placeholder' is used in nib 'MyToBeVisionViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MyUniverseContentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyUniverseContentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyUniverseContentView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyUniverseContentView
      }
      
      static func validate() throws {
        if UIImage(named: "myWhyChoicesFrame", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'myWhyChoicesFrame' is used in nib 'MyUniverseContentView', but couldn't be loaded.") }
        if UIImage(named: "preloading", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'preloading' is used in nib 'MyUniverseContentView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MyUniverseViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyUniverseViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "backgroundMyUniverse", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroundMyUniverse' is used in nib 'MyUniverseViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NegativeToPositiveTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NegativeToPositiveTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NegativeToPositiveTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NegativeToPositiveTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_arrow_left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_left' is used in nib 'NegativeToPositiveTableViewCell', but couldn't be loaded.") }
        if UIImage(named: "ic_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right' is used in nib 'NegativeToPositiveTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PartnerEditViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PartnerEditViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "backgroundMyToBeVision", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroundMyToBeVision' is used in nib 'PartnerEditViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera' is used in nib 'PartnerEditViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PartnersOverviewCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PartnersOverviewCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PartnersOverviewCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PartnersOverviewCollectionViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "placeholder_partner", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_partner' is used in nib 'PartnersOverviewCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PartnersOverviewViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PartnersOverviewViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "backgroundMyToBeVision", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroundMyToBeVision' is used in nib 'PartnersOverviewViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PaymentHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentReminderViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaymentReminderViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentReminderViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentReminderViewController
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "ic_close_rounded", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close_rounded' is used in nib 'PaymentReminderViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PaymentTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PermissionsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PermissionsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PermissionsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PermissionsCell
      }
      
      fileprivate init() {}
    }
    
    struct _PopUpViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PopUpViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareContentHeaderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrepareContentHeaderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareContentHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareContentHeaderTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareContentMainHeaderTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PrepareContentMainHeaderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareContentMainHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareContentMainHeaderTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_minimize", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minimize' is used in nib 'PrepareContentMainHeaderTableViewCell', but couldn't be loaded.") }
        if UIImage(named: "ic_play_video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_video' is used in nib 'PrepareContentMainHeaderTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareContentSubHeaderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrepareContentSubHeaderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareContentSubHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareContentSubHeaderTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareContentTopTabBarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrepareContentTopTabBarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareContentTopTabBarView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareContentTopTabBarView
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareEventTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PrepareEventTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareEventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareEventTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_event", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_event' is used in nib 'PrepareEventTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareEventsUpcomingTripTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrepareEventsUpcomingTripTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareEventsUpcomingTripTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareEventsUpcomingTripTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareEventsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PrepareEventsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "ic_close_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close_white' is used in nib 'PrepareEventsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareNotesHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrepareNotesHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareNotesHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareNotesHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareNotesTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrepareNotesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareNotesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareNotesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareResultsContentTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PrepareResultsContentTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareResultsContentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareResultsContentTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in nib 'PrepareResultsContentTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareResultsInfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrepareResultsInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareResultsInfoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareResultsInfoView
      }
      
      fileprivate init() {}
    }
    
    struct _PrepareSectionHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PrepareSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrepareSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrepareSectionHeaderView
      }
      
      static func validate() throws {
        if UIImage(named: "shortcutItem-prepare", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shortcutItem-prepare' is used in nib 'PrepareSectionHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileSettingsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileSettingsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _QuestionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuestionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionCell
      }
      
      fileprivate init() {}
    }
    
    struct _QuestionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuestionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ReactionsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReactionsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReactionsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReactionsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RelatedStrategyTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RelatedStrategyTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RelatedStrategyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RelatedStrategyTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_read_grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_read_grey' is used in nib 'RelatedStrategyTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ReminderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReminderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReminderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReminderTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RequestDeviceSensorCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RequestDeviceSensorCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestDeviceSensorCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestDeviceSensorCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ScreenHelpViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScreenHelpViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in nib 'ScreenHelpViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_play_video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_video' is used in nib 'ScreenHelpViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SearchViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SensorCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SensorCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SensorCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SensorCollectionViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "fitbitLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fitbitLogo' is used in nib 'SensorCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SensorViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SensorViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "backgroundSidebar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroundSidebar' is used in nib 'SensorViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsBubblesViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingsBubblesViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsButtonTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingsTableViewCell_Button"
      let name = "SettingsButtonTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsControlTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingsTableViewCell_Control"
      let name = "SettingsControlTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsLabelTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SettingsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingsTableViewCell_Label"
      let name = "SettingsLabelTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "arrowDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowDown' is used in nib 'SettingsLabelTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsMenuHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingsMenuHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsMenuHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsMenuHeader
      }
      
      static func validate() throws {
        if UIImage(named: "placeholder_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_user' is used in nib 'SettingsMenuHeader', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsMenuViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingsMenuViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsTextFieldTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingsTableViewCell_TextField"
      let name = "SettingsTextFieldTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ShareViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShareViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "backgroundMyToBeVision", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroundMyToBeVision' is used in nib 'ShareViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_radio_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_selected' is used in nib 'ShareViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_radio_unselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_unselected' is used in nib 'ShareViewController', but couldn't be loaded.") }
        if UIImage(named: "placeholder_partner", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_partner' is used in nib 'ShareViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ShifterResultViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ShifterResultViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SigningCountryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SigningCountryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SigningCountryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SigningCountryTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SigningCountryViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SigningCountryViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SigningCreatePasswordViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SigningCreatePasswordViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SigningDigitViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SigningDigitViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SigningEmailViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SigningEmailViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SigningInfoCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SigningInfoCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SigningInfoCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SigningInfoCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SigningInfoViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SigningInfoViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "LoginLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LoginLogo' is used in nib 'SigningInfoViewController', but couldn't be loaded.") }
        if UIImage(named: "imageView:SpG-ZX-PBd:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:SpG-ZX-PBd:image' is used in nib 'SigningInfoViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SigningLoginViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SigningLoginViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SigningProfileDetailViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SigningProfileDetailViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "checkbox_checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_checked' is used in nib 'SigningProfileDetailViewController', but couldn't be loaded.") }
        if UIImage(named: "checkbox_unchecked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_unchecked' is used in nib 'SigningProfileDetailViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SingleSelectionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SingleSelectionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleSelectionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleSelectionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SiriShortcutsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SiriShortcutsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SiriShortcutsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SiriShortcutsCell
      }
      
      fileprivate init() {}
    }
    
    struct _SiriShortcutsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SiriShortcutsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SolveDayPlanTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SolveDayPlanTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveDayPlanTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveDayPlanTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SolveFollowUpTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SolveFollowUpTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveFollowUpTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveFollowUpTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SolveHeaderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SolveHeaderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveHeaderTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SolveReminderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SolveReminderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveReminderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveReminderCell
      }
      
      fileprivate init() {}
    }
    
    struct _SolveResultsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SolveResultsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SolveStrategyTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SolveStrategyTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveStrategyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveStrategyTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_read_grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_read_grey' is used in nib 'SolveStrategyTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SolveTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SolveTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calendar' is used in nib 'SolveTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SolveTriggerTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SolveTriggerTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SolveTriggerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SolveTriggerTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SprintChallengeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SprintChallengeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SprintChallengeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SprintChallengeCell
      }
      
      fileprivate init() {}
    }
    
    struct _SprintChallengeTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SprintChallengeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SprintChallengeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SprintChallengeTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calendar' is used in nib 'SprintChallengeTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _StrategyCategoryCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StrategyCategoryCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StrategyCategoryCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StrategyCategoryCollectionViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_seen_of", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_seen_of' is used in nib 'StrategyCategoryCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _StrategyContentTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StrategyContentTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StrategyContentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StrategyContentTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_audio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_audio' is used in nib 'StrategyContentTableViewCell', but couldn't be loaded.") }
        if UIImage(named: "ic_seen_of", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_seen_of' is used in nib 'StrategyContentTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _StrategyFoundationCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StrategyFoundationCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StrategyFoundationCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StrategyFoundationCollectionViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_camera_sand", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_sand' is used in nib 'StrategyFoundationCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _StrategyListHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StrategyListHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StrategyListHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StrategyListHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _StrategyTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StrategyTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StrategyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StrategyTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SubsriptionReminderViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SubsriptionReminderViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SuggestionSearchTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SuggestionSearchTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestionSearchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestionSearchTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SuggestionsHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SuggestionsHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuggestionsHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestionsHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _SupportFAQTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SupportFAQTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportFAQTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportFAQTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SupportFAQViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SupportFAQViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TBVDataGraphAnswersTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TBVDataGraphAnswersTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TBVDataGraphAnswersTableViewCell"
      let name = "TBVDataGraphAnswersTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphAnswersTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphAnswersTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TBVDataGraphBarNextDurationViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TBVDataGraphBarNextDurationViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphBarNextDurationViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphBarNextDurationViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TBVDataGraphBarViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TBVDataGraphBarViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphBarViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphBarViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TBVDataGraphHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TBVDataGraphHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _TBVDataGraphSubHeadingTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TBVDataGraphSubHeadingTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TBVDataGraphSubHeadingTableViewCell"
      let name = "TBVDataGraphSubHeadingTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphSubHeadingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphSubHeadingTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TBVDataGraphTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TBVDataGraphTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TBVDataGraphTableViewCell"
      let name = "TBVDataGraphTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVDataGraphTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVDataGraphTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TBVGraphBarRangeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TBVGraphBarRangeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TBVGraphBarRangeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TBVGraphBarRangeCell
      }
      
      fileprivate init() {}
    }
    
    struct _TextTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TextTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ThoughtsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ThoughtsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ThoughtsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThoughtsCell
      }
      
      fileprivate init() {}
    }
    
    struct _ThreeLines: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ThreeLines"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ThreeLines? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThreeLines
      }
      
      fileprivate init() {}
    }
    
    struct _ThreeLinesAndButton: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ThreeLinesAndButton"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ThreeLinesAndButton? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThreeLinesAndButton
      }
      
      fileprivate init() {}
    }
    
    struct _ThreeLinesAndImage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ThreeLinesAndImage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ThreeLinesAndImage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThreeLinesAndImage
      }
      
      fileprivate init() {}
    }
    
    struct _TitleSubtitleTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TitleSubtitleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleSubtitleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleSubtitleTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "arrowFront", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowFront' is used in nib 'TitleSubtitleTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TitleTableHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TitleTableHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleTableHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleTableHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _TitleTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TitleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "arrowFront", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowFront' is used in nib 'TitleTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ToolsCollectionsAudioTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ToolsCollectionsAudioTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToolsCollectionsAudioTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToolsCollectionsAudioTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_audio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_audio' is used in nib 'ToolsCollectionsAudioTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ToolsCollectionsGroupTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ToolsCollectionsGroupTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToolsCollectionsGroupTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToolsCollectionsGroupTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_group_sand", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_group_sand' is used in nib 'ToolsCollectionsGroupTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ToolsCollectionsVideoTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ToolsCollectionsVideoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToolsCollectionsVideoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToolsCollectionsVideoTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_camera_grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_grey' is used in nib 'ToolsCollectionsVideoTableViewCell', but couldn't be loaded.") }
        if UIImage(named: "ic_play_sand_hollow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_sand_hollow' is used in nib 'ToolsCollectionsVideoTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ToolsTableHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ToolsTableHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToolsTableHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToolsTableHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _ToolsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ToolsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToolsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToolsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TriggerTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TriggerTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TriggerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TriggerTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TutorialCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TutorialCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TutorialCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TutorialViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TutorialViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TwoLinesAndButton: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TwoLinesAndButton"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TwoLinesAndButton? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TwoLinesAndButton
      }
      
      fileprivate init() {}
    }
    
    struct _TwoLinesAndImage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TwoLinesAndImage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TwoLinesAndImage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TwoLinesAndImage
      }
      
      fileprivate init() {}
    }
    
    struct _UserInputTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserInputTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserInputTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserInputTableViewCell
      }
      
      static func validate() throws {
        if UIImage(named: "ic_close_rounded", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close_rounded' is used in nib 'UserInputTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _WeeklyChoicesCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WeeklyChoicesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeeklyChoicesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeeklyChoicesCell
      }
      
      fileprivate init() {}
    }
    
    struct _WhatsHotArticleHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WhatsHotArticleHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ArticleItemHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleItemHeaderView
      }
      
      static func validate() throws {
        if UIImage(named: "ic_share_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_blue' is used in nib 'WhatsHotArticleHeaderView', but couldn't be loaded.") }
        if UIImage(named: "preloading", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'preloading' is used in nib 'WhatsHotArticleHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _WhatsHotCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WhatsHotCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WhatsHotCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WhatsHotCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _WhatsHotComponentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WhatsHotComponentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIImage(named: "preloading", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'preloading' is used in nib 'WhatsHotComponentView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _WhatsHotLatestCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WhatsHotLatestCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WhatsHotLatestCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WhatsHotLatestCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try audioFullScreenViewController.validate()
      try coach.validate()
      try dailyCheckin.validate()
      try launchScreen.validate()
      try main.validate()
      try morningInterviewViewController.validate()
      try myLibrary.validate()
      try myLibraryNotes.validate()
      try myLibraryUserStorage.validate()
      try myPreps.validate()
      try myQot.validate()
      try mySprintDetails.validate()
      try mySprintNotes.validate()
      try mySprints.validate()
      try myToBeVision.validate()
      try myToBeVisionRate.validate()
      try pdfReaderViewController.validate()
      try prepareContentNotesViewController.validate()
      try questionnaireViewController.validate()
      try reviewNotesViewController.validate()
      try settingsAdmin.validate()
      try settingsChangePasswordViewController.validate()
      try tools.validate()
      try bottomNavigation.validate()
    }
    
    struct audioFullScreenViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AudioFullScreenViewController
      
      let bundle = R.hostingBundle
      let name = "AudioFullScreenViewController"
      
      static func validate() throws {
        if UIImage(named: "ic_bookmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bookmark' is used in storyboard 'AudioFullScreenViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_bookmark_fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bookmark_fill' is used in storyboard 'AudioFullScreenViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_minimize", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minimize' is used in storyboard 'AudioFullScreenViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_pause_sand", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pause_sand' is used in storyboard 'AudioFullScreenViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_play_sand", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_sand' is used in storyboard 'AudioFullScreenViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_save", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_save' is used in storyboard 'AudioFullScreenViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct bottomNavigation: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "bottomNavigation"
      
      static func validate() throws {
        if UIImage(named: "bottomNavigatorBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottomNavigatorBG' is used in storyboard 'bottomNavigation', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct coach: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let coachNavigationControllerID = StoryboardViewControllerResource<CoachNavigationController>(identifier: "coachNavigationControllerID")
      let coachViewControllerID = StoryboardViewControllerResource<CoachViewController>(identifier: "coachViewControllerID")
      let name = "Coach"
      
      func coachNavigationControllerID(_: Void = ()) -> CoachNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: coachNavigationControllerID)
      }
      
      func coachViewControllerID(_: Void = ()) -> CoachViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: coachViewControllerID)
      }
      
      static func validate() throws {
        if UIImage(named: "ic_close_rounded", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close_rounded' is used in storyboard 'Coach', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.coach().coachNavigationControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'coachNavigationControllerID' could not be loaded from storyboard 'Coach' as 'CoachNavigationController'.") }
        if _R.storyboard.coach().coachViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'coachViewControllerID' could not be loaded from storyboard 'Coach' as 'CoachViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct dailyCheckin: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let dailyCheckinQuestionsViewController = StoryboardViewControllerResource<DailyCheckinQuestionsViewController>(identifier: "DailyCheckinQuestionsViewController")
      let dailyCheckinStartViewController = StoryboardViewControllerResource<DailyCheckinStartViewController>(identifier: "DailyCheckinStartViewController")
      let name = "DailyCheckin"
      
      func dailyCheckinQuestionsViewController(_: Void = ()) -> DailyCheckinQuestionsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dailyCheckinQuestionsViewController)
      }
      
      func dailyCheckinStartViewController(_: Void = ()) -> DailyCheckinStartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dailyCheckinStartViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "arrowBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowBack' is used in storyboard 'DailyCheckin', but couldn't be loaded.") }
        if UIImage(named: "imageView:QWb-TZ-4cJ:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:QWb-TZ-4cJ:image' is used in storyboard 'DailyCheckin', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.dailyCheckin().dailyCheckinQuestionsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dailyCheckinQuestionsViewController' could not be loaded from storyboard 'DailyCheckin' as 'DailyCheckinQuestionsViewController'.") }
        if _R.storyboard.dailyCheckin().dailyCheckinStartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dailyCheckinStartViewController' could not be loaded from storyboard 'DailyCheckin' as 'DailyCheckinStartViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIImage(named: "1_1 learn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '1_1 learn' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let coachCollectionViewController = StoryboardViewControllerResource<CoachCollectionViewController>(identifier: "CoachCollectionViewController")
      let componentDetailViewControllerID = StoryboardViewControllerResource<ComponentDetailViewController>(identifier: "ComponentDetailViewControllerID")
      let name = "Main"
      let qotArticleViewController = StoryboardViewControllerResource<ArticleViewController>(identifier: "QOT.ArticleViewController")
      let qotDailyBriefNavigationController = StoryboardViewControllerResource<DailyBriefNavigationController>(identifier: "QOT.DailyBriefNavigationController")
      let qotKnowingNavigationController = StoryboardViewControllerResource<KnowingNavigationController>(identifier: "QOT.KnowingNavigationController")
      let qotKnowingViewController = StoryboardViewControllerResource<KnowingViewController>(identifier: "QOT.KnowingViewController")
      let qotMyQotNavigationController = StoryboardViewControllerResource<MyQotNavigationController>(identifier: "QOT.MyQotNavigationController")
      let whatsHotDetailViewControllerID = StoryboardViewControllerResource<WhatsHotDetailViewController>(identifier: "WhatsHotDetailViewControllerID")
      
      func coachCollectionViewController(_: Void = ()) -> CoachCollectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: coachCollectionViewController)
      }
      
      func componentDetailViewControllerID(_: Void = ()) -> ComponentDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: componentDetailViewControllerID)
      }
      
      func qotArticleViewController(_: Void = ()) -> ArticleViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qotArticleViewController)
      }
      
      func qotDailyBriefNavigationController(_: Void = ()) -> DailyBriefNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qotDailyBriefNavigationController)
      }
      
      func qotKnowingNavigationController(_: Void = ()) -> KnowingNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qotKnowingNavigationController)
      }
      
      func qotKnowingViewController(_: Void = ()) -> KnowingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qotKnowingViewController)
      }
      
      func qotMyQotNavigationController(_: Void = ()) -> MyQotNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qotMyQotNavigationController)
      }
      
      func whatsHotDetailViewControllerID(_: Void = ()) -> WhatsHotDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: whatsHotDetailViewControllerID)
      }
      
      static func validate() throws {
        if UIImage(named: "ic_more_unselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_more_unselected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "ic_navbar_arrow_left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_navbar_arrow_left' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "ic_navbar_arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_navbar_arrow_right' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "img1.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img1.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().coachCollectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'coachCollectionViewController' could not be loaded from storyboard 'Main' as 'CoachCollectionViewController'.") }
        if _R.storyboard.main().componentDetailViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'componentDetailViewControllerID' could not be loaded from storyboard 'Main' as 'ComponentDetailViewController'.") }
        if _R.storyboard.main().qotArticleViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qotArticleViewController' could not be loaded from storyboard 'Main' as 'ArticleViewController'.") }
        if _R.storyboard.main().qotDailyBriefNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qotDailyBriefNavigationController' could not be loaded from storyboard 'Main' as 'DailyBriefNavigationController'.") }
        if _R.storyboard.main().qotKnowingNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qotKnowingNavigationController' could not be loaded from storyboard 'Main' as 'KnowingNavigationController'.") }
        if _R.storyboard.main().qotKnowingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qotKnowingViewController' could not be loaded from storyboard 'Main' as 'KnowingViewController'.") }
        if _R.storyboard.main().qotMyQotNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qotMyQotNavigationController' could not be loaded from storyboard 'Main' as 'MyQotNavigationController'.") }
        if _R.storyboard.main().whatsHotDetailViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'whatsHotDetailViewControllerID' could not be loaded from storyboard 'Main' as 'WhatsHotDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct morningInterviewViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let morningInterviewViewController = StoryboardViewControllerResource<MorningInterviewViewController>(identifier: "MorningInterviewViewController")
      let name = "MorningInterviewViewController"
      
      func morningInterviewViewController(_: Void = ()) -> MorningInterviewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: morningInterviewViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "DPM_ScrollAssistant", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DPM_ScrollAssistant' is used in storyboard 'MorningInterviewViewController', but couldn't be loaded.") }
        if UIImage(named: "ic_close_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close_white' is used in storyboard 'MorningInterviewViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.morningInterviewViewController().morningInterviewViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'morningInterviewViewController' could not be loaded from storyboard 'MorningInterviewViewController' as 'MorningInterviewViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myLibrary: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyLibraryCategoryListViewController
      
      let bundle = R.hostingBundle
      let myLibraryCategoryListViewController = StoryboardViewControllerResource<MyLibraryCategoryListViewController>(identifier: "MyLibraryCategoryListViewController")
      let name = "MyLibrary"
      
      func myLibraryCategoryListViewController(_: Void = ()) -> MyLibraryCategoryListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myLibraryCategoryListViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "arrowFront", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowFront' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIImage(named: "my_library_bookmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_library_bookmark' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.myLibrary().myLibraryCategoryListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myLibraryCategoryListViewController' could not be loaded from storyboard 'MyLibrary' as 'MyLibraryCategoryListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myLibraryNotes: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let myLibraryNotesViewController = StoryboardViewControllerResource<MyLibraryNotesViewController>(identifier: "MyLibraryNotesViewController")
      let name = "MyLibraryNotes"
      
      func myLibraryNotesViewController(_: Void = ()) -> MyLibraryNotesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myLibraryNotesViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.myLibraryNotes().myLibraryNotesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myLibraryNotesViewController' could not be loaded from storyboard 'MyLibraryNotes' as 'MyLibraryNotesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myLibraryUserStorage: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyLibraryUserStorageViewController
      
      let bundle = R.hostingBundle
      let myLibraryBookmarksViewController = StoryboardViewControllerResource<MyLibraryUserStorageViewController>(identifier: "MyLibraryBookmarksViewController")
      let name = "MyLibraryUserStorage"
      
      func myLibraryBookmarksViewController(_: Void = ()) -> MyLibraryUserStorageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myLibraryBookmarksViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'MyLibraryUserStorage', but couldn't be loaded.") }
        if UIImage(named: "ic_audio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_audio' is used in storyboard 'MyLibraryUserStorage', but couldn't be loaded.") }
        if UIImage(named: "ic_play_video", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_video' is used in storyboard 'MyLibraryUserStorage', but couldn't be loaded.") }
        if UIImage(named: "my_library_bookmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_library_bookmark' is used in storyboard 'MyLibraryUserStorage', but couldn't be loaded.") }
        if UIImage(named: "my_library_download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_library_download' is used in storyboard 'MyLibraryUserStorage', but couldn't be loaded.") }
        if UIImage(named: "preloading", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'preloading' is used in storyboard 'MyLibraryUserStorage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.myLibraryUserStorage().myLibraryBookmarksViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myLibraryBookmarksViewController' could not be loaded from storyboard 'MyLibraryUserStorage' as 'MyLibraryUserStorageViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myPreps: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let myPrepsViewControllerID = StoryboardViewControllerResource<MyPrepsViewController>(identifier: "MyPrepsViewControllerID")
      let name = "MyPreps"
      
      func myPrepsViewControllerID(_: Void = ()) -> MyPrepsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myPrepsViewControllerID)
      }
      
      static func validate() throws {
        if UIImage(named: "ic_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calendar' is used in storyboard 'MyPreps', but couldn't be loaded.") }
        if UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'MyPreps', but couldn't be loaded.") }
        if UIImage(named: "ic_warning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_warning' is used in storyboard 'MyPreps', but couldn't be loaded.") }
        if UIImage(named: "ic_warning_circles", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_warning_circles' is used in storyboard 'MyPreps', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.myPreps().myPrepsViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myPrepsViewControllerID' could not be loaded from storyboard 'MyPreps' as 'MyPrepsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myQot: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyQotProfileViewController
      
      let bundle = R.hostingBundle
      let myQotProfileID = StoryboardViewControllerResource<MyQotProfileViewController>(identifier: "MyQotProfileID")
      let name = "MyQot"
      
      func myQotProfileID(_: Void = ()) -> MyQotProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myQotProfileID)
      }
      
      static func validate() throws {
        if UIImage(named: "arrowFront", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowFront' is used in storyboard 'MyQot', but couldn't be loaded.") }
        if UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'MyQot', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.myQot().myQotProfileID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myQotProfileID' could not be loaded from storyboard 'MyQot' as 'MyQotProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mySprintDetails: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mySprintDetailsViewController = StoryboardViewControllerResource<MySprintDetailsViewController>(identifier: "MySprintDetailsViewController")
      let name = "MySprintDetails"
      
      func mySprintDetailsViewController(_: Void = ()) -> MySprintDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mySprintDetailsViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "my_sprints_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my_sprints_edit' is used in storyboard 'MySprintDetails', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.mySprintDetails().mySprintDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mySprintDetailsViewController' could not be loaded from storyboard 'MySprintDetails' as 'MySprintDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mySprintNotes: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mySprintNotesViewController = StoryboardViewControllerResource<MySprintNotesViewController>(identifier: "MySprintNotesViewController")
      let name = "MySprintNotes"
      
      func mySprintNotesViewController(_: Void = ()) -> MySprintNotesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mySprintNotesViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.mySprintNotes().mySprintNotesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mySprintNotesViewController' could not be loaded from storyboard 'MySprintNotes' as 'MySprintNotesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mySprints: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mySprintsListViewController = StoryboardViewControllerResource<MySprintsListViewController>(identifier: "MySprintsListViewController")
      let name = "MySprints"
      
      func mySprintsListViewController(_: Void = ()) -> MySprintsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mySprintsListViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'MySprints', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.mySprints().mySprintsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mySprintsListViewController' could not be loaded from storyboard 'MySprints' as 'MySprintsListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myToBeVision: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyVisionViewController
      
      let bundle = R.hostingBundle
      let myVisionEditDetailsViewController = StoryboardViewControllerResource<MyVisionEditDetailsViewController>(identifier: "MyVisionEditDetailsViewController")
      let myVisionViewController = StoryboardViewControllerResource<MyVisionViewController>(identifier: "MyVisionViewController")
      let name = "MyToBeVision"
      
      func myVisionEditDetailsViewController(_: Void = ()) -> MyVisionEditDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myVisionEditDetailsViewController)
      }
      
      func myVisionViewController(_: Void = ()) -> MyVisionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myVisionViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "circlesWarning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circlesWarning' is used in storyboard 'MyToBeVision', but couldn't be loaded.") }
        if UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'MyToBeVision', but couldn't be loaded.") }
        if UIImage(named: "gradientBase", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gradientBase' is used in storyboard 'MyToBeVision', but couldn't be loaded.") }
        if UIImage(named: "gradientTop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gradientTop' is used in storyboard 'MyToBeVision', but couldn't be loaded.") }
        if UIImage(named: "photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo' is used in storyboard 'MyToBeVision', but couldn't be loaded.") }
        if UIImage(named: "share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'MyToBeVision', but couldn't be loaded.") }
        if UIImage(named: "warning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'warning' is used in storyboard 'MyToBeVision', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.myToBeVision().myVisionEditDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myVisionEditDetailsViewController' could not be loaded from storyboard 'MyToBeVision' as 'MyVisionEditDetailsViewController'.") }
        if _R.storyboard.myToBeVision().myVisionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myVisionViewController' could not be loaded from storyboard 'MyToBeVision' as 'MyVisionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myToBeVisionRate: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyToBeVisionCountDownViewController
      
      let bundle = R.hostingBundle
      let myToBeVisionDataNullStateViewController = StoryboardViewControllerResource<MyToBeVisionDataNullStateViewController>(identifier: "MyToBeVisionDataNullStateViewController")
      let myToBeVisionRateViewController = StoryboardViewControllerResource<MyToBeVisionRateViewController>(identifier: "MyToBeVisionRateViewController")
      let myToBeVisionTrackerViewController = StoryboardViewControllerResource<MyToBeVisionTrackerViewController>(identifier: "MyToBeVisionTrackerViewController")
      let name = "MyToBeVisionRate"
      
      func myToBeVisionDataNullStateViewController(_: Void = ()) -> MyToBeVisionDataNullStateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myToBeVisionDataNullStateViewController)
      }
      
      func myToBeVisionRateViewController(_: Void = ()) -> MyToBeVisionRateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myToBeVisionRateViewController)
      }
      
      func myToBeVisionTrackerViewController(_: Void = ()) -> MyToBeVisionTrackerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myToBeVisionTrackerViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "arrowBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowBack' is used in storyboard 'MyToBeVisionRate', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.myToBeVisionRate().myToBeVisionDataNullStateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myToBeVisionDataNullStateViewController' could not be loaded from storyboard 'MyToBeVisionRate' as 'MyToBeVisionDataNullStateViewController'.") }
        if _R.storyboard.myToBeVisionRate().myToBeVisionRateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myToBeVisionRateViewController' could not be loaded from storyboard 'MyToBeVisionRate' as 'MyToBeVisionRateViewController'.") }
        if _R.storyboard.myToBeVisionRate().myToBeVisionTrackerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myToBeVisionTrackerViewController' could not be loaded from storyboard 'MyToBeVisionRate' as 'MyToBeVisionTrackerViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pdfReaderViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "PDFReaderViewController"
      let pdfReaderViewController = StoryboardViewControllerResource<PDFReaderViewController>(identifier: "PDFReaderViewController")
      
      func pdfReaderViewController(_: Void = ()) -> PDFReaderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pdfReaderViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.pdfReaderViewController().pdfReaderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pdfReaderViewController' could not be loaded from storyboard 'PDFReaderViewController' as 'PDFReaderViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct prepareContentNotesViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PrepareContentNotesViewController
      
      let bundle = R.hostingBundle
      let name = "PrepareContentNotesViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct questionnaireViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = QuestionnaireViewController
      
      let bundle = R.hostingBundle
      let name = "QuestionnaireViewController"
      let questionnaireViewController = StoryboardViewControllerResource<QuestionnaireViewController>(identifier: "QuestionnaireViewController")
      
      func questionnaireViewController(_: Void = ()) -> QuestionnaireViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: questionnaireViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "arrowDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowDown' is used in storyboard 'QuestionnaireViewController', but couldn't be loaded.") }
        if UIImage(named: "arrowUp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowUp' is used in storyboard 'QuestionnaireViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.questionnaireViewController().questionnaireViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'questionnaireViewController' could not be loaded from storyboard 'QuestionnaireViewController' as 'QuestionnaireViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct reviewNotesViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PrepareNotesViewController
      
      let bundle = R.hostingBundle
      let name = "ReviewNotesViewController"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct settingsAdmin: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SettingsAdminViewController
      
      let bundle = R.hostingBundle
      let name = "SettingsAdmin"
      let notificationsVC = StoryboardViewControllerResource<NotificationsViewController>(identifier: "NotificationsVC")
      
      func notificationsVC(_: Void = ()) -> NotificationsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsVC)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.settingsAdmin().notificationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsVC' could not be loaded from storyboard 'SettingsAdmin' as 'NotificationsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settingsChangePasswordViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingsChangePasswordViewController"
      let settingsChangePasswordTableViewController_ID = StoryboardViewControllerResource<SettingsChangePasswordViewController>(identifier: "SettingsChangePasswordTableViewController_ID")
      
      func settingsChangePasswordTableViewController_ID(_: Void = ()) -> SettingsChangePasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsChangePasswordTableViewController_ID)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.settingsChangePasswordViewController().settingsChangePasswordTableViewController_ID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsChangePasswordTableViewController_ID' could not be loaded from storyboard 'SettingsChangePasswordViewController' as 'SettingsChangePasswordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tools: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Tools"
      let qotToolsItemsViewController = StoryboardViewControllerResource<ToolsItemsViewController>(identifier: "QOT.ToolsItemsViewController")
      let toolsCollectionsViewControllerID = StoryboardViewControllerResource<ToolsCollectionsViewController>(identifier: "toolsCollectionsViewControllerID")
      let toolsViewControllerID = StoryboardViewControllerResource<ToolsViewController>(identifier: "ToolsViewControllerID")
      
      func qotToolsItemsViewController(_: Void = ()) -> ToolsItemsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qotToolsItemsViewController)
      }
      
      func toolsCollectionsViewControllerID(_: Void = ()) -> ToolsCollectionsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: toolsCollectionsViewControllerID)
      }
      
      func toolsViewControllerID(_: Void = ()) -> ToolsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: toolsViewControllerID)
      }
      
      static func validate() throws {
        if UIImage(named: "ic_arrow_left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_left' is used in storyboard 'Tools', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.tools().qotToolsItemsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qotToolsItemsViewController' could not be loaded from storyboard 'Tools' as 'ToolsItemsViewController'.") }
        if _R.storyboard.tools().toolsViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'toolsViewControllerID' could not be loaded from storyboard 'Tools' as 'ToolsViewController'.") }
        if _R.storyboard.tools().toolsCollectionsViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'toolsCollectionsViewControllerID' could not be loaded from storyboard 'Tools' as 'ToolsCollectionsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
