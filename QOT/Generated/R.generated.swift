//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_menu`.
    static let ic_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `settingsBackground`.
    static let settingsBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsBackground")
    
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu", bundle: ..., traitCollection: ...)`
    static func ic_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settingsBackground", bundle: ..., traitCollection: ...)`
    static func settingsBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsBackground, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `LaunchViewController`.
    static let launchViewController = _R.nib._LaunchViewController()
    /// Nib `MainMenuViewController`.
    static let mainMenuViewController = _R.nib._MainMenuViewController()
    /// Nib `SettingsTableViewCell`.
    static let settingsTableViewCell = _R.nib._SettingsTableViewCell()
    /// Nib `SettingsViewController`.
    static let settingsViewController = _R.nib._SettingsViewController()
    /// Nib `SidebarViewController`.
    static let sidebarViewController = _R.nib._SidebarViewController()
    
    /// `UINib(name: "LaunchViewController", in: bundle)`
    static func launchViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.launchViewController)
    }
    
    /// `UINib(name: "MainMenuViewController", in: bundle)`
    static func mainMenuViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainMenuViewController)
    }
    
    /// `UINib(name: "SettingsTableViewCell", in: bundle)`
    static func settingsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsTableViewCell)
    }
    
    /// `UINib(name: "SettingsViewController", in: bundle)`
    static func settingsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsViewController)
    }
    
    /// `UINib(name: "SidebarViewController", in: bundle)`
    static func sidebarViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sidebarViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SettingsTableViewCell_Id`.
    static let settingsTableViewCell_Id: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsTableViewCell_Id")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localized` struct is generated, and contains static references to 9 localization keys.
    struct localized {
      /// Value: About Tignum
      static let sidebarTitleAbout = Rswift.StringResource(key: "Sidebar.Title.About", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add Sensor
      static let sidebarTitleSensor = Rswift.StringResource(key: "Sidebar.Title.Sensor", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Benefits
      static let sidebarTitleBenefits = Rswift.StringResource(key: "Sidebar.Title.Benefits", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Categories
      static let learnCategoryListViewTitle = Rswift.StringResource(key: "learn.category-list-view.title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Data Privacy
      static let sidebarTitlePrivacy = Rswift.StringResource(key: "Sidebar.Title.Privacy", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Library
      static let sidebarTitleLibrary = Rswift.StringResource(key: "Sidebar.Title.Library", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log Out
      static let sidebarTitleLogout = Rswift.StringResource(key: "Sidebar.Title.Logout", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settingsTitle = Rswift.StringResource(key: "Settings.Title", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let sidebarTitleSettings = Rswift.StringResource(key: "Sidebar.Title.Settings", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: About Tignum
      static func sidebarTitleAbout(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.About", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Add Sensor
      static func sidebarTitleSensor(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Sensor", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Benefits
      static func sidebarTitleBenefits(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Benefits", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Categories
      static func learnCategoryListViewTitle(_: Void = ()) -> String {
        return NSLocalizedString("learn.category-list-view.title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Data Privacy
      static func sidebarTitlePrivacy(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Privacy", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Library
      static func sidebarTitleLibrary(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Library", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Log Out
      static func sidebarTitleLogout(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Logout", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Settings
      static func settingsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Title", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Settings
      static func sidebarTitleSettings(_: Void = ()) -> String {
        return NSLocalizedString("Sidebar.Title.Settings", tableName: "Localized", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SidebarViewController.validate()
      try _LaunchViewController.validate()
      try _MainMenuViewController.validate()
      try _SettingsViewController.validate()
    }
    
    struct _LaunchViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LaunchViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in nib 'LaunchViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MainMenuViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainMenuViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in nib 'MainMenuViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UITableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingsTableViewCell_Id"
      let name = "SettingsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in nib 'SettingsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search' is used in nib 'SettingsViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SidebarViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SidebarViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "settingsBackground") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settingsBackground' is used in nib 'SidebarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in nib 'SidebarViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}